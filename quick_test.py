#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from faceit_client import FaceitAPIClient

async def quick_test():
    """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    client = FaceitAPIClient()
    test_nickname = "Geun-Hee"
    
    try:
        print("=== –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ===")
        
        # 1. –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
        print(f"\n1. –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ {test_nickname}...")
        player = await client.find_player_by_nickname(test_nickname)
        if not player:
            print("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        player_id = player['player_id']
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {player['nickname']} (ID: {player_id})")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        formatted_stats = await client.format_player_stats(player_id, player['nickname'])
        if not formatted_stats:
            print("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
            return
        
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        print(f"\n=== –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ===")
        
        # –ü–æ–¥—Å—á–µ—Ç –º–∞—Ç—á–µ–π
        if "–ú–∞—Ç—á–∏:" in formatted_stats:
            matches_line = [line for line in formatted_stats.split('\n') if '–ú–∞—Ç—á–∏:' in line][0]
            matches_count = matches_line.split(':')[1].strip()
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π: {matches_count}")
            if "1104" in matches_count:
                print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ç—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç 1104")
            else:
                print(f"‚ö†Ô∏è –ú–∞—Ç—á–∏: {matches_count} (–æ–∂–∏–¥–∞–ª–∏ 1104)")
        
        # K/D Ratio
        if "K/D:" in formatted_stats:
            kd_line = [line for line in formatted_stats.split('\n') if 'K/D:' in line][0]
            kd_value = kd_line.split(':')[1].strip()
            print(f"‚öîÔ∏è K/D Ratio: {kd_value}")
            try:
                kd_float = float(kd_value)
                if 0.5 <= kd_float <= 5.0:
                    print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: K/D –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
                else:
                    print(f"‚ö†Ô∏è K/D –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ: {kd_float}")
            except ValueError:
                print(f"‚ö†Ô∏è K/D –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {kd_value}")
        
        # –ú–æ–ª–æ—Ç–æ–≤ —É—Ä–æ–Ω
        if "–ú–æ–ª–æ—Ç–æ–≤—ã:" in formatted_stats:
            molotov_line = [line for line in formatted_stats.split('\n') if '–ú–æ–ª–æ—Ç–æ–≤—ã:' in line][0]
            molotov_damage = molotov_line.split(':')[1].strip()
            print(f"üî• –£—Ä–æ–Ω –º–æ–ª–æ—Ç–æ–≤–∞–º–∏: {molotov_damage}")
            try:
                dmg_float = float(molotov_damage.split()[0])  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
                if dmg_float > 0:
                    print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ä–æ–Ω –º–æ–ª–æ—Ç–æ–≤–∞–º–∏ > 0")
                else:
                    print("‚ö†Ô∏è –£—Ä–æ–Ω –º–æ–ª–æ—Ç–æ–≤–∞–º–∏ –≤—Å—ë –µ—â–µ 0.0")
            except (ValueError, IndexError):
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å —É—Ä–æ–Ω –º–æ–ª–æ—Ç–æ–≤–∞–º–∏: {molotov_damage}")
        
        print(f"\n=== –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
        print(formatted_stats[:1000] + "..." if len(formatted_stats) > 1000 else formatted_stats)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await client.close()

if __name__ == "__main__":
    asyncio.run(quick_test())