#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ "Geun-Hee"
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ show_overall_stats, show_maps_stats, show_session_stats

–ê–≤—Ç–æ—Ä: Claude Code
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-08-19
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º standalone –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
from simple_stats_test import TestFaceitClient

class MockStorage:
    """Mock –¥–ª—è storage, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Geun-Hee –≤ —Å–∏—Å—Ç–µ–º–µ
        self.users = {
            12345: {  # –¢–µ—Å—Ç–æ–≤—ã–π user_id
                'user_id': 12345,
                'faceit_id': '0cf595d2-b9a1-4316-9df9-a627c7a8c664',  # –†–µ–∞–ª—å–Ω—ã–π ID Geun-Hee
                'nickname': 'Geun-Hee',
                'created_at': datetime.now().isoformat()
            }
        }
    
    async def get_user_faceit_id(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å FACEIT ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.users.get(user_id)
        return user['faceit_id'] if user else None
    
    async def get_user(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.users.get(user_id)


class MockCallbackQuery:
    """Mock –¥–ª—è CallbackQuery –∏–∑ aiogram"""
    
    def __init__(self, user_id: int):
        self.from_user = type('User', (), {'id': user_id})()
        self.message = type('Message', (), {
            'edit_text': self._edit_text,
            'chat': type('Chat', (), {'id': 123})()
        })()
        self.answered = False
        self.edited_texts = []
    
    async def _edit_text(self, text: str, **kwargs):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.edited_texts.append(text)
        logger.info(f"Message edited: {len(text)} chars")
        if kwargs.get('parse_mode'):
            logger.info(f"Parse mode: {kwargs['parse_mode']}")
    
    async def answer(self, text: str = "", show_alert: bool = False):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback"""
        self.answered = True
        if text:
            logger.info(f"Callback answer: {text}")


class BotHandlersTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    def __init__(self, api_key: str = "41f48f43-609c-4639-b821-360b039f18b4"):
        self.api_key = api_key
        self.client = TestFaceitClient(api_key)
        self.mock_storage = MockStorage()
        self.test_user_id = 12345
        self.results = {"passed": 0, "failed": 0, "total": 0}
    
    def log_result(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        self.results["total"] += 1
        if success:
            self.results["passed"] += 1
            logger.info(f"[PASS] {test_name}: {details}")
        else:
            self.results["failed"] += 1
            logger.error(f"[FAIL] {test_name}: {details}")
    
    async def simulate_show_overall_stats(self, callback: MockCallbackQuery) -> bool:
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ show_overall_stats"""
        try:
            user_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º FACEIT ID
            faceit_id = await self.mock_storage.get_user_faceit_id(user_id)
            if not faceit_id:
                await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!", show_alert=True)
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            player_details = await self.client.get_player_details(faceit_id)
            stats_data = await self.client.get_player_stats(faceit_id)
            
            if not stats_data or not player_details:
                await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
                await callback.answer()
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            formatted_stats = self.client.format_player_stats(player_details, stats_data)
            
            if not formatted_stats:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
                await callback.answer()
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.mock_storage.get_user(user_id)
            nickname = user_data.get('nickname', 'Unknown') if user_data else 'Unknown'
            
            # HLTV —Ä–µ–π—Ç–∏–Ω–≥
            hltv_rating = formatted_stats.get('hltv_rating', 0.0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º stats_handler)
            stats_message = f"""
üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ **–ò–≥—Ä–æ–∫:** {nickname}
üéÆ **ELO:** {formatted_stats.get('elo', 0)} (–£—Ä–æ–≤–µ–Ω—å {formatted_stats.get('level', 0)})
‚≠ê **HLTV 2.1:** {hltv_rating:.2f}
üåç **–†–µ–≥–∏–æ–Ω:** {formatted_stats.get('region', 'N/A')}
‚úÖ **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:** {'–î–∞' if formatted_stats.get('verified', False) else '–ù–µ—Ç'}

üìà **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ **–ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ:** {formatted_stats.get('matches', 0)}
‚Ä¢ **–ü–æ–±–µ–¥:** {formatted_stats.get('wins', 0)} ({formatted_stats.get('winrate', 0):.1f}%)
‚Ä¢ **K/D:** {formatted_stats.get('kd_ratio', 0):.3f}
‚Ä¢ **–°—Ä–µ–¥–Ω–∏–π K/D:** {formatted_stats.get('average_kd', 0):.3f}
‚Ä¢ **ADR:** {formatted_stats.get('adr', 0):.1f}
‚Ä¢ **KAST:** {formatted_stats.get('kast', 0):.1f}%

üéØ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ **–°—Ä–µ–¥–Ω–∏–π % —Ö–µ–¥—à–æ—Ç–æ–≤:** {formatted_stats.get('headshots_avg', 0):.1f}%
‚Ä¢ **–û–±—â–∏–π % —Ö–µ–¥—à–æ—Ç–æ–≤:** {formatted_stats.get('headshots_total', 0):.1f}%
‚Ä¢ **–õ—É—á—à–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥:** {formatted_stats.get('longest_win_streak', 0)}
‚Ä¢ **K/R Ratio:** {formatted_stats.get('kpr', 0):.3f}
‚Ä¢ **First Kills:** {formatted_stats.get('first_kills', 0)}
‚Ä¢ **Flash Assists:** {formatted_stats.get('flash_assists', 0)}

_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}_
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await callback.message.edit_text(stats_message, parse_mode="Markdown")
            await callback.answer()
            
            return True
            
        except Exception as e:
            logger.error(f"Error in simulate_show_overall_stats: {e}")
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            await callback.answer()
            return False
    
    async def simulate_show_maps_stats(self, callback: MockCallbackQuery) -> bool:
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ show_maps_stats"""
        try:
            user_id = callback.from_user.id
            
            faceit_id = await self.mock_storage.get_user_faceit_id(user_id)
            if not faceit_id:
                await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!", show_alert=True)
                return False
            
            await callback.message.edit_text("üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞–º...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            player_details = await self.client.get_player_details(faceit_id)
            stats_data = await self.client.get_player_stats(faceit_id)
            
            if not stats_data or not player_details:
                await callback.message.edit_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                await callback.answer()
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            formatted_stats = self.client.format_player_stats(player_details, stats_data)
            maps_stats = formatted_stats.get('maps', {})
            
            if not maps_stats:
                await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ä—Ç–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                await callback.answer()
                return False
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π
            sorted_maps = sorted(
                maps_stats.items(), 
                key=lambda x: x[1].get('matches', 0), 
                reverse=True
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üó∫Ô∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º**\n\n"
            
            for i, (map_name, map_data) in enumerate(sorted_maps[:7], 1):  # –¢–æ–ø-7 –∫–∞—Ä—Ç
                matches = map_data.get('matches', 0)
                winrate = map_data.get('winrate', 0)
                kd_ratio = map_data.get('kd_ratio', 0)
                adr = map_data.get('adr', 0)
                kast = map_data.get('kast', 0)
                hltv_rating = map_data.get('hltv_rating', 0)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
                if matches == 0:
                    continue
                    
                message += f"**{i}. {map_name}**\n"
                message += f"‚Ä¢ –ú–∞—Ç—á–µ–π: {matches}\n"
                message += f"‚Ä¢ Winrate: {winrate:.1f}%\n"
                message += f"‚Ä¢ K/D: {kd_ratio:.3f}\n"
                message += f"‚Ä¢ ADR: {adr:.1f}\n"
                message += f"‚Ä¢ KAST: {kast:.1f}%\n"
                message += f"‚Ä¢ HLTV 2.1: {hltv_rating:.2f}\n\n"
            
            if len(message.split('\n')) <= 3:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                message += "_–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º._"
            else:
                message += f"_–ü–æ–∫–∞–∑–∞–Ω–æ –∫–∞—Ä—Ç: {min(len(sorted_maps), 7)} –∏–∑ {len(sorted_maps)}_"
            
            await callback.message.edit_text(message, parse_mode="Markdown")
            await callback.answer()
            
            return True
            
        except Exception as e:
            logger.error(f"Error in simulate_show_maps_stats: {e}")
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º.")
            await callback.answer()
            return False
    
    async def simulate_show_session_stats(self, callback: MockCallbackQuery) -> bool:
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ show_session_stats"""
        try:
            user_id = callback.from_user.id
            
            faceit_id = await self.mock_storage.get_user_faceit_id(user_id)
            if not faceit_id:
                await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!", show_alert=True)
                return False
            
            await callback.message.edit_text("‚è∞ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
            history_data = await self.client.get_player_history(faceit_id, limit=30)
            
            if not history_data or 'items' not in history_data:
                await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö")
                await callback.answer()
                return False
            
            matches = history_data['items']
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤
            session_matches = []
            cutoff_time = datetime.now() - timedelta(hours=12)
            
            for match in matches:
                finished_at = match.get('finished_at', 0)
                if finished_at:
                    # –í—Ä–µ–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                    if finished_at > 10**12:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ —á–µ–º timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                        match_time = datetime.fromtimestamp(finished_at / 1000)
                    else:
                        match_time = datetime.fromtimestamp(finished_at)
                    
                    if match_time > cutoff_time:
                        session_matches.append(match)
            
            if not session_matches:
                await callback.message.edit_text(
                    "‚è∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏**\n\n"
                    "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    parse_mode="Markdown"
                )
                await callback.answer()
                return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π
            wins = 0
            total_matches = len(session_matches)
            recent_results = []
            
            for match in session_matches:
                player_won = self.client._determine_player_result(match, faceit_id)
                
                if player_won is True:
                    wins += 1
                    recent_results.append("‚úÖ")
                elif player_won is False:
                    recent_results.append("‚ùå")
                else:
                    recent_results.append("‚ùì")  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
            losses = total_matches - wins
            winrate = (wins / total_matches * 100) if total_matches > 0 else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""
‚è∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤)

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –ú–∞—Ç—á–µ–π: {total_matches}
‚Ä¢ –ü–æ–±–µ–¥: {wins}
‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}
‚Ä¢ Winrate: {winrate:.1f}%

üìà **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:**
"""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π
            for i, (match, result) in enumerate(zip(session_matches[:5], recent_results[:5]), 1):
                game_mode = match.get('game_mode', 'Unknown')
                map_name = match.get('map', 'Unknown')
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç
                score_info = ""
                if 'results' in match and 'score' in match['results']:
                    score = match['results']['score']
                    faction1_score = score.get('faction1', 0)
                    faction2_score = score.get('faction2', 0)
                    score_info = f" ({faction1_score}:{faction2_score})"
                
                # –í—Ä–µ–º—è –º–∞—Ç—á–∞
                finished_at = match.get('finished_at', 0)
                if finished_at:
                    if finished_at > 10**12:
                        match_time = datetime.fromtimestamp(finished_at / 1000)
                    else:
                        match_time = datetime.fromtimestamp(finished_at)
                    time_str = match_time.strftime('%H:%M')
                else:
                    time_str = "?"
                
                message += f"\n{i}. {result} {map_name}{score_info} - {time_str}"
            
            if total_matches > 5:
                message += f"\n\n_–ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {total_matches} –º–∞—Ç—á–µ–π_"
            
            await callback.message.edit_text(message, parse_mode="Markdown")
            await callback.answer()
            
            return True
            
        except Exception as e:
            logger.error(f"Error in simulate_show_session_stats: {e}")
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏.")
            await callback.answer()
            return False
    
    async def run_bot_handlers_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
        logger.info("=" * 60)
        logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ë–û–¢–ê")
        logger.info("=" * 60)
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {self.test_user_id}")
        logger.info(f"FACEIT ID: {await self.mock_storage.get_user_faceit_id(self.test_user_id)}")
        logger.info("=" * 60)
        
        try:
            # –¢–µ—Å—Ç 1: show_overall_stats
            logger.info("\n1. –¢–ï–°–¢ show_overall_stats")
            logger.info("-" * 40)
            callback1 = MockCallbackQuery(self.test_user_id)
            result1 = await self.simulate_show_overall_stats(callback1)
            
            if result1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
                if len(callback1.edited_texts) >= 2:  # –ó–∞–≥—Ä—É–∑–∫–∞ + —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    final_message = callback1.edited_texts[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    required_elements = [
                        "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ò–≥—Ä–æ–∫:", "ELO:", "HLTV 2.1:", 
                        "–ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ:", "–ü–æ–±–µ–¥:", "K/D:", "ADR:", "KAST:"
                    ]
                    
                    missing_elements = [elem for elem in required_elements if elem not in final_message]
                    
                    if not missing_elements:
                        self.log_result("show_overall_stats", True, 
                                      f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã ({len(final_message)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    else:
                        self.log_result("show_overall_stats", False, 
                                      f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(missing_elements)}")
                else:
                    self.log_result("show_overall_stats", False, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            else:
                self.log_result("show_overall_stats", False, "–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ False")
            
            # –¢–µ—Å—Ç 2: show_maps_stats
            logger.info("\n2. –¢–ï–°–¢ show_maps_stats")
            logger.info("-" * 40)
            callback2 = MockCallbackQuery(self.test_user_id)
            result2 = await self.simulate_show_maps_stats(callback2)
            
            if result2:
                if len(callback2.edited_texts) >= 2:
                    final_message = callback2.edited_texts[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º
                    required_elements = [
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º", "–ú–∞—Ç—á–µ–π:", "Winrate:", 
                        "K/D:", "ADR:", "KAST:", "HLTV 2.1:"
                    ]
                    
                    missing_elements = [elem for elem in required_elements if elem not in final_message]
                    
                    if not missing_elements:
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        map_count = final_message.count("‚Ä¢ –ú–∞—Ç—á–µ–π:")
                        self.log_result("show_maps_stats", True, 
                                      f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {map_count} –∫–∞—Ä—Ç–∞–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        self.log_result("show_maps_stats", False, 
                                      f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(missing_elements)}")
                else:
                    self.log_result("show_maps_stats", False, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            else:
                self.log_result("show_maps_stats", False, "–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ False")
            
            # –¢–µ—Å—Ç 3: show_session_stats
            logger.info("\n3. –¢–ï–°–¢ show_session_stats")
            logger.info("-" * 40)
            callback3 = MockCallbackQuery(self.test_user_id)
            result3 = await self.simulate_show_session_stats(callback3)
            
            if result3:
                if len(callback3.edited_texts) >= 2:
                    final_message = callback3.edited_texts[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏
                    if "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏" in final_message:
                        if "–º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in final_message:
                            self.log_result("show_session_stats", True, 
                                          "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–∞—Ç—á–µ–π –∑–∞ 12 —á–∞—Å–æ–≤")
                        else:
                            required_elements = ["–ú–∞—Ç—á–µ–π:", "–ü–æ–±–µ–¥:", "–ü–æ—Ä–∞–∂–µ–Ω–∏–π:", "Winrate:"]
                            missing_elements = [elem for elem in required_elements if elem not in final_message]
                            
                            if not missing_elements:
                                self.log_result("show_session_stats", True, 
                                              "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                            else:
                                self.log_result("show_session_stats", False, 
                                              f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(missing_elements)}")
                    else:
                        self.log_result("show_session_stats", False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                else:
                    self.log_result("show_session_stats", False, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            else:
                self.log_result("show_session_stats", False, "–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ False")
            
            # –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info("\n4. –¢–ï–°–¢ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            logger.info("-" * 40)
            fake_callback = MockCallbackQuery(99999)  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            result4 = await self.simulate_show_overall_stats(fake_callback)
            
            if not result4 and fake_callback.answered:
                self.log_result("Fake User Test", True, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            else:
                self.log_result("Fake User Test", False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
            logger.info("\n5. –¢–ï–°–¢ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            logger.info("-" * 40)
            
            validation_errors = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if len(callback1.edited_texts) >= 2:
                overall_message = callback1.edited_texts[-1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã–µ
                import re
                elo_match = re.search(r'ELO:\*\* (\d+)', overall_message)
                if elo_match:
                    elo = int(elo_match.group(1))
                    if not (0 <= elo <= 4000):
                        validation_errors.append(f"ELO –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {elo}")
                
                level_match = re.search(r'–£—Ä–æ–≤–µ–Ω—å (\d+)', overall_message)
                if level_match:
                    level = int(level_match.group(1))
                    if not (0 <= level <= 10):
                        validation_errors.append(f"–£—Ä–æ–≤–µ–Ω—å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {level}")
                
                winrate_match = re.search(r'–ü–æ–±–µ–¥:\*\* \d+ \((\d+\.?\d*)%\)', overall_message)
                if winrate_match:
                    winrate = float(winrate_match.group(1))
                    if not (0 <= winrate <= 100):
                        validation_errors.append(f"–í–∏–Ω—Ä–µ–π—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {winrate}")
            
            if validation_errors:
                self.log_result("Data Validation", False, f"–û—à–∏–±–∫–∏: {'; '.join(validation_errors)}")
            else:
                self.log_result("Data Validation", True, "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            self.log_result("Critical Error", False, str(e))
        
        finally:
            await self.client.close()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "=" * 60)
        logger.info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ - –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê")
        logger.info("=" * 60)
        
        total = self.results["total"]
        passed = self.results["passed"]
        failed = self.results["failed"]
        success_rate = (passed / total * 100) if total > 0 else 0
        
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if success_rate >= 90:
            status = "–û–¢–õ–ò–ß–ù–û"
        elif success_rate >= 75:
            status = "–•–û–†–û–®–û"
        elif success_rate >= 50:
            status = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        else:
            status = "–ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        
        logger.info(f"\n–°–¢–ê–¢–£–°: {status}")
        logger.info("=" * 60)
        
        return success_rate


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞...")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
    print("-" * 50)
    
    tester = BotHandlersTester()
    success_rate = await tester.run_bot_handlers_tests()
    
    print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {success_rate:.1f}%")
    return success_rate


if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        exit(0 if result >= 75 else 1)
    except KeyboardInterrupt:
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(2)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(3)