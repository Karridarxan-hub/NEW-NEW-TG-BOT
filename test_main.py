import asyncio
import logging
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import settings
from storage import storage
from faceit_client import faceit_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class BotStates(StatesGroup):
    waiting_for_nickname = State()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.bot_token)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    faceit_id = storage.get_user_faceit_id(user_id)
    
    if faceit_id:
        # –£–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "üéÆ <b>FACEIT CS2 –ë–æ—Ç</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
            parse_mode="HTML"
        )
        await state.clear()
    else:
        # –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫–Ω–µ–π–º
        await message.answer(
            "üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FACEIT CS2 –ë–æ—Ç!</b>\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ FACEIT:",
            parse_mode="HTML"
        )
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_nickname –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await state.set_state(BotStates.waiting_for_nickname)


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
@router.message()
async def handle_all_messages(message: Message, state: FSMContext):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    text = message.text if message.text else "None"
    current_state = await state.get_state()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}', —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if current_state == BotStates.waiting_for_nickname:
        await process_nickname_logic(message, state)
    else:
        await message.answer("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")


async def process_nickname_logic(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    user_id = message.from_user.id
    nickname = message.text.strip()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–∏–∫–Ω–µ–π–º: {nickname}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    await message.answer("üîç –ò—â–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ FACEIT...")
    
    try:
        # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
        player_data = await faceit_client.find_player_by_nickname(nickname)
        
        if not player_data:
            await message.answer(
                "‚ùå <b>–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        storage.set_user_faceit_data(
            user_id, 
            player_data.get('player_id'),
            player_data.get('nickname')
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ ELO
        cs2_stats = player_data.get('games', {}).get('cs2', {})
        level = cs2_stats.get('skill_level', 'N/A')
        elo = cs2_stats.get('faceit_elo', 'N/A')
        country = player_data.get('country', 'Unknown')
        
        await message.answer(
            f"‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            f"üë§ <b>–ù–∏–∫–Ω–µ–π–º:</b> {player_data.get('nickname')}\n"
            f"üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"‚ö° <b>ELO:</b> {elo}\n"
            f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {country}\n\n"
            f"üéÆ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.",
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–∞ {nickname}: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
dp.include_router(router)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        logger.info(f"ü§ñ Bot Token: {'*' * 20}{settings.bot_token[-10:]}")
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())