from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from datetime import datetime, timedelta

from keyboards import *
from faceit_client import faceit_client
from storage import storage
from match_handlers import calculate_player_stats_from_match
from history_handlers import process_single_match


class AdditionalStates(StatesGroup):
    waiting_for_form_count = State()
    waiting_for_player_nickname = State()
    waiting_for_match_url = State()


router = Router()


# === –ê–ù–ê–õ–ò–ó –§–û–†–ú–´ ===
@router.callback_query(F.data == "form_analysis")
async def form_analysis_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã"""
    await callback.message.edit_text(
        "üìà –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_form_analysis_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("form_"))
async def show_form_analysis(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã"""
    user_id = callback.from_user.id
    faceit_id = storage.get_user_faceit_id(user_id)
    
    if not faceit_id:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_back_to_main_keyboard()
        )
        return
    
    action = callback.data.split("_")[1]
    
    if action == "custom":
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ—Ç 10 –¥–æ 100):",
            reply_markup=get_back_keyboard("form_analysis")
        )
        await state.set_state(AdditionalStates.waiting_for_form_count)
        await callback.answer()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
    match_counts = {"10": 10, "20": 20, "50": 50}
    match_count = match_counts.get(action, 20)
    
    await process_form_analysis_request(callback, faceit_id, match_count)


@router.message(AdditionalStates.waiting_for_form_count)
async def process_custom_form_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã"""
    try:
        count = int(message.text.strip())
        if count < 10 or count > 100:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        user_id = message.from_user.id
        faceit_id = storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_back_to_main_keyboard()
            )
            await state.clear()
            return
        
        class FakeCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user
            async def answer(self):
                """–§–∏–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
                return None
        
        fake_callback = FakeCallback(message)
        await process_form_analysis_request(fake_callback, faceit_id, count)
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 100:")


async def process_form_analysis_request(callback, faceit_id: str, match_count: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã"""
    await callback.message.edit_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
    matches_data = await faceit_client.get_player_matches(faceit_id, limit=match_count)
    
    if not matches_data or not matches_data.get('items'):
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π.",
            reply_markup=get_back_keyboard("form_analysis")
        )
        return
    
    matches = matches_data['items']
    
    if len(matches) < 10:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞–π–¥–µ–Ω–æ: {len(matches)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10.",
            reply_markup=get_back_keyboard("form_analysis")
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏
    processed_matches = []
    
    for match in matches:
        try:
            match_id = match['match_id']
            match_details = await faceit_client.get_match_details(match_id)
            match_stats = await faceit_client.get_match_stats(match_id)
            
            if match_details and match_stats:
                processed_match = await process_single_match(match_details, match_stats, faceit_id)
                if processed_match:
                    processed_matches.append(processed_match)
        except:
            continue
    
    if len(processed_matches) < 10:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=get_back_keyboard("form_analysis")
        )
        return
    
    # –î–µ–ª–∏–º –Ω–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
    mid_point = len(processed_matches) // 2
    recent_matches = processed_matches[:mid_point]  # –ë–æ–ª–µ–µ –Ω–æ–≤—ã–µ
    older_matches = processed_matches[mid_point:]   # –ë–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    recent_stats = calculate_period_stats(recent_matches)
    older_stats = calculate_period_stats(older_matches)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    analysis_text = f"""üìà **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã** ({len(processed_matches)} –º–∞—Ç—á–µ–π)

üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤:**
üÜï **–ù–µ–¥–∞–≤–Ω–∏–µ {len(recent_matches)} –º–∞—Ç—á–µ–π** vs üìÖ **–ü—Ä–µ–¥—ã–¥—É—â–∏–µ {len(older_matches)} –º–∞—Ç—á–µ–π**

üèÜ **–ü–æ–±–µ–¥—ã/–í–∏–Ω—Ä–µ–π—Ç:**
üÜï {recent_stats['wins']}/{recent_stats['total']} ({recent_stats['winrate']}%) vs üìÖ {older_stats['wins']}/{older_stats['total']} ({older_stats['winrate']}%)
üìà **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {format_difference(recent_stats['winrate'] - older_stats['winrate'], '%', True)}

üíÄ **K/D/A:**
üÜï {recent_stats['avg_kills']:.1f}/{recent_stats['avg_deaths']:.1f}/{recent_stats['avg_assists']:.1f} vs üìÖ {older_stats['avg_kills']:.1f}/{older_stats['avg_deaths']:.1f}/{older_stats['avg_assists']:.1f}

‚öîÔ∏è **K/D —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:**
üÜï {recent_stats['avg_kd']:.2f} vs üìÖ {older_stats['avg_kd']:.2f}
üìà **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {format_difference(recent_stats['avg_kd'] - older_stats['avg_kd'], '', True)}

üí• **ADR:**
üÜï {recent_stats['avg_adr']:.1f} vs üìÖ {older_stats['avg_adr']:.1f}
üìà **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {format_difference(recent_stats['avg_adr'] - older_stats['avg_adr'], '', True)}

üéØ **HLTV 2.1:**
üÜï {recent_stats['avg_hltv']:.2f} vs üìÖ {older_stats['avg_hltv']:.2f}
üìà **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {format_difference(recent_stats['avg_hltv'] - older_stats['avg_hltv'], '', True)}

üìä **–û–±—â–∏–π —Ç—Ä–µ–Ω–¥:** {analyze_trend(recent_stats, older_stats)}"""
    
    await callback.message.edit_text(
        analysis_text,
        reply_markup=get_back_keyboard("form_analysis"),
        parse_mode="Markdown"
    )
    await callback.answer()


def calculate_period_stats(matches: list) -> dict:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if not matches:
        return {}
    
    total_matches = len(matches)
    wins = sum(1 for match in matches if match['won'])
    
    total_kills = sum(match['stats']['kills'] for match in matches)
    total_deaths = sum(match['stats']['deaths'] for match in matches)
    total_assists = sum(match['stats']['assists'] for match in matches)
    
    return {
        'total': total_matches,
        'wins': wins,
        'winrate': round((wins / total_matches) * 100, 1),
        'avg_kills': total_kills / total_matches,
        'avg_deaths': total_deaths / total_matches,
        'avg_assists': total_assists / total_matches,
        'avg_kd': round(sum(match['stats']['kd_ratio'] for match in matches) / total_matches, 2),
        'avg_adr': round(sum(match['stats']['adr'] for match in matches) / total_matches, 1),
        'avg_hltv': round(sum(match['stats']['hltv_rating'] for match in matches) / total_matches, 2)
    }


def format_difference(diff: float, suffix: str = '', positive_is_good: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–æ—Å—Ç—å —Å —ç–º–æ–¥–∑–∏"""
    if diff > 0:
        emoji = "üìà" if positive_is_good else "üìâ"
        return f"{emoji} +{diff:.2f}{suffix}"
    elif diff < 0:
        emoji = "üìâ" if positive_is_good else "üìà"
        return f"{emoji} {diff:.2f}{suffix}"
    else:
        return "‚ûñ 0" + suffix


def analyze_trend(recent: dict, older: dict) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥"""
    improvements = 0
    total_metrics = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics = [
        (recent['winrate'] - older['winrate'], True),
        (recent['avg_kd'] - older['avg_kd'], True),
        (recent['avg_adr'] - older['avg_adr'], True),
        (recent['avg_hltv'] - older['avg_hltv'], True)
    ]
    
    for diff, positive_is_good in metrics:
        total_metrics += 1
        if (positive_is_good and diff > 0) or (not positive_is_good and diff < 0):
            improvements += 1
    
    improvement_rate = improvements / total_metrics
    
    if improvement_rate >= 0.75:
        return "üî• –û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ"
    elif improvement_rate >= 0.5:
        return "üìà –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif improvement_rate >= 0.25:
        return "üîÑ –°–º–µ—à–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ï—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö"
    else:
        return "üìâ –°–Ω–∏–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã. –°—Ç–æ–∏—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É"


# === –°–†–ê–í–ù–ï–ù–ò–ï –ò–ì–†–û–ö–û–í ===
@router.callback_query(F.data == "player_comparison")
async def player_comparison_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤"""
    user_id = callback.from_user.id
    players = storage.get_comparison_players(user_id)
    
    menu_text = f"‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤\n\n–ò–≥—Ä–æ–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(players)}"
    
    if players:
        menu_text += "\n\nüë• **–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:**"
        for i, player in enumerate(players, 1):
            menu_text += f"\n{i}. {player.get('nickname', 'Unknown')}"
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=get_player_comparison_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "comparison_add_self_OLD")
async def add_self_to_comparison(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    user_id = callback.from_user.id
    faceit_id = storage.get_user_faceit_id(user_id)
    
    if not faceit_id:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_back_keyboard("player_comparison")
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    players = storage.get_comparison_players(user_id)
    if any(player.get('faceit_id') == faceit_id for player in players):
        await callback.message.edit_text(
            "‚ùå –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.",
            reply_markup=get_back_keyboard("player_comparison")
        )
        return
    
    await callback.message.edit_text("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    player_data = await faceit_client.get_player_details(faceit_id)
    stats_data = await faceit_client.get_player_stats(faceit_id)
    
    if not player_data or not stats_data:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
            reply_markup=get_back_keyboard("player_comparison")
        )
        return
    
    formatted_stats = faceit_client.format_player_stats(player_data, stats_data)
    
    if formatted_stats:
        formatted_stats['faceit_id'] = faceit_id
        storage.add_comparison_player(user_id, formatted_stats)
        
        await callback.message.edit_text(
            f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!\n\n–ò–≥—Ä–æ–∫: {formatted_stats['nickname']}",
            reply_markup=get_back_keyboard("player_comparison")
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
            reply_markup=get_back_keyboard("player_comparison")
        )
    
    await callback.answer()


@router.callback_query(F.data == "comparison_add_player_OLD")
async def add_player_to_comparison(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:",
        reply_markup=get_back_keyboard("player_comparison")
    )
    await state.set_state(AdditionalStates.waiting_for_player_nickname)
    await callback.answer()


@router.message(AdditionalStates.waiting_for_player_nickname)
async def process_comparison_player_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    nickname = message.text.strip()
    user_id = message.from_user.id
    
    if len(nickname) < 2:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await message.answer("üîç –ò—â–µ–º –∏–≥—Ä–æ–∫–∞...")
    
    # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞
    player_data = await faceit_client.find_player_by_nickname(nickname)
    
    if not player_data:
        await message.answer(
            f"‚ùå –ò–≥—Ä–æ–∫ '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ FACEIT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_keyboard("player_comparison")
        )
        return
    
    faceit_id = player_data['player_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    players = storage.get_comparison_players(user_id)
    if any(player.get('faceit_id') == faceit_id for player in players):
        await message.answer(
            f"‚ùå –ò–≥—Ä–æ–∫ {player_data['nickname']} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.",
            reply_markup=get_back_keyboard("player_comparison")
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_data = await faceit_client.get_player_stats(faceit_id)
    
    if not stats_data:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ {player_data['nickname']}.",
            reply_markup=get_back_keyboard("player_comparison")
        )
        await state.clear()
        return
    
    formatted_stats = faceit_client.format_player_stats(player_data, stats_data)
    
    if formatted_stats:
        formatted_stats['faceit_id'] = faceit_id
        storage.add_comparison_player(user_id, formatted_stats)
        
        await message.answer(
            f"‚úÖ –ò–≥—Ä–æ–∫ {formatted_stats['nickname']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!",
            reply_markup=get_back_keyboard("player_comparison")
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ {player_data['nickname']}.",
            reply_markup=get_back_keyboard("player_comparison")
        )
    
    await state.clear()


@router.callback_query(F.data == "comparison_clear")
async def clear_comparison_data(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    storage.clear_comparison_data(user_id)
    
    await callback.message.edit_text(
        "üóëÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.",
        reply_markup=get_back_keyboard("player_comparison")
    )
    await callback.answer()


@router.callback_query(F.data == "comparison_get")
async def get_player_comparison(callback: CallbackQuery):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤"""
    user_id = callback.from_user.id
    players = storage.get_comparison_players(user_id)
    
    if len(players) < 2:
        await callback.message.edit_text(
            "‚ùå –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –∏–≥—Ä–æ–∫–æ–≤.",
            reply_markup=get_back_keyboard("player_comparison")
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    comparison_text = f"‚öîÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤** ({len(players)} –∏–≥—Ä–æ–∫–æ–≤)\n\n"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫
    metrics = [
        ('–£—Ä–æ–≤–µ–Ω—å', 'level'),
        ('ELO', 'elo'),
        ('–ú–∞—Ç—á–∏', 'matches'),
        ('–í–∏–Ω—Ä–µ–π—Ç %', 'winrate'),
        ('K/D', 'kd_ratio'),
        ('ADR', 'adr'),
        ('HLTV 2.1', 'hltv_rating')
    ]
    
    for metric_name, metric_key in metrics:
        comparison_text += f"üìä **{metric_name}:**\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —ç—Ç–æ–π –º–µ—Ç—Ä–∏–∫–µ
        sorted_players = sorted(players, key=lambda p: p.get(metric_key, 0), reverse=True)
        
        for i, player in enumerate(sorted_players, 1):
            value = player.get(metric_key, 0)
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            
            if metric_key in ['elo', 'matches']:
                comparison_text += f"{emoji} {player['nickname']}: {value:,}\n"
            elif metric_key in ['winrate', 'adr']:
                comparison_text += f"{emoji} {player['nickname']}: {value:.1f}\n"
            else:
                comparison_text += f"{emoji} {player['nickname']}: {value}\n"
        
        comparison_text += "\n"
    
    await callback.message.edit_text(
        comparison_text,
        reply_markup=get_back_keyboard("player_comparison"),
        parse_mode="Markdown"
    )
    await callback.answer()


# === –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –ú–ê–¢–ß–ê ===
@router.callback_query(F.data == "current_match_analysis")
async def current_match_analysis(callback: CallbackQuery, state: FSMContext):
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞"""
    await callback.message.edit_text(
        "üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT:",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.set_state(AdditionalStates.waiting_for_match_url)
    await callback.answer()


@router.message(AdditionalStates.waiting_for_match_url)
async def process_match_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç—á"""
    url = message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—Ç—á–∞ –∏–∑ URL
    match_id_pattern = r'faceit\.com/.*?/room/([a-f0-9-]+)'
    match = re.search(match_id_pattern, url)
    
    if not match:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á FACEIT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n"
            "–ü—Ä–∏–º–µ—Ä: https://www.faceit.com/en/csgo/room/1-abc123..."
        )
        return
    
    match_id = match.group(1)
    
    await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—á...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
    match_details = await faceit_client.get_match_details(match_id)
    
    if not match_details:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
            reply_markup=get_back_to_main_keyboard()
        )
        await state.clear()
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    analysis_text = await analyze_match_teams(match_details)
    
    await message.answer(
        analysis_text,
        reply_markup=get_back_to_main_keyboard(),
        parse_mode="Markdown"
    )
    await state.clear()


async def analyze_match_teams(match_details: dict) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –º–∞—Ç—á–µ"""
    teams = match_details.get('teams', {})
    team1 = teams.get('faction1', {})
    team2 = teams.get('faction2', {})
    
    map_name = match_details.get('voting', {}).get('map', {}).get('pick', ['Unknown'])[0]
    
    analysis_text = f"üîç **–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞**\n\nüó∫Ô∏è **–ö–∞—Ä—Ç–∞:** {map_name}\n\n"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    for team_num, team in enumerate([team1, team2], 1):
        team_name = team.get('name', f'–ö–æ–º–∞–Ω–¥–∞ {team_num}')
        players = team.get('roster', [])
        
        analysis_text += f"{'üîµ' if team_num == 1 else 'üî¥'} **{team_name}**\n"
        
        if not players:
            analysis_text += "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö\n\n"
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
        team_stats = []
        for player in players:
            player_id = player.get('player_id')
            nickname = player.get('nickname', 'Unknown')
            
            if player_id:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
                    player_data = await faceit_client.get_player_details(player_id)
                    stats_data = await faceit_client.get_player_stats(player_id)
                    
                    if player_data and stats_data:
                        formatted_stats = faceit_client.format_player_stats(player_data, stats_data)
                        if formatted_stats:
                            team_stats.append(formatted_stats)
                except:
                    continue
        
        if team_stats:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–º–∞–Ω–¥—ã
            avg_level = sum(p['level'] for p in team_stats) / len(team_stats)
            avg_elo = sum(p['elo'] for p in team_stats) / len(team_stats)
            avg_hltv = sum(p['hltv_rating'] for p in team_stats) / len(team_stats)
            avg_winrate = sum(p['winrate'] for p in team_stats) / len(team_stats)
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–≥–æ –∏ —Ö—É–¥—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ HLTV
            best_player = max(team_stats, key=lambda p: p['hltv_rating'])
            worst_player = min(team_stats, key=lambda p: p['hltv_rating'])
            
            analysis_text += f"üìä **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
            analysis_text += f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {avg_level:.1f}\n"
            analysis_text += f"‚ö° ELO: {avg_elo:,.0f}\n"
            analysis_text += f"üìà –í–∏–Ω—Ä–µ–π—Ç: {avg_winrate:.1f}%\n"
            analysis_text += f"üéØ HLTV: {avg_hltv:.2f}\n\n"
            
            analysis_text += f"üåü **–°–∏–ª—å–Ω–µ–π—à–∏–π:** {best_player['nickname']} (HLTV: {best_player['hltv_rating']})\n"
            analysis_text += f"‚ö†Ô∏è **–°–ª–∞–±–µ–π—à–∏–π:** {worst_player['nickname']} (HLTV: {worst_player['hltv_rating']})\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ä—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if 'maps' in team_stats[0] and map_name.lower() in [m.lower() for m in team_stats[0]['maps'].keys()]:
                map_stats = []
                for player in team_stats:
                    for map_key, stats in player['maps'].items():
                        if map_name.lower() in map_key.lower():
                            map_stats.append(stats)
                            break
                
                if map_stats:
                    avg_map_winrate = sum(s['winrate'] for s in map_stats if s['matches'] > 0) / len([s for s in map_stats if s['matches'] > 0])
                    analysis_text += f"üó∫Ô∏è **–ù–∞ –∫–∞—Ä—Ç–µ {map_name}:**\n"
                    analysis_text += f"üìà –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {avg_map_winrate:.1f}%\n\n"
        else:
            analysis_text += "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤\n\n"
    
    # –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    if len(team_stats) >= 2:
        analysis_text += "üéØ **–ü—Ä–æ–≥–Ω–æ–∑:**\n"
        analysis_text += "–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏–≥—Ä–æ–∫–æ–≤.\n"
        analysis_text += "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É –∏ –∫–æ–º–∞–Ω–¥–Ω—É—é –∏–≥—Ä—É!"
    
    return analysis_text