#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏-–∫–∏–ª–ª–æ–≤ –∏ –∫–ª–∞—Ç—á–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ faceit_client.py —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import asyncio
import logging
from faceit_client import FaceitAPIClient

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_multikills_and_clutches():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º—É–ª—å—Ç–∏-–∫–∏–ª–ª–æ–≤ –∏ –∫–ª–∞—Ç—á–µ–π"""
    print("=" * 60)
    print("–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ú–£–õ–¨–¢–ò-–ö–ò–õ–õ–û–í –ò –ö–õ–ê–¢–ß–ï–ô")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client = FaceitAPIClient()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –∏–≥—Ä–æ–∫–µ Geun-Hee
    faceit_id = "0cf595d2-b9a1-4316-9df9-a627c7a8c664"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        player_details = await client.get_player_details(faceit_id)
        stats_data = await client.get_player_stats(faceit_id)
        
        if not player_details or not stats_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞")
            return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        formatted_stats = client.format_player_stats(player_details, stats_data)
        
        print(f"üë§ –ò–≥—Ä–æ–∫: {formatted_stats.get('nickname', 'Unknown')}")
        print(f"üéÆ ELO: {formatted_stats.get('elo', 0)} (–£—Ä–æ–≤–µ–Ω—å {formatted_stats.get('level', 0)})")
        print(f"üéØ –ú–∞—Ç—á–µ–π: {formatted_stats.get('matches', 0)}")
        
        print("\nüìä –ú–£–õ–¨–¢–ò-–ö–ò–õ–õ–´:")
        print(f"‚Ä¢ –¢—Ä–æ–π–Ω—ã–µ —É–±–∏–π—Å—Ç–≤–∞: {formatted_stats.get('total_triple_kills', 0)}")
        print(f"‚Ä¢ –ß–µ—Ç–≤–µ—Ä–Ω—ã–µ —É–±–∏–π—Å—Ç–≤–∞: {formatted_stats.get('total_quadro_kills', 0)}")
        print(f"‚Ä¢ –≠–π—Å—ã (5–∫): {formatted_stats.get('total_aces', 0)}")
        
        # –û–°–ù–û–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: multi_kills_per_match –≤–º–µ—Å—Ç–æ multi_kills_per_round
        multi_kills_per_match = formatted_stats.get('multi_kills_per_match', 0)
        print(f"‚Ä¢ –ú—É–ª—å—Ç–∏-–∫–∏–ª–ª –∑–∞ –º–∞—Ç—á (3+): {multi_kills_per_match:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç
        total_multi = (formatted_stats.get('total_triple_kills', 0) + 
                      formatted_stats.get('total_quadro_kills', 0) + 
                      formatted_stats.get('total_aces', 0))
        matches = formatted_stats.get('matches', 0)
        expected_multi_per_match = round(total_multi / max(matches, 1), 3) if matches > 0 else 0
        
        print(f"‚Ä¢ –í—Å–µ–≥–æ –º—É–ª—å—Ç–∏-–∫–∏–ª–ª–æ–≤: {total_multi}")
        print(f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞—Å—á–µ—Ç: {expected_multi_per_match:.3f}")
        print(f"‚Ä¢ ‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {'–î–ê' if abs(multi_kills_per_match - expected_multi_per_match) < 0.001 else '–ù–ï–¢'}")
        
        print("\nüèÜ –ö–õ–ê–¢–ß–ò:")
        print(f"‚Ä¢ 1v1 –∫–ª–∞—Ç—á–µ–π: {formatted_stats.get('clutch_1v1_total', 0)}")
        print(f"‚Ä¢ 1v1 –ø–æ–±–µ–¥: {formatted_stats.get('clutch_1v1_wins', 0)}")
        print(f"‚Ä¢ 1v1 –ø—Ä–æ—Ü–µ–Ω—Ç: {formatted_stats.get('clutch_1v1_percentage', 0):.1f}%")
        print(f"‚Ä¢ 1v2 –∫–ª–∞—Ç—á–µ–π: {formatted_stats.get('clutch_1v2_total', 0)}")
        print(f"‚Ä¢ 1v2 –ø–æ–±–µ–¥: {formatted_stats.get('clutch_1v2_wins', 0)}")
        print(f"‚Ä¢ 1v2 –ø—Ä–æ—Ü–µ–Ω—Ç: {formatted_stats.get('clutch_1v2_percentage', 0):.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ (–Ω–µ –Ω—É–ª–µ–≤—ã–µ)
        has_realistic_data = (
            formatted_stats.get('clutch_1v1_total', 0) > 0 or 
            formatted_stats.get('total_triple_kills', 0) > 0
        )
        
        print(f"‚Ä¢ ‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã: {'–î–ê' if has_realistic_data else '–ù–ï–¢'}")
        
        print(f"\nüìà –î–†–£–ì–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"‚Ä¢ ADR: {formatted_stats.get('adr', 0):.1f}")
        print(f"‚Ä¢ KAST: {formatted_stats.get('kast', 0):.1f}%")
        print(f"‚Ä¢ K/D: {formatted_stats.get('kd_ratio', 0):.3f}")
        print(f"‚Ä¢ HLTV —Ä–µ–π—Ç–∏–Ω–≥: {formatted_stats.get('hltv_rating', 0):.2f}")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π % —Ö–µ–¥—à–æ—Ç–æ–≤: {formatted_stats.get('avg_headshot_percentage', 0):.1f}%")
        
        print("\n" + "=" * 60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            ("–ú—É–ª—å—Ç–∏-–∫–∏–ª–ª —Ä–∞—Å—á–µ—Ç", abs(multi_kills_per_match - expected_multi_per_match) < 0.001),
            ("–ù–∞–ª–∏—á–∏–µ –∫–ª–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö", formatted_stats.get('clutch_1v1_total', 0) >= 0),
            ("–ù–∞–ª–∏—á–∏–µ –º—É–ª—å—Ç–∏-–∫–∏–ª–ª –¥–∞–Ω–Ω—ã—Ö", total_multi >= 0),
            ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ADR", 0 <= formatted_stats.get('adr', 0) <= 200),
            ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π KAST", 0 <= formatted_stats.get('kast', 0) <= 100),
        ]
        
        passed = 0
        for check_name, result in checks:
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{check_name}: {status}")
            if result:
                passed += 1
        
        success_rate = (passed / len(checks)) * 100
        print(f"\n–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed}/{len(checks)} ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
            return True
        else:
            print("‚ö†Ô∏è –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û –ü–†–û–í–ê–õ–ï–ù")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
        
    finally:
        await client.close()

async def main():
    success = await test_multikills_and_clutches()
    return success

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        exit(2)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(3)