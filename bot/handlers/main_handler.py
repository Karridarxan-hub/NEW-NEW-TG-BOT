from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import logging
import asyncio

from keyboards import (get_main_menu_keyboard, get_main_reply_keyboard, get_stats_reply_keyboard,
                      get_history_reply_keyboard, get_form_reply_keyboard, get_comparison_reply_keyboard,
                      get_help_reply_keyboard, get_profile_reply_keyboard)
from storage import storage
from faceit_client import faceit_client
from bot.handlers.profile_handler import ProfileStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router(name="main_handler")

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
class MainStates(StatesGroup):
    waiting_for_nickname = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    faceit_id = await storage.get_user_faceit_id(user_id)
    
    if faceit_id:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        user_data = await storage.get_user(user_id)
        await message.answer(
            f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_data.get('nickname', '–ò–≥—Ä–æ–∫')}!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_reply_keyboard()
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer(
            "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FACEIT CS2 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ FACEIT:",
            reply_markup=None
        )
        await state.set_state(MainStates.waiting_for_nickname)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞
@router.message(StateFilter(MainStates.waiting_for_nickname))
async def process_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    nickname = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
    if len(nickname) < 2:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(nickname) > 30:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤ FACEIT API
    await message.answer("üîç –ò—â–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ FACEIT...")
    
    player_data = await faceit_client.find_player_by_nickname(nickname)
    
    if not player_data:
        await message.answer(
            f"‚ùå –ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ FACEIT.\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    faceit_id = player_data['player_id']
    await storage.save_user(user_id, faceit_id, nickname)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
        f"üéÆ –ò–≥—Ä–æ–∫: {nickname}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_reply_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    user_data = await storage.get_user(user_id)
    
    await callback.message.edit_text(
        f"üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

# –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π - –±—É–¥–µ—Ç –≤ –Ω–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ

# –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã  
@router.callback_query(F.data == "form_analysis")
async def show_form_analysis_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã"""
    from keyboards import get_form_analysis_keyboard
    await callback.message.edit_text(
        "üìà **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
        parse_mode="Markdown", 
        reply_markup=get_form_analysis_keyboard()
    )
    await callback.answer()

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
@router.callback_query(F.data == "player_comparison")  
async def show_player_comparison_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤"""
    from bot.handlers.comparison_handler import format_comparison_menu_text, get_comparison_keyboard
    
    user_data = await state.get_data()
    text = await format_comparison_menu_text(user_data)
    keyboard = await get_comparison_keyboard(user_data)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
@router.callback_query(F.data == "current_match_analysis")
async def show_current_match_analysis_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞"""
    from keyboards import get_current_match_analysis_keyboard
    await callback.message.edit_text(
        "üîç **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.",
        parse_mode="Markdown",
        reply_markup=get_current_match_analysis_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    from keyboards import get_help_keyboard
    await callback.message.edit_text(
        "‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "üéÆ **FACEIT CS2 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç** - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CS2.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        parse_mode="Markdown",
        reply_markup=get_help_keyboard()
    )
    await callback.answer()

# =================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ ===================

class FakeMessage:
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç Message –æ–±—ä–µ–∫—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π edit_text –¥–ª—è reply handlers"""
    def __init__(self, original_message):
        self.original_message = original_message
    
    async def edit_text(self, text, parse_mode=None, reply_markup=None, disable_web_page_preview=None):
        """–ò–º–∏—Ç–∏—Ä—É–µ–º edit_text –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await self.original_message.answer(
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup,
                disable_web_page_preview=disable_web_page_preview
            )
        except Exception as e:
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error in FakeMessage.edit_text: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑ reply_markup –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
            try:
                await self.original_message.answer(text=text, parse_mode=parse_mode)
            except Exception as e2:
                logger.error(f"Second attempt failed: {e2}")
                # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                await self.original_message.answer(text)

class FakeCallback:
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç CallbackQuery –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ reply –∏ inline handlers"""
    def __init__(self, message, data=None):
        self.from_user = message.from_user
        self.message = FakeMessage(message)
        self.data = data  # –î–ª—è handlers, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç callback.data
    
    async def answer(self, text="", show_alert=False):
        if text and show_alert:
            await self.message.original_message.answer(text)

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò REPLY-–ö–ù–û–ü–û–ö ===================

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    await message.answer(
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        parse_mode="Markdown",
        reply_markup=get_stats_reply_keyboard()
    )

@router.message(F.text == "üìù –ò—Å—Ç–æ—Ä–∏—è")
async def handle_history_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è'"""
    await message.answer(
        "üìù **–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="Markdown",
        reply_markup=get_history_reply_keyboard()
    )

@router.message(F.text == "üìà –§–æ—Ä–º–∞")
async def handle_form_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–§–æ—Ä–º–∞'"""
    await message.answer(
        "üìà **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=get_form_reply_keyboard()
    )

@router.message(F.text == "üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á")
async def handle_last_match_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á'"""
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞
    from bot.handlers.last_match_handler import show_last_match
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π FakeCallback –∫–ª–∞—Å—Å
    fake_callback = FakeCallback(message)
    await show_last_match(fake_callback)

@router.message(F.text == "‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ")
async def handle_comparison_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ' - —Ç–æ–ª—å–∫–æ reply-–∫–Ω–æ–ø–∫–∏"""
    from bot.handlers.comparison_handler import format_comparison_menu_text
    
    user_data = await state.get_data()
    text = await format_comparison_menu_text(user_data)
    
    await message.answer(
        text=text,
        reply_markup=get_comparison_keyboard_with_count(user_data),
        parse_mode="HTML"
    )

@router.message(F.text == "üîç –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞")
async def handle_current_match_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞'"""
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞
    from bot.handlers.current_match_handler import show_current_match_menu
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.storage.memory import MemoryStorage
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    storage_memory = MemoryStorage()
    state = FSMContext(storage=storage_memory, key=message.bot.id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π FakeCallback –∫–ª–∞—Å—Å
    fake_callback = FakeCallback(message)
    await show_current_match_menu(fake_callback, state)

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'"""
    user_id = message.from_user.id
    
    try:
        user_data = await storage.get_user(user_id)
        
        if not user_data:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start",
                parse_mode="Markdown"
            )
            return
        
        faceit_id = user_data.get('faceit_id')
        nickname = user_data.get('nickname')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä–æ–∫–∞ —Å FACEIT
        player_details = None
        try:
            player_details = await faceit_client.get_player_details(faceit_id)
        except Exception as e:
            logger.error(f"Error getting player details for {faceit_id}: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        if player_details:
            games = player_details.get('games', {})
            cs2_data = games.get('cs2', {})
            elo = cs2_data.get('faceit_elo', 0)
            level = cs2_data.get('skill_level', 0)
            region = player_details.get('country', 'Unknown')
        else:
            elo = 0
            level = 0
            region = 'Unknown'
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await storage.get_user_settings(user_id) or {}
        notifications = "–í–∫–ª—é—á–µ–Ω—ã ‚úÖ" if settings.get('notifications', True) else "–í—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        created_at = user_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if created_at and created_at != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            try:
                from datetime import datetime
                if isinstance(created_at, str):
                    created_dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    created_at = created_dt.strftime('%d.%m.%Y %H:%M')
                else:
                    created_at = str(created_at)[:19]
            except:
                created_at = str(created_at)
        
        last_activity = user_data.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if last_activity and last_activity != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            try:
                from datetime import datetime
                if isinstance(last_activity, str):
                    activity_dt = datetime.fromisoformat(last_activity.replace('Z', '+00:00'))
                    last_activity = activity_dt.strftime('%d.%m.%Y %H:%M')
                else:
                    last_activity = str(last_activity)[:19]
            except:
                last_activity = str(last_activity)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = f"""üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üéÆ **–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:**
‚Ä¢ –ù–∏–∫–Ω–µ–π–º: {nickname}
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å FACEIT: [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](https://www.faceit.com/en/players/{nickname})

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FACEIT:**
‚Ä¢ ELO: {elo} (–£—Ä–æ–≤–µ–Ω—å {level})
‚Ä¢ –†–µ–≥–∏–æ–Ω: {region}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:**
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö: {notifications}"""
        
        await message.answer(
            profile_text,
            parse_mode="Markdown",
            reply_markup=get_profile_reply_keyboard(),
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error showing profile for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è",
            reply_markup=get_profile_reply_keyboard()
        )

@router.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def handle_change_profile_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'"""
    await message.answer(
        "üîÑ **–°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º FACEIT –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:\n\n"
        "üí° *–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∏–∫–Ω–µ–π–º –Ω–∞–ø–∏—Å–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ*",
        parse_mode="Markdown"
    )
    await state.set_state(ProfileStates.waiting_for_new_nickname)

@router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def handle_notifications_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await storage.get_user_settings(user_id) or {}
        current_status = settings.get('notifications', True)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        new_status = not current_status
        settings['notifications'] = new_status
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await storage.update_user_settings(user_id, settings)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
        message_text = f"""üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö**

–°—Ç–∞—Ç—É—Å: **{status_text}**

{"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö." if new_status else "–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö."}"""
        
        await message.answer(
            message_text,
            parse_mode="Markdown",
            reply_markup=get_profile_reply_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error toggling notifications for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            reply_markup=get_profile_reply_keyboard()
        )

@router.message(F.text == "‚≠ê –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∫–∞'"""
    await message.answer(
        "üöß **–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n"
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–¥–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        parse_mode="Markdown",
        reply_markup=get_profile_reply_keyboard()
    )

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    await message.answer(
        "‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "üéÆ **FACEIT CS2 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç** - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CS2.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        parse_mode="Markdown",
        reply_markup=get_help_reply_keyboard()
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    user_id = message.from_user.id
    
    if await storage.get_user_faceit_id(user_id):
        user_data = await storage.get_user(user_id)
        await message.answer(
            f"üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            f"–ò–≥—Ä–æ–∫: {user_data.get('nickname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_reply_keyboard()
        )
    else:
        await message.answer(
            "‚ùì –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )

# =================== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï REPLY-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.message(F.text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_overall_stats_reply(message: Message):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º FACEIT ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        faceit_id = await storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_stats_reply_keyboard()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await message.answer("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        player_details = await faceit_client.get_player_details(faceit_id)
        stats_data = await faceit_client.get_player_stats(faceit_id)
        
        if not stats_data or not player_details:
            await loading_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É  
        formatted_stats = faceit_client.format_player_stats(player_details, stats_data)
        
        if not formatted_stats:
            await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await storage.get_user(user_id)
        nickname = user_data.get('nickname', 'Unknown') if user_data else 'Unknown'
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É—Ä–æ–≤–Ω–µ–π FACEIT
        level_thresholds = [800, 950, 1100, 1250, 1400, 1550, 1700, 1850, 2000, 2000]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        current_elo = formatted_stats.get('elo', 0)
        current_level = formatted_stats.get('level', 0)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç ELO –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        if current_level >= 10:
            elo_to_next_level = 0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        else:
            next_level_threshold = level_thresholds[current_level]  # current_level —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å–æ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            elo_to_next_level = max(0, next_level_threshold - current_elo)
        
        stats_message = f"""üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞**

üë§ **–ò–≥—Ä–æ–∫:** {nickname}
üéÆ **–£—Ä–æ–≤–µ–Ω—å:** {current_level} | **ELO:** {current_elo}
‚¨ÜÔ∏è **–î–æ —Å–ª–µ–¥. —É—Ä–æ–≤–Ω—è:** {elo_to_next_level if elo_to_next_level > 0 else '–ú–∞–∫—Å–∏–º—É–º'}
üåç **–†–µ–≥–∏–æ–Ω:** {formatted_stats.get('region', 'N/A')}

üìà **–ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ **–ö–∞—Ä—Ç —Å—ã–≥—Ä–∞–Ω–æ:** {formatted_stats.get('matches', 0)}
‚Ä¢ **–ü–æ–±–µ–¥:** {formatted_stats.get('wins', 0)} ({formatted_stats.get('winrate', 0):.1f}%)
‚Ä¢ **–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:** {formatted_stats.get('longest_win_streak', 0)} –ø–æ–±–µ–¥

‚öîÔ∏è **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –º–∞—Ç—á:**
‚Ä¢ **–£–±–∏–π—Å—Ç–≤–∞:** {formatted_stats.get('avg_kills_per_match', 0):.1f}
‚Ä¢ **–°–º–µ—Ä—Ç–∏:** {formatted_stats.get('avg_deaths_per_match', 0):.1f}
‚Ä¢ **–ê—Å—Å–∏—Å—Ç—ã:** {formatted_stats.get('avg_assists_per_match', 0):.1f}
‚Ä¢ **% HS:** {formatted_stats.get('avg_headshot_percentage', 0):.1f}%

üí• **–£—Ä–æ–Ω –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ **ADR:** {formatted_stats.get('adr', 0):.1f}
‚Ä¢ **–û—Å–ª–µ–ø–ª–µ–Ω–∏–π –∑–∞ –∏–≥—Ä—É:** {formatted_stats.get('avg_flash_assists_per_match', 0):.1f}
‚Ä¢ **–£—Ä–æ–Ω –≥—Ä–∞–Ω–∞—Ç–∞–º–∏ –∑–∞ –∏–≥—Ä—É:** {formatted_stats.get('avg_grenade_damage_per_match', 0):.1f}
‚Ä¢ **–£—Ä–æ–Ω –º–æ–ª–æ—Ç–æ–≤—ã—Ö –∑–∞ –∏–≥—Ä—É:** {formatted_stats.get('avg_molotov_damage_per_match', 0):.1f}

üî• **–°–µ—Ä–∏–∏ —É–±–∏–π—Å—Ç–≤:**
‚Ä¢ **–≠–π—Å–æ–≤ (5–∫):** {formatted_stats.get('total_aces', 0)}
‚Ä¢ **4–∫ —É–±–∏–π—Å—Ç–≤:** {formatted_stats.get('total_quadro_kills', 0)}
‚Ä¢ **3–∫ —É–±–∏–π—Å—Ç–≤:** {formatted_stats.get('total_triple_kills', 0)}
‚Ä¢ **–ú—É–ª—å—Ç–∏-–∫–∏–ª–ª –∑–∞ —Ä–∞—É–Ω–¥ (3+):** {formatted_stats.get('multi_kills_per_round', 0):.3f}

üèÜ **–ö–ª–∞—Ç—á–∏:**
‚Ä¢ **1v1:** {formatted_stats.get('clutch_1v1_total', 0)} ({formatted_stats.get('clutch_1v1_percentage', 0):.0f}% –ø–æ–±–µ–¥)
‚Ä¢ **1v2:** {formatted_stats.get('clutch_1v2_total', 0)} ({formatted_stats.get('clutch_1v2_percentage', 0):.0f}% –ø–æ–±–µ–¥)

üéØ **–ü–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –º–∞—Ç—á:**
‚Ä¢ **–ü–µ—Ä–≤—ã–µ —É–±–∏–π—Å—Ç–≤–∞:** {formatted_stats.get('first_kills', 0)}
‚Ä¢ **–ü–µ—Ä–≤—ã–µ —Å–º–µ—Ä—Ç–∏:** {formatted_stats.get('first_deaths', 0)}
‚Ä¢ **–ü–æ–ø—ã—Ç–æ–∫ —ç–Ω—Ç—Ä–∏:** {formatted_stats.get('total_entry_attempts', 0)}
‚Ä¢ **% —É—Å–ø–µ—à–Ω—ã—Ö —ç–Ω—Ç—Ä–∏:** {formatted_stats.get('entry_success_percentage', 0):.1f}%

_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}_"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await loading_msg.edit_text(
            stats_message,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_overall_stats_reply for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(F.text == "üó∫Ô∏è –ü–æ –∫–∞—Ä—Ç–∞–º") 
async def handle_maps_stats_reply(message: Message):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º FACEIT ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        faceit_id = await storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_stats_reply_keyboard()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await message.answer("üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        player_details = await faceit_client.get_player_details(faceit_id)
        stats_data = await faceit_client.get_player_stats(faceit_id)
        
        if not stats_data or not player_details:
            await loading_msg.edit_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        formatted_stats = faceit_client.format_player_stats(player_details, stats_data)
        maps_stats = formatted_stats.get('maps', {})
        
        if not maps_stats:
            await loading_msg.edit_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ä—Ç–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–æ–∫ –Ω–µ –∏–≥—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π."
            )
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π
        sorted_maps = sorted(
            maps_stats.items(), 
            key=lambda x: x[1].get('matches', 0), 
            reverse=True
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∂–∏ –¥–ª—è –∫–∞—Ä—Ç
        map_emojis = {
            'mirage': 'üåã',
            'inferno': 'üè≠', 
            'dust2': 'üå™Ô∏è',
            'nuke': 'üåå',
            'vertigo': 'üèîÔ∏è',
            'ancient': 'üåø',
            'anubis': 'üè∫',
            'train': 'üöÇ',
            'overpass': 'üåâ'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "üó∫Ô∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º**\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—ã –∏–∑ API (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫)
        if maps_stats:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π (—É–±—ã–≤–∞–Ω–∏–µ)
            sorted_maps = sorted(
                maps_stats.items(), 
                key=lambda x: x[1].get('matches', 0), 
                reverse=True
            )
            
            for i, (map_name, map_data) in enumerate(sorted_maps, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
                map_key = map_name.lower().replace(' ', '').replace('de_', '')
                map_emoji = map_emojis.get(map_key, 'üó∫Ô∏è')
                
                message_text += f"**{map_emoji} {i}. {map_name}**\n"
                
                matches = map_data.get('matches', 0)
                if matches > 0:
                    # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    wins = map_data.get('wins', 0)
                    winrate = map_data.get('winrate', 0)
                    kd_ratio = map_data.get('kd_ratio', 0)
                    adr = map_data.get('adr', 0)
                    
                    message_text += f"üìä –ú–∞—Ç—á–µ–π: **{matches}** (üèÜ{wins})\n"
                    message_text += f"üìà Winrate: **{winrate:.1f}%**\n"
                    message_text += f"‚öîÔ∏è K/D: **{kd_ratio:.3f}**\n"
                    message_text += f"üí• ADR: **{adr:.1f}**\n\n"
                else:
                    # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_text += f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ä—Ç–µ\n\n"
        else:
            message_text += "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ä—Ç–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
        
        await loading_msg.edit_text(
            message_text,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_maps_stats_reply for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(F.text == "‚è∞ –ó–∞ —Å–µ—Å—Å–∏—é")
async def handle_session_stats_reply(message: Message):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ—Å—Å–∏—é"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º FACEIT ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        faceit_id = await storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_stats_reply_keyboard()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await message.answer("‚è∞ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Å—Å–∏–π
        history_data = await faceit_client.get_player_history(faceit_id, limit=100)
        
        if not history_data or 'items' not in history_data:
            await loading_msg.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö")
            return
        
        matches = history_data['items']
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –≤ —Å–µ—Å—Å–∏–∏ (–ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –±–æ–ª–µ–µ 10 —á–∞—Å–æ–≤ = –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)
        sessions = []
        current_session = []
        
        for match in matches:
            finished_at = match.get('finished_at', 0)
            if not finished_at:
                continue
                
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
            if finished_at > 10**12:
                match_time = datetime.fromtimestamp(finished_at / 1000)
            else:
                match_time = datetime.fromtimestamp(finished_at)
            
            match['parsed_time'] = match_time
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –ø—É—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            if not current_session:
                current_session = [match]
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
                last_match_time = current_session[-1]['parsed_time']
                time_diff = (last_match_time - match_time).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                
                if time_diff <= 10:  # –ú–∞—Ç—á–∏ –≤ —Ä–∞–º–∫–∞—Ö 10 —á–∞—Å–æ–≤ - –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è
                    current_session.append(match)
                else:  # –ë–æ–ª—å—à–µ 10 —á–∞—Å–æ–≤ - –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è
                    sessions.append(current_session)
                    current_session = [match]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
        if current_session:
            sessions.append(current_session)
        
        if not sessions:
            await loading_msg.edit_text(
                "‚è∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏**\n\n"
                "–°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="Markdown"
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        def get_color_indicator(value, good_threshold, is_percentage=False):
            if is_percentage:
                return "üü¢" if value >= good_threshold else "üî¥"
            else:
                return "üü¢" if value >= good_threshold else "üî¥"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Å–µ—Å—Å–∏—è–º–∏
        message_text = "‚è∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º**\n\n"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
        total_sessions = len(sessions)
        for i, session in enumerate(sessions, 1):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if total_sessions > 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Å—Å–∏–π –º–Ω–æ–≥–æ
                try:
                    await loading_msg.edit_text(f"‚è∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏... {i}/{total_sessions}")
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ç—á–µ–π
            session_stats = await analyze_session_stats_from_matches(session, faceit_id)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
            session_start_time = session[-1]['parsed_time']
            session_end_time = session[0]['parsed_time']
            duration_hours = (session_end_time - session_start_time).total_seconds() / 3600
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Å–µ—Å—Å–∏–∏
            adr_color = get_color_indicator(session_stats['avg_adr'], 75.0)  # ADR >= 75 = –∑–µ–ª–µ–Ω—ã–π
            kd_color = get_color_indicator(session_stats['kd_ratio'], 1.0)
            wr_color = get_color_indicator(session_stats['winrate'], 50.0, True)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–µ—Å—Å–∏–∏
            session_date = session_start_time.strftime('%d.%m.%Y')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            message_text += f"üìÖ {session_date} - {session_stats['total_matches']} –º–∞—Ç—á–µ–π ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours:.1f}—á\n"
            message_text += f"{adr_color} ADR: {session_stats['avg_adr']:.1f} {kd_color} K/D: {session_stats['kd_ratio']:.2f} | {wr_color} WR: {session_stats['winrate']:.1f}%\n"
            message_text += f"üìä –ü–æ–¥—Ä–æ–±–Ω–æ: {session_stats['avg_kills']:.1f}/{session_stats['avg_deaths']:.1f}/{session_stats['avg_assists']:.1f}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            if session_stats.get('failed_matches', 0) > 0:
                successful = session_stats.get('successful_matches', 0)
                total = session_stats['total_matches']
                message_text += f" ‚ö†Ô∏è ({successful}/{total})"
            
            message_text += "\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
        total_sessions_processed = len(sessions)
        message_text += f"_–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_sessions_processed} —Å–µ—Å—Å–∏–π_"
        
        await loading_msg.edit_text(
            message_text,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in handle_session_stats_reply for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ - —É–¥–∞–ª–µ–Ω—ã, –±—É–¥—É—Ç –≤ –Ω–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã
@router.message(F.text == "üìä –ê–Ω–∞–ª–∏–∑ 10 –º–∞—Ç—á–µ–π")
async def handle_form_10_reply(message: Message):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã 10 –º–∞—Ç—á–µ–π"""
    from bot.handlers.form_analysis_handler import analyze_form_fixed
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.storage.memory import MemoryStorage
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    storage_memory = MemoryStorage()
    state = FSMContext(storage=storage_memory, key=message.bot.id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π FakeCallback –∫–ª–∞—Å—Å —Å –¥–∞–Ω–Ω—ã–º–∏
    fake_callback = FakeCallback(message, "form_10")
    await analyze_form_fixed(fake_callback, state)

@router.message(F.text == "üìà –ê–Ω–∞–ª–∏–∑ 20 –º–∞—Ç—á–µ–π")
async def handle_form_20_reply(message: Message):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã 20 –º–∞—Ç—á–µ–π"""
    from bot.handlers.form_analysis_handler import analyze_form_fixed
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.storage.memory import MemoryStorage
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    storage_memory = MemoryStorage()
    state = FSMContext(storage=storage_memory, key=message.bot.id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π FakeCallback –∫–ª–∞—Å—Å —Å –¥–∞–Ω–Ω—ã–º–∏
    fake_callback = FakeCallback(message, "form_20")
    await analyze_form_fixed(fake_callback, state)

@router.message(F.text == "üìã –ê–Ω–∞–ª–∏–∑ 50 –º–∞—Ç—á–µ–π")
async def handle_form_50_reply(message: Message):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã 50 –º–∞—Ç—á–µ–π"""
    from bot.handlers.form_analysis_handler import analyze_form_fixed
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.storage.memory import MemoryStorage
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    storage_memory = MemoryStorage()
    state = FSMContext(storage=storage_memory, key=message.bot.id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π FakeCallback –∫–ª–∞—Å—Å —Å –¥–∞–Ω–Ω—ã–º–∏
    fake_callback = FakeCallback(message, "form_50")
    await analyze_form_fixed(fake_callback, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤

def get_comparison_keyboard_with_count(user_data):
    """–ü–æ–ª—É—á–∏—Ç—å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    comparison_players = user_data.get('comparison_players', []) if isinstance(user_data, dict) else []
    players_count = len(comparison_players)
    show_comparison = players_count == 2
    return get_comparison_reply_keyboard(show_comparison, players_count)
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è")
async def handle_add_self_reply(message: Message, state: FSMContext):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–±—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    from bot.handlers.comparison_handler import format_comparison_menu_text
    from storage import storage
    from faceit_client import faceit_client
    
    try:
        user_id = str(message.from_user.id)
        state_data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ storage
        user_data = await storage.get_user(int(user_id))
        user_nickname = user_data.get('nickname') if user_data else None
        
        if not user_nickname:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
            return
        
        comparison_players = state_data.get('comparison_players', []) if isinstance(state_data, dict) else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
        if any(player['nickname'] == user_nickname for player in comparison_players):
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if len(comparison_players) >= 2:
            await message.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 2 –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
        loading_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...")
        
        player_profile = await faceit_client.get_player_full_profile(user_nickname)
        if not player_profile:
            await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å FACEIT!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        player_stats = player_profile.get('stats', {})
        
        # Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)
        print(f"[REPLY DEBUG] Adding self to comparison: {user_nickname}")
        print(f"[REPLY DEBUG] Profile keys: {list(player_profile.keys())}")
        print(f"[REPLY DEBUG] Stats: nickname={player_stats.get('nickname')}, level={player_stats.get('level')}, elo={player_stats.get('elo')}")
        print(f"[REPLY DEBUG] Full stats object: {player_stats}")
        
        comparison_players.append({
            'nickname': player_stats.get('nickname', user_nickname),
            'skill_level': player_stats.get('level', 0),
            'faceit_elo': player_stats.get('elo', 0),
            'profile_data': player_stats  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∫–∞–∫ –≤ comparison_handler
        })
        
        await state.update_data(comparison_players=comparison_players)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        updated_data = await state.get_data()
        text = await format_comparison_menu_text(updated_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å—Ç–æ–µ –º–µ–Ω—é –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await loading_msg.edit_text(
            text=text,
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await message.answer(
            "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!",
            reply_markup=get_comparison_keyboard_with_count(updated_data)
        )
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        print(f"Error adding self to comparison: {e}")

@router.message(F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞")
async def handle_add_player_reply(message: Message, state: FSMContext):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    from bot.handlers.comparison_handler import ComparisonStates
    
    try:
        user_data = await state.get_data()
        comparison_players = user_data.get('comparison_players', []) if isinstance(user_data, dict) else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if len(comparison_players) >= 2:
            await message.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 2 –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
            return
        
        await state.set_state(ComparisonStates.waiting_for_nickname)
        
        await message.answer(
            "üîç <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ FACEIT, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"Error in add player handler: {e}")

@router.message(F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
async def handle_clear_comparison_reply(message: Message, state: FSMContext):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    from bot.handlers.comparison_handler import format_comparison_menu_text
    
    try:
        await state.update_data(comparison_players=[])
        
        updated_data = await state.get_data()
        text = await format_comparison_menu_text(updated_data)
        
        await message.answer(
            text=text,
            reply_markup=get_comparison_keyboard_with_count(updated_data),
            parse_mode="HTML"
        )
        await message.answer("üóëÔ∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω!")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        print(f"Error clearing comparison: {e}")

@router.message(F.text == "üìä –°—Ä–∞–≤–Ω–∏—Ç—å!")
async def handle_compare_players_reply(message: Message, state: FSMContext):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤"""
    from bot.handlers.comparison_handler import get_player_comparison_stats, format_comparison_table
    
    try:
        user_data = await state.get_data()
        comparison_players = user_data.get('comparison_players', []) if isinstance(user_data, dict) else []
        
        if len(comparison_players) != 2:
            await message.answer("‚ö†Ô∏è –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 2 –∏–≥—Ä–æ–∫–æ–≤!")
            return
        
        await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        from bot.handlers.enhanced_comparison import format_enhanced_comparison
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        # profile_data —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ø–æ–ª—è 'stats'
        player1_stats = comparison_players[0]['profile_data']
        player2_stats = comparison_players[1]['profile_data']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        comparison_text = format_enhanced_comparison(player1_stats, player2_stats)
        
        await message.answer(
            text=comparison_text,
            parse_mode="HTML"
        )
        await message.answer(
            "üîÑ –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ?",
            reply_markup=get_comparison_keyboard_with_count(user_data)
        )
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤")
        print(f"Error comparing players: {e}")

async def analyze_session_stats_simple(session_matches, faceit_id: str):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏"""
    total_matches = len(session_matches)
    wins = 0
    losses = 0
    match_results = []
    
    total_kills = 0
    total_deaths = 0  
    total_assists = 0
    total_adr = 0
    total_rating = 0
    matches_with_stats = 0
    
    for match in session_matches:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
        player_won = faceit_client._determine_player_result(match, faceit_id)
        
        if player_won is True:
            wins += 1
            match_results.append("üèÜ")
        elif player_won is False:
            losses += 1
            match_results.append("‚ùå")
        else:
            match_results.append("‚ùì")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if 'stats' in match and match['stats']:
            stats = match['stats']
            # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            match_kills = int(stats.get('Kills', 0))
            match_deaths = int(stats.get('Deaths', 0))
            match_assists = int(stats.get('Assists', 0))
            match_adr = float(stats.get('ADR', 0))
            match_rating = float(stats.get('Player Rating', 0))
            
            total_kills += match_kills
            total_deaths += match_deaths
            total_assists += match_assists
            total_adr += match_adr
            total_rating += match_rating
            matches_with_stats += 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    winrate = (wins / total_matches * 100) if total_matches > 0 else 0
    
    if matches_with_stats > 0:
        avg_kills = total_kills / matches_with_stats
        avg_deaths = total_deaths / matches_with_stats  
        avg_assists = total_assists / matches_with_stats
        avg_adr = total_adr / matches_with_stats
        avg_rating = total_rating / matches_with_stats
        kd_ratio = (total_kills / total_deaths) if total_deaths > 0 else 0
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_kills = 16.0
        avg_deaths = 16.0
        avg_assists = 5.0
        avg_adr = 75.0
        avg_rating = 1.0
        kd_ratio = 1.0
    
    return {
        'total_matches': total_matches,
        'wins': wins,
        'losses': losses,
        'winrate': winrate,
        'kd_ratio': kd_ratio,
        'avg_kills': avg_kills,
        'avg_deaths': avg_deaths,
        'avg_assists': avg_assists,
        'avg_adr': avg_adr,
        'avg_rating': avg_rating,
        'match_results': match_results,
        'matches_with_stats': matches_with_stats
    }

async def analyze_session_stats_from_matches(session_matches, faceit_id: str):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π"""
    total_matches = len(session_matches)
    wins = 0
    losses = 0
    match_results = []
    
    # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_kills = 0
    total_deaths = 0
    total_assists = 0
    total_rounds = 0
    total_damage = 0  # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ ADR
    total_kast_rounds = 0
    total_first_kills = 0
    total_first_deaths = 0
    total_flash_assists = 0
    
    successful_matches = 0
    failed_matches = 0
    
    for match in session_matches:
        match_id = match.get('match_id')
        if not match_id:
            failed_matches += 1
            match_results.append("‚ùì")
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
        player_won = faceit_client._determine_player_result(match, faceit_id)
        
        if player_won is True:
            wins += 1
            match_results.append("üèÜ")
        elif player_won is False:
            losses += 1
            match_results.append("‚ùå")
        else:
            match_results.append("‚ùì")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∏–∑ –º–∞—Ç—á–∞
        try:
            player_match_stats = await faceit_client.get_player_stats_from_match(match_id, faceit_id)
            
            if player_match_stats:
                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                kills = player_match_stats.get('kills', 0)
                deaths = player_match_stats.get('deaths', 0)
                assists = player_match_stats.get('assists', 0)
                rounds = player_match_stats.get('rounds', 16)
                adr = player_match_stats.get('adr', 0.0)
                kast = player_match_stats.get('kast', 0.0)
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                if rounds <= 0 or rounds > 50:  # –ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
                    rounds = 16  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                
                if adr < 0 or adr > 200:  # –ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π ADR
                    adr = 0.0
                
                if kast < 0 or kast > 100:  # KAST –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
                    kast = 0.0
                
                total_kills += kills
                total_deaths += deaths 
                total_assists += assists
                total_rounds += rounds
                
                # ADR —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ADR * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
                total_damage += (adr * rounds)
                
                # KAST —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
                total_kast_rounds += (kast / 100.0 * rounds)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                total_first_kills += player_match_stats.get('first_kills', 0)
                total_first_deaths += player_match_stats.get('first_deaths', 0)
                total_flash_assists += player_match_stats.get('flash_assists', 0)
                
                successful_matches += 1
            else:
                failed_matches += 1
                logger.warning(f"No stats returned for match {match_id}")
                
        except asyncio.TimeoutError:
            failed_matches += 1
            logger.warning(f"Timeout getting stats for match {match_id}")
        except Exception as e:
            failed_matches += 1
            logger.error(f"Error processing match {match_id}: {e}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    winrate = (wins / total_matches * 100) if total_matches > 0 else 0
    
    if successful_matches > 0 and total_rounds > 0:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_kills = total_kills / successful_matches
        avg_deaths = total_deaths / successful_matches
        avg_assists = total_assists / successful_matches
        
        # K/D —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ–±—â–∏—Ö kills/deaths
        kd_ratio = total_kills / max(total_deaths, 1)
        
        # ADR - —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω –∑–∞ —Ä–∞—É–Ω–¥ –ø–æ –≤—Å–µ–º —Ä–∞—É–Ω–¥–∞–º
        avg_adr = total_damage / total_rounds if total_rounds > 0 else 0
        
        # KAST - –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—É–Ω–¥–æ–≤ —Å —É—á–∞—Å—Ç–∏–µ–º
        avg_kast = (total_kast_rounds / total_rounds * 100) if total_rounds > 0 else 0
        
        # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ - –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        
    elif successful_matches > 0:
        # –ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —á—Ç–æ –µ—Å—Ç—å, –Ω–æ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
        avg_kills = total_kills / successful_matches if successful_matches > 0 else 16.0
        avg_deaths = total_deaths / successful_matches if successful_matches > 0 else 16.0
        avg_assists = total_assists / successful_matches if successful_matches > 0 else 5.0
        kd_ratio = total_kills / max(total_deaths, 1) if total_deaths > 0 else 1.0
        avg_adr = 75.0  # Fallback –¥–ª—è ADR
        avg_kast = 70.0  # Fallback –¥–ª—è KAST
    else:
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        avg_kills = 16.0
        avg_deaths = 16.0
        avg_assists = 5.0
        avg_adr = 75.0
        avg_kast = 70.0
        kd_ratio = 1.0
    
    return {
        'total_matches': total_matches,
        'wins': wins,
        'losses': losses,
        'winrate': winrate,
        'kd_ratio': kd_ratio,
        'avg_kills': avg_kills,
        'avg_deaths': avg_deaths,
        'avg_assists': avg_assists,
        'avg_adr': avg_adr,
        'avg_kast': avg_kast,
        'match_results': match_results,
        'successful_matches': successful_matches,
        'failed_matches': failed_matches,
        'matches_with_stats': successful_matches
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π)
# Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìñ –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π"
@router.message(F.text == "üìñ –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π")
async def handle_functions_description_reply(message: Message):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    text = (
        "üìñ **–û–ü–ò–°–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ë–û–¢–ê**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞**\n"
        "‚îî –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ELO, K/D, ADR, —Ä–µ–π—Ç–∏–Ω–≥\n"
        "‚îî –ü–æ –∫–∞—Ä—Ç–∞–º: –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã\n"
        "‚îî –ó–∞ —Å–µ—Å—Å–∏—é: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –∏–≥—Ä—ã\n\n"
        "**üìù –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π**\n"
        "‚îî –ü—Ä–æ—Å–º–æ—Ç—Ä 5/10/30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π\n"
        "‚îî –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞\n"
        "‚îî –°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç—á–∏ –≤ FACEIT\n\n"
        "**‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤**\n"
        "‚îî –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ 2 –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚îî 15+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ üìàüìâ\n"
        "‚îî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö/—Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω\n\n"
        "**üìà –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã**\n"
        "‚îî –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ (5 vs 20 –º–∞—Ç—á–µ–π)\n"
        "‚îî –¢—Ä–µ–Ω–¥—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n"
        "‚îî –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ñ–æ—Ä–º—ã üî•‚ùÑÔ∏è\n\n"
        "**üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á**\n"
        "‚îî –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞\n"
        "‚îî –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö ELO\n"
        "‚îî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'"
    )
    
    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=get_help_reply_keyboard()
    )

# Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è"
@router.message(F.text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è")
async def handle_contact_reply(message: Message):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"""
    contact_text = (
        "üí¨ **–°–í–Ø–ó–ê–¢–¨–°–Ø –° –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–ú**\n\n"
        "üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @karriDD\n"
        "üì± **Telegram:** https://t.me/karriDD\n\n"
        "**üìù –ü–æ –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:**\n"
        "‚Ä¢ üêõ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
        "‚Ä¢ üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n"
        "‚Ä¢ ‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        "‚Ä¢ ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–∫–ª–∞–º–∞\n"
        "‚Ä¢ ‚ö° –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç—ã\n\n"
        "**‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:**\n"
        "‚Ä¢ –û–±—ã—á–Ω–æ: 1-2 —á–∞—Å–∞ (9:00-22:00 –ú–°–ö)\n"
        "‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–≥–∏: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ\n\n"
        "**üì¢ –ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:**\n"
        "‚Ä¢ –í–∞—à FACEIT –Ω–∏–∫–Ω–µ–π–º\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        f"‚Ä¢ –í–∞—à Telegram ID: `{message.from_user.id}`\n\n"
        "**üéÅ –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–ø–æ—Ä—Ç—ã:**\n"
        "‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥ = –º–µ—Å—è—Ü –ø—Ä–µ–º–∏—É–º–∞\n"
        "‚Ä¢ –ü–æ–ª–µ–∑–Ω–∞—è —Ñ–∏—á–∞ = 2 –Ω–µ–¥–µ–ª–∏ –ø—Ä–µ–º–∏—É–º–∞\n"
        "‚Ä¢ –ú–µ–ª–∫–∏–π –±–∞–≥ = –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ"
    )
    
    await message.answer(
        contact_text,
        parse_mode="Markdown",
        reply_markup=get_help_reply_keyboard()
    )

@router.message(StateFilter(None))
async def unknown_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    current_state = await state.get_state()
    logger.warning(f"üîç UNKNOWN MESSAGE –æ—Ç {user_id}: '{message.text}' (len={len(message.text or '')}) | FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    if await storage.get_user_faceit_id(user_id):
        await message.answer(
            "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
    else:
        await message.answer(
            "‚ùì –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )