from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, List, Any, Optional, Tuple
import re
import asyncio
from datetime import datetime

from keyboards import get_main_menu_keyboard, get_back_to_main_keyboard
from storage import storage
from faceit_client import faceit_client


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
router = Router(name="current_match_handler")


class CurrentMatchStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞"""
    waiting_for_match_link = State()


def get_current_match_keyboard() -> Dict:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üîó –í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á", callback_data="enter_match_link")
    builder.button(text="üìä –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="refresh_current_match")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    builder.adjust(1, 1, 2)
    return builder.as_markup()


def get_match_analysis_keyboard() -> Dict:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥", callback_data="detailed_team_analysis")
    builder.button(text="üó∫Ô∏è –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã", callback_data="detailed_map_analysis")
    builder.button(text="üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="enter_match_link")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    builder.adjust(2, 1, 1)
    return builder.as_markup()


def extract_match_id(url: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ—á—å match_id –∏–∑ —Å—Å—ã–ª–∫–∏ FACEIT
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - https://www.faceit.com/en/cs2/room/1-abc123-def456-ghi789
    - https://faceit.com/en/cs2/room/1-abc123-def456-ghi789
    - https://www.faceit.com/ru/cs2/room/1-abc123-def456-ghi789
    """
    patterns = [
        r'faceit\.com/[a-z]{2}/cs2/room/(1-[a-f0-9-]+)',
        r'faceit\.com/[a-z]{2}/csgo/room/(1-[a-f0-9-]+)',
        r'faceit\.com/.*room/([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})',
        r'faceit\.com.*/(1-[a-f0-9-]+)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url, re.IGNORECASE)
        if match:
            return match.group(1)
    
    return None


def calculate_team_strength(players_stats: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    """
    if not players_stats:
        return {
            'avg_hltv': 0.0,
            'avg_elo': 0,
            'avg_level': 0,
            'strong_players': [],
            'weak_players': [],
            'total_matches': 0,
            'avg_winrate': 0.0
        }
    
    hltv_ratings = []
    elos = []
    levels = []
    winrates = []
    total_matches = 0
    
    strong_players = []  # HLTV > 1.1
    weak_players = []    # HLTV < 0.9
    
    for player_stats in players_stats:
        hltv = player_stats.get('hltv_rating', 0.0)
        elo = player_stats.get('elo', 0)
        level = player_stats.get('level', 0)
        winrate = player_stats.get('winrate', 0.0)
        matches = player_stats.get('matches', 0)
        nickname = player_stats.get('nickname', 'Unknown')
        
        if hltv > 0:
            hltv_ratings.append(hltv)
            
            if hltv >= 1.1:
                strong_players.append({
                    'nickname': nickname,
                    'hltv': hltv,
                    'elo': elo,
                    'level': level
                })
            elif hltv < 0.9:
                weak_players.append({
                    'nickname': nickname,
                    'hltv': hltv,
                    'elo': elo,
                    'level': level
                })
        
        if elo > 0:
            elos.append(elo)
        if level > 0:
            levels.append(level)
        if winrate > 0:
            winrates.append(winrate)
        if matches > 0:
            total_matches += matches
    
    return {
        'avg_hltv': round(sum(hltv_ratings) / len(hltv_ratings), 3) if hltv_ratings else 0.0,
        'avg_elo': round(sum(elos) / len(elos)) if elos else 0,
        'avg_level': round(sum(levels) / len(levels), 1) if levels else 0,
        'avg_winrate': round(sum(winrates) / len(winrates), 1) if winrates else 0.0,
        'strong_players': sorted(strong_players, key=lambda x: x['hltv'], reverse=True),
        'weak_players': sorted(weak_players, key=lambda x: x['hltv']),
        'total_matches': total_matches,
        'player_count': len(players_stats)
    }


def analyze_map_performance(players_stats: List[Dict[str, Any]], map_name: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ
    """
    if not players_stats or not map_name:
        return {
            'avg_winrate': 0.0,
            'total_matches': 0,
            'players_with_data': 0,
            'best_player': None,
            'worst_player': None,
            'confidence_level': 'low'
        }
    
    map_performances = []
    total_matches = 0
    players_with_data = 0
    
    for player_stats in players_stats:
        maps_data = player_stats.get('maps', {})
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π)
        map_data = None
        for map_key, data in maps_data.items():
            if map_key.lower() == map_name.lower() or map_name.lower() in map_key.lower():
                map_data = data
                break
        
        if map_data and isinstance(map_data, dict):
            matches = map_data.get('matches', 0)
            winrate = map_data.get('winrate', 0.0)
            hltv = map_data.get('hltv_rating', 0.0)
            
            if matches > 0:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –æ–ø—ã—Ç–æ–º –Ω–∞ –∫–∞—Ä—Ç–µ
                map_performances.append({
                    'nickname': player_stats.get('nickname', 'Unknown'),
                    'winrate': winrate,
                    'matches': matches,
                    'hltv': hltv
                })
                total_matches += matches
                players_with_data += 1
    
    if not map_performances:
        return {
            'avg_winrate': 0.0,
            'total_matches': 0,
            'players_with_data': 0,
            'best_player': None,
            'worst_player': None,
            'confidence_level': 'none'
        }
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π)
    weighted_winrate = 0.0
    if total_matches > 0:
        for perf in map_performances:
            weight = perf['matches'] / total_matches
            weighted_winrate += perf['winrate'] * weight
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–µ–≥–æ –∏ —Ö—É–¥—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    best_player = max(map_performances, key=lambda x: (x['winrate'], x['hltv']))
    worst_player = min(map_performances, key=lambda x: (x['winrate'], x['hltv']))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞
    confidence_level = 'low'
    if players_with_data >= 4 and total_matches >= 50:
        confidence_level = 'high'
    elif players_with_data >= 3 and total_matches >= 25:
        confidence_level = 'medium'
    elif players_with_data >= 2 and total_matches >= 10:
        confidence_level = 'low'
    else:
        confidence_level = 'very_low'
    
    return {
        'avg_winrate': round(weighted_winrate, 1),
        'total_matches': total_matches,
        'players_with_data': players_with_data,
        'best_player': best_player,
        'worst_player': worst_player,
        'confidence_level': confidence_level,
        'all_performances': map_performances
    }


async def get_team_players_stats(team_data: Dict[str, Any]) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    """
    players_stats = []
    
    if not team_data or 'players' not in team_data:
        return players_stats
    
    for player in team_data['players']:
        player_id = player.get('player_id')
        nickname = player.get('nickname', 'Unknown')
        
        if not player_id:
            continue
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            player_details = await faceit_client.get_player_details(player_id)
            player_stats_data = await faceit_client.get_player_stats(player_id)
            
            if player_details and player_stats_data:
                formatted_stats = faceit_client.format_player_stats(player_details, player_stats_data)
                if formatted_stats:
                    players_stats.append(formatted_stats)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            await asyncio.sleep(0.2)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ {nickname}: {e}")
            continue
    
    return players_stats


async def analyze_current_match(match_id: str) -> Optional[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞
        match_details = await faceit_client.get_match_details(match_id)
        if not match_details:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        match_info = {
            'match_id': match_id,
            'status': match_details.get('status', 'unknown'),
            'game': match_details.get('game', 'cs2'),
            'region': match_details.get('region', 'unknown'),
            'competition_name': match_details.get('competition_name', 'Unknown'),
            'competition_type': match_details.get('competition_type', 'Unknown'),
            'best_of': match_details.get('best_of', 1),
            'configured_at': match_details.get('configured_at'),
            'started_at': match_details.get('started_at')
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        teams = match_details.get('teams', {})
        if len(teams) != 2:
            return None
        
        team_names = list(teams.keys())
        team1_data = teams[team_names[0]]
        team2_data = teams[team_names[1]]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ voting (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        voting = match_details.get('voting', {})
        current_map = None
        if voting and 'map' in voting and 'pick' in voting['map']:
            picks = voting['map']['pick']
            if picks:
                current_map = picks[0] if isinstance(picks, list) else picks
        
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ voting, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        if not current_map:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ results
            results = match_details.get('results', {})
            if results and 'stats' in results:
                current_map = results['stats'].get('map')
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ {match_id}")
        print(f"   –ö–æ–º–∞–Ω–¥—ã: {team_names[0]} vs {team_names[1]}")
        print(f"   –ö–∞—Ä—Ç–∞: {current_map or 'TBD'}")
        print(f"   –°—Ç–∞—Ç—É—Å: {match_info['status']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥...")
        team1_stats = await get_team_players_stats(team1_data)
        await asyncio.sleep(1)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        team2_stats = await get_team_players_stats(team2_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–ª—É –∫–æ–º–∞–Ω–¥
        team1_strength = calculate_team_strength(team1_stats)
        team2_strength = calculate_team_strength(team2_stats)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ (–µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞)
        map_analysis = {}
        if current_map:
            team1_map_perf = analyze_map_performance(team1_stats, current_map)
            team2_map_perf = analyze_map_performance(team2_stats, current_map)
            
            map_analysis = {
                'map_name': current_map,
                'team1_performance': team1_map_perf,
                'team2_performance': team2_map_perf,
                'winrate_diff': team1_map_perf['avg_winrate'] - team2_map_perf['avg_winrate']
            }
        
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        prediction = generate_match_prediction(team1_strength, team2_strength, map_analysis, team_names)
        
        analysis_result = {
            'match_info': match_info,
            'map_name': current_map,
            'teams': {
                team_names[0]: {
                    'name': team_names[0],
                    'players': team1_stats,
                    'strength': team1_strength
                },
                team_names[1]: {
                    'name': team_names[1],
                    'players': team2_stats,
                    'strength': team2_strength
                }
            },
            'map_analysis': map_analysis,
            'prediction': prediction,
            'analyzed_at': datetime.now().isoformat()
        }
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return analysis_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞: {e}")
        return None


def generate_match_prediction(team1_strength: Dict, team2_strength: Dict, 
                            map_analysis: Dict, team_names: List[str]) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–∞—Ä—Ç—ã
    """
    team1_name, team2_name = team_names
    
    # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –∫–æ–º–∞–Ω–¥
    hltv_diff = team1_strength['avg_hltv'] - team2_strength['avg_hltv']
    elo_diff = team1_strength['avg_elo'] - team2_strength['avg_elo']
    
    # –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    team1_advantages = []
    team2_advantages = []
    
    # –ê–Ω–∞–ª–∏–∑ HLTV —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    if abs(hltv_diff) > 0.1:
        if hltv_diff > 0:
            team1_advantages.append(f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –ø–æ HLTV (+{hltv_diff:.3f})")
        else:
            team2_advantages.append(f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –ø–æ HLTV (+{abs(hltv_diff):.3f})")
    
    # –ê–Ω–∞–ª–∏–∑ ELO
    if abs(elo_diff) > 50:
        if elo_diff > 0:
            team1_advantages.append(f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –ø–æ ELO (+{int(elo_diff)})")
        else:
            team2_advantages.append(f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –ø–æ ELO (+{int(abs(elo_diff))})")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    strong_diff = len(team1_strength['strong_players']) - len(team2_strength['strong_players'])
    if strong_diff > 0:
        team1_advantages.append(f"–ë–æ–ª—å—à–µ —Å–∏–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (+{strong_diff})")
    elif strong_diff < 0:
        team2_advantages.append(f"–ë–æ–ª—å—à–µ —Å–∏–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (+{abs(strong_diff)})")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    map_favorite = None
    if map_analysis and 'winrate_diff' in map_analysis:
        winrate_diff = map_analysis['winrate_diff']
        if abs(winrate_diff) > 5:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
            if winrate_diff > 0:
                team1_advantages.append(f"–õ—É—á—à–µ –∏–≥—Ä–∞–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ (+{winrate_diff:.1f}%)")
                map_favorite = team1_name
            else:
                team2_advantages.append(f"–õ—É—á—à–µ –∏–≥—Ä–∞–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ (+{abs(winrate_diff):.1f}%)")
                map_favorite = team2_name
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–≤–æ—Ä–∏—Ç–∞
    favorite = None
    confidence = "low"
    
    total_team1_score = len(team1_advantages)
    total_team2_score = len(team2_advantages)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è HLTV (–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å)
    if abs(hltv_diff) > 0.2:
        if hltv_diff > 0:
            total_team1_score += 2
        else:
            total_team2_score += 2
    
    if total_team1_score > total_team2_score:
        favorite = team1_name
        score_diff = total_team1_score - total_team2_score
    elif total_team2_score > total_team1_score:
        favorite = team2_name
        score_diff = total_team2_score - total_team1_score
    else:
        favorite = None
        score_diff = 0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if score_diff >= 4:
        confidence = "high"
    elif score_diff >= 2:
        confidence = "medium"
    else:
        confidence = "low"
    
    return {
        'favorite': favorite,
        'confidence': confidence,
        'hltv_difference': hltv_diff,
        'elo_difference': elo_diff,
        'map_favorite': map_favorite,
        'team1_advantages': team1_advantages,
        'team2_advantages': team2_advantages,
        'analysis_factors': {
            'strong_players_diff': strong_diff,
            'avg_hltv_diff': hltv_diff,
            'avg_elo_diff': elo_diff,
            'map_winrate_diff': map_analysis.get('winrate_diff', 0) if map_analysis else 0
        }
    }


def format_match_analysis(analysis: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not analysis:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞"
    
    match_info = analysis.get('match_info', {})
    teams = analysis.get('teams', {})
    prediction = analysis.get('prediction', {})
    map_analysis = analysis.get('map_analysis', {})
    
    team_names = list(teams.keys())
    if len(team_names) != 2:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã"
    
    team1_name = team_names[0]
    team2_name = team_names[1]
    team1_data = teams[team1_name]
    team2_data = teams[team2_name]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = "üîç **–ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –ú–ê–¢–ß–ê**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
    text += f"üéÆ **–ú–∞—Ç—á:** {team1_name} vs {team2_name}\n"
    if analysis.get('map_name'):
        text += f"üó∫Ô∏è **–ö–∞—Ä—Ç–∞:** {analysis['map_name']}\n"
    else:
        text += f"üó∫Ô∏è **–ö–∞—Ä—Ç–∞:** TBD\n"
    text += f"üèÜ **–¢—É—Ä–Ω–∏—Ä:** {match_info.get('competition_name', 'Unknown')}\n"
    text += f"üåç **–†–µ–≥–∏–æ–Ω:** {match_info.get('region', 'Unknown')}\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –∫–æ–º–∞–Ω–¥
    text += "‚öîÔ∏è **–ê–ù–ê–õ–ò–ó –ö–û–ú–ê–ù–î**\n\n"
    
    # –ö–æ–º–∞–Ω–¥–∞ 1
    team1_strength = team1_data.get('strength', {})
    text += f"üë• **{team1_name}**\n"
    text += f"‚îú –°—Ä–µ–¥–Ω–∏–π HLTV: **{team1_strength.get('avg_hltv', 0):.3f}**\n"
    text += f"‚îú –°—Ä–µ–¥–Ω–∏–π ELO: **{team1_strength.get('avg_elo', 0)}**\n"
    text += f"‚îú –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: **{team1_strength.get('avg_level', 0)}**\n"
    
    strong1 = team1_strength.get('strong_players', [])
    if strong1:
        text += f"‚îú –°–∏–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ ({len(strong1)}):\n"
        for player in strong1:
            text += f"‚îÇ  ‚Ä¢ {player['nickname']} (HLTV: {player['hltv']:.3f})\n"
    
    weak1 = team1_strength.get('weak_players', [])
    if weak1:
        text += f"‚îî –°–ª–∞–±—ã–µ –∏–≥—Ä–æ–∫–∏ ({len(weak1)}):\n"
        for player in weak1:
            text += f"   ‚Ä¢ {player['nickname']} (HLTV: {player['hltv']:.3f})\n"
    else:
        text += f"‚îî –°–ª–∞–±—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ\n"
    
    text += "\n"
    
    # –ö–æ–º–∞–Ω–¥–∞ 2
    team2_strength = team2_data.get('strength', {})
    text += f"üë• **{team2_name}**\n"
    text += f"‚îú –°—Ä–µ–¥–Ω–∏–π HLTV: **{team2_strength.get('avg_hltv', 0):.3f}**\n"
    text += f"‚îú –°—Ä–µ–¥–Ω–∏–π ELO: **{team2_strength.get('avg_elo', 0)}**\n"
    text += f"‚îú –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: **{team2_strength.get('avg_level', 0)}**\n"
    
    strong2 = team2_strength.get('strong_players', [])
    if strong2:
        text += f"‚îú –°–∏–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ ({len(strong2)}):\n"
        for player in strong2:
            text += f"‚îÇ  ‚Ä¢ {player['nickname']} (HLTV: {player['hltv']:.3f})\n"
    
    weak2 = team2_strength.get('weak_players', [])
    if weak2:
        text += f"‚îî –°–ª–∞–±—ã–µ –∏–≥—Ä–æ–∫–∏ ({len(weak2)}):\n"
        for player in weak2:
            text += f"   ‚Ä¢ {player['nickname']} (HLTV: {player['hltv']:.3f})\n"
    else:
        text += f"‚îî –°–ª–∞–±—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ\n"
    
    text += "\n"
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if map_analysis and map_analysis.get('map_name'):
        text += f"üó∫Ô∏è **–ê–ù–ê–õ–ò–ó –ö–ê–†–¢–´: {map_analysis['map_name']}**\n\n"
        
        team1_map = map_analysis.get('team1_performance', {})
        team2_map = map_analysis.get('team2_performance', {})
        
        text += f"üìä **{team1_name}** –Ω–∞ –∫–∞—Ä—Ç–µ:\n"
        text += f"‚îú –í–∏–Ω—Ä–µ–π—Ç: **{team1_map.get('avg_winrate', 0):.1f}%**\n"
        text += f"‚îú –ú–∞—Ç—á–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ: {team1_map.get('total_matches', 0)}\n"
        text += f"‚îî –ò–≥—Ä–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {team1_map.get('players_with_data', 0)}/5\n\n"
        
        text += f"üìä **{team2_name}** –Ω–∞ –∫–∞—Ä—Ç–µ:\n"
        text += f"‚îú –í–∏–Ω—Ä–µ–π—Ç: **{team2_map.get('avg_winrate', 0):.1f}%**\n"
        text += f"‚îú –ú–∞—Ç—á–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ: {team2_map.get('total_matches', 0)}\n"
        text += f"‚îî –ò–≥—Ä–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {team2_map.get('players_with_data', 0)}/5\n\n"
        
        winrate_diff = map_analysis.get('winrate_diff', 0)
        if abs(winrate_diff) > 3:
            better_team = team1_name if winrate_diff > 0 else team2_name
            text += f"üéØ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –∫–∞—Ä—Ç–µ:** {better_team} (+{abs(winrate_diff):.1f}%)\n\n"
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    text += "üéØ **–ü–†–û–ì–ù–û–ó**\n\n"
    
    favorite = prediction.get('favorite')
    confidence = prediction.get('confidence', 'low')
    
    if favorite:
        confidence_emoji = {"high": "üü¢", "medium": "üü°", "low": "üü†"}.get(confidence, "üü†")
        confidence_text = {"high": "–í—ã—Å–æ–∫–∞—è", "medium": "–°—Ä–µ–¥–Ω—è—è", "low": "–ù–∏–∑–∫–∞—è"}.get(confidence, "–ù–∏–∑–∫–∞—è")
        
        text += f"üèÜ **–§–∞–≤–æ—Ä–∏—Ç:** {favorite}\n"
        text += f"{confidence_emoji} **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence_text}\n\n"
        
        # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∞
        if favorite == team1_name and prediction.get('team1_advantages'):
            text += f"üìà **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {favorite}:**\n"
            for adv in prediction['team1_advantages']:
                text += f"‚Ä¢ {adv}\n"
        elif favorite == team2_name and prediction.get('team2_advantages'):
            text += f"üìà **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {favorite}:**\n"
            for adv in prediction['team2_advantages']:
                text += f"‚Ä¢ {adv}\n"
    else:
        text += "‚öñÔ∏è **–ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã –ø–æ —Å–∏–ª–µ**\n"
        text += "üé≤ –ò—Å—Ö–æ–¥ –º–∞—Ç—á–∞ —Ç—Ä—É–¥–Ω–æ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º\n"
    
    text += f"\nüïê –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {datetime.fromisoformat(analysis['analyzed_at']).strftime('%H:%M:%S')}"
    
    return text


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====

@router.callback_query(F.data == "current_match_analysis")
async def show_current_match_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    user_id = callback.from_user.id
    saved_analysis = await storage.get_cached_data(f"current_match_analysis_{user_id}")
    
    if saved_analysis:
        text = "üîç **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞**\n\n"
        text += "–£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞.\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="show_saved_analysis")
        builder.button(text="üîó –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="enter_match_link")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard = builder.as_markup()
    else:
        text = "üîç **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞**\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.\n\n"
        text += "üìä **–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:**\n"
        text += "‚Ä¢ –°–∏–ª–∞ –∫–æ–º–∞–Ω–¥ (—Å—Ä–µ–¥–Ω–∏–π HLTV, ELO)\n"
        text += "‚Ä¢ –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ –∏–≥—Ä–æ–∫–∏\n"
        text += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∫–∞—Ä—Ç–µ\n"
        text += "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = get_current_match_keyboard()
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "show_saved_analysis")
async def show_saved_analysis(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞"""
    user_id = callback.from_user.id
    saved_analysis = await storage.get_cached_data(f"current_match_analysis_{user_id}")
    
    if saved_analysis:
        text = format_match_analysis(saved_analysis)
        keyboard = get_match_analysis_keyboard()
    else:
        text = "‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        keyboard = get_current_match_keyboard()
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "enter_match_link")
async def enter_match_link(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç—á"""
    text = "üîó **–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç—á**\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT.\n\n"
    text += "üìù **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
    text += "‚Ä¢ https://www.faceit.com/en/cs2/room/1-abc123-def456\n"
    text += "‚Ä¢ https://faceit.com/ru/cs2/room/1-abc123-def456\n\n"
    text += "‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã –∏–∑-–∑–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤."
    
    keyboard = get_back_to_main_keyboard()
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(CurrentMatchStates.waiting_for_match_link)
    await callback.answer()


@router.message(StateFilter(CurrentMatchStates.waiting_for_match_link))
async def process_match_link(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
    match_url = message.text.strip()
    user_id = message.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º match_id –∏–∑ —Å—Å—ã–ª–∫–∏
    match_id = extract_match_id(match_url)
    
    if not match_id:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –º–∞—Ç—á–∞ –∏–∑ —Å—Å—ã–ª–∫–∏.\n\n"
            "üìù **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ https://www.faceit.com/en/cs2/room/1-abc123-def456\n"
            "‚Ä¢ https://faceit.com/ru/cs2/room/1-abc123-def456\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    analyzing_msg = await message.answer(
        "üîÑ **–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞...**\n\n"
        "‚è±Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤\n"
        "üìä –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã",
        parse_mode="Markdown"
    )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    try:
        analysis_result = await analyze_current_match(match_id)
        
        if analysis_result:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∫—ç—à
            await storage.set_cached_data(
                f"current_match_analysis_{user_id}", 
                analysis_result, 
                ttl_minutes=30
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text = format_match_analysis(analysis_result)
            keyboard = get_match_analysis_keyboard()
            
            await analyzing_msg.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            
        else:
            await analyzing_msg.edit_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑**\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "‚Ä¢ –û—à–∏–±–∫–∞ API FACEIT\n"
                "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–∞—Ç—á.",
                reply_markup=get_current_match_keyboard(),
                parse_mode="Markdown"
            )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞: {e}")
        await analyzing_msg.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–∞**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            reply_markup=get_current_match_keyboard(),
            parse_mode="Markdown"
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data == "detailed_team_analysis")
async def detailed_team_analysis(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥"""
    user_id = callback.from_user.id
    saved_analysis = await storage.get_cached_data(f"current_match_analysis_{user_id}")
    
    if not saved_analysis:
        await callback.message.edit_text(
            "‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=get_current_match_keyboard()
        )
        await callback.answer()
        return
    
    teams = saved_analysis.get('teams', {})
    if len(teams) != 2:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            reply_markup=get_current_match_keyboard()
        )
        await callback.answer()
        return
    
    team_names = list(teams.keys())
    team1_name, team2_name = team_names
    team1_data = teams[team1_name]
    team2_data = teams[team2_name]
    
    text = "üìä **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ú–ê–ù–î**\n\n"
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
    for team_name, team_data in [(team1_name, team1_data), (team2_name, team2_data)]:
        text += f"üë• **{team_name}**\n\n"
        
        players = team_data.get('players', [])
        strength = team_data.get('strength', {})
        
        text += f"üìà **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π HLTV: **{strength.get('avg_hltv', 0):.3f}**\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π ELO: **{strength.get('avg_elo', 0)}**\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: **{strength.get('avg_level', 0)}**\n"
        text += f"‚Ä¢ –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: **{strength.get('avg_winrate', 0):.1f}%**\n\n"
        
        text += f"üë• **–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã:**\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ HLTV —Ä–µ–π—Ç–∏–Ω–≥—É
        sorted_players = sorted(players, key=lambda p: p.get('hltv_rating', 0), reverse=True)
        
        for i, player in enumerate(sorted_players, 1):
            nickname = player.get('nickname', 'Unknown')
            hltv = player.get('hltv_rating', 0)
            elo = player.get('elo', 0)
            level = player.get('level', 0)
            winrate = player.get('winrate', 0)
            kd = player.get('kd_ratio', 0)
            adr = player.get('adr', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä–æ–∫–∞
            if hltv >= 1.1:
                category = "üî•"
            elif hltv >= 1.0:
                category = "‚≠ê"
            elif hltv >= 0.9:
                category = "‚úÖ"
            else:
                category = "‚ö†Ô∏è"
            
            text += f"{category} **{nickname}**\n"
            text += f"   HLTV: {hltv:.3f} | K/D: {kd:.2f} | ADR: {adr:.1f}\n"
            text += f"   ELO: {elo} | LVL: {level} | WR: {winrate:.1f}%\n\n"
        
        text += "‚ïê" * 30 + "\n\n"
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    text += "‚öîÔ∏è **–°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó**\n\n"
    
    team1_strength = team1_data.get('strength', {})
    team2_strength = team2_data.get('strength', {})
    
    hltv_diff = team1_strength.get('avg_hltv', 0) - team2_strength.get('avg_hltv', 0)
    elo_diff = team1_strength.get('avg_elo', 0) - team2_strength.get('avg_elo', 0)
    
    if hltv_diff > 0:
        text += f"üìà **{team1_name}** —Å–∏–ª—å–Ω–µ–µ –ø–æ HLTV –Ω–∞ **{hltv_diff:.3f}**\n"
    elif hltv_diff < 0:
        text += f"üìà **{team2_name}** —Å–∏–ª—å–Ω–µ–µ –ø–æ HLTV –Ω–∞ **{abs(hltv_diff):.3f}**\n"
    else:
        text += f"‚öñÔ∏è –ö–æ–º–∞–Ω–¥—ã —Ä–∞–≤–Ω—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É HLTV\n"
    
    if abs(elo_diff) > 10:
        if elo_diff > 0:
            text += f"üèÜ **{team1_name}** –≤—ã—à–µ –ø–æ ELO –Ω–∞ **{int(elo_diff)}**\n"
        else:
            text += f"üèÜ **{team2_name}** –≤—ã—à–µ –ø–æ ELO –Ω–∞ **{int(abs(elo_diff))}**\n"
    
    strong1 = len(team1_strength.get('strong_players', []))
    strong2 = len(team2_strength.get('strong_players', []))
    
    text += f"\nüî• –°–∏–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: **{team1_name}** {strong1} vs {strong2} **{team2_name}**\n"
    
    keyboard = get_match_analysis_keyboard()
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "detailed_map_analysis")
async def detailed_map_analysis(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã"""
    user_id = callback.from_user.id
    saved_analysis = await storage.get_cached_data(f"current_match_analysis_{user_id}")
    
    if not saved_analysis:
        await callback.message.edit_text(
            "‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=get_current_match_keyboard()
        )
        await callback.answer()
        return
    
    map_analysis = saved_analysis.get('map_analysis', {})
    if not map_analysis or not map_analysis.get('map_name'):
        await callback.message.edit_text(
            "‚ùå **–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
            "–ö–∞—Ä—Ç–∞ –º–∞—Ç—á–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –º–∞—Ç—á –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è –∏–ª–∏ –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–∑–∂–µ.",
            reply_markup=get_match_analysis_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    map_name = map_analysis['map_name']
    team1_perf = map_analysis.get('team1_performance', {})
    team2_perf = map_analysis.get('team2_performance', {})
    
    teams = saved_analysis.get('teams', {})
    team_names = list(teams.keys())
    team1_name, team2_name = team_names
    
    text = f"üó∫Ô∏è **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–†–¢–´: {map_name}**\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–∞—Ä—Ç–µ
    text += f"üìä **{team1_name} –Ω–∞ {map_name}:**\n"
    text += f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: **{team1_perf.get('avg_winrate', 0):.1f}%**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {team1_perf.get('total_matches', 0)}\n"
    text += f"‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {team1_perf.get('players_with_data', 0)}/5\n"
    
    confidence1 = team1_perf.get('confidence_level', 'none')
    confidence_text1 = {
        'high': 'üü¢ –í—ã—Å–æ–∫–∞—è',
        'medium': 'üü° –°—Ä–µ–¥–Ω—è—è', 
        'low': 'üü† –ù–∏–∑–∫–∞—è',
        'very_low': 'üî¥ –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è',
        'none': '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    }.get(confidence1, '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    
    text += f"‚Ä¢ –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {confidence_text1}\n\n"
    
    # –õ—É—á—à–∏–π –∏–≥—Ä–æ–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–∞—Ä—Ç–µ
    best1 = team1_perf.get('best_player')
    if best1:
        text += f"üåü **–õ—É—á—à–∏–π –∏–≥—Ä–æ–∫:** {best1['nickname']}\n"
        text += f"   –í–∏–Ω—Ä–µ–π—Ç: {best1['winrate']:.1f}% ({best1['matches']} –º–∞—Ç—á–µ–π)\n"
        text += f"   HLTV –Ω–∞ –∫–∞—Ä—Ç–µ: {best1.get('hltv', 0):.3f}\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–∞—Ä—Ç–µ
    text += f"üìä **{team2_name} –Ω–∞ {map_name}:**\n"
    text += f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: **{team2_perf.get('avg_winrate', 0):.1f}%**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {team2_perf.get('total_matches', 0)}\n"
    text += f"‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {team2_perf.get('players_with_data', 0)}/5\n"
    
    confidence2 = team2_perf.get('confidence_level', 'none')
    confidence_text2 = {
        'high': 'üü¢ –í—ã—Å–æ–∫–∞—è',
        'medium': 'üü° –°—Ä–µ–¥–Ω—è—è',
        'low': 'üü† –ù–∏–∑–∫–∞—è', 
        'very_low': 'üî¥ –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è',
        'none': '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    }.get(confidence2, '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    
    text += f"‚Ä¢ –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {confidence_text2}\n\n"
    
    # –õ—É—á—à–∏–π –∏–≥—Ä–æ–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–∞—Ä—Ç–µ
    best2 = team2_perf.get('best_player')
    if best2:
        text += f"üåü **–õ—É—á—à–∏–π –∏–≥—Ä–æ–∫:** {best2['nickname']}\n"
        text += f"   –í–∏–Ω—Ä–µ–π—Ç: {best2['winrate']:.1f}% ({best2['matches']} –º–∞—Ç—á–µ–π)\n"
        text += f"   HLTV –Ω–∞ –∫–∞—Ä—Ç–µ: {best2.get('hltv', 0):.3f}\n\n"
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    text += "‚öîÔ∏è **–°–†–ê–í–ù–ï–ù–ò–ï –ù–ê –ö–ê–†–¢–ï**\n\n"
    
    winrate_diff = map_analysis.get('winrate_diff', 0)
    if abs(winrate_diff) > 3:
        better_team = team1_name if winrate_diff > 0 else team2_name
        worse_team = team2_name if winrate_diff > 0 else team1_name
        text += f"üéØ **{better_team}** –∏–º–µ–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –∫–∞—Ä—Ç–µ\n"
        text += f"   –†–∞–∑–Ω–∏—Ü–∞ –≤ –≤–∏–Ω—Ä–µ–π—Ç–µ: **+{abs(winrate_diff):.1f}%**\n\n"
        
        if abs(winrate_diff) > 10:
            text += "üî• **–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ!**\n"
        elif abs(winrate_diff) > 5:
            text += "‚≠ê **–ó–∞–º–µ—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ**\n"
        else:
            text += "‚úÖ **–ù–µ–±–æ–ª—å—à–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ**\n"
    else:
        text += "‚öñÔ∏è **–ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã –Ω–∞ –¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ**\n"
        text += f"–†–∞–∑–Ω–∏—Ü–∞ –≤ –≤–∏–Ω—Ä–µ–π—Ç–µ: {winrate_diff:+.1f}%\n"
    
    text += "\nüìù **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–∞–º:**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
    for team_name, team_perf in [(team1_name, team1_perf), (team2_name, team2_perf)]:
        performances = team_perf.get('all_performances', [])
        if performances:
            text += f"üèÜ **{team_name}** - —Ç–æ–ø –Ω–∞ –∫–∞—Ä—Ç–µ:\n"
            sorted_perfs = sorted(performances, key=lambda x: (x['winrate'], x['hltv']), reverse=True)
            for i, perf in enumerate(sorted_perfs[:3], 1):
                text += f"{i}. {perf['nickname']}: {perf['winrate']:.1f}% ({perf['matches']}–º)\n"
            text += "\n"
    
    keyboard = get_match_analysis_keyboard()
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "refresh_current_match")
async def refresh_current_match(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞"""
    user_id = callback.from_user.id
    saved_analysis = await storage.get_cached_data(f"current_match_analysis_{user_id}")
    
    if not saved_analysis:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á.",
            reply_markup=get_current_match_keyboard()
        )
        await callback.answer()
        return
    
    match_id = saved_analysis.get('match_info', {}).get('match_id')
    if not match_id:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –º–∞—Ç—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
            reply_markup=get_current_match_keyboard()
        )
        await callback.answer()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    await callback.message.edit_text(
        "üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞...**\n\n"
        "‚è±Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        parse_mode="Markdown"
    )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        analysis_result = await analyze_current_match(match_id)
        
        if analysis_result:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            await storage.set_cached_data(
                f"current_match_analysis_{user_id}",
                analysis_result,
                ttl_minutes=30
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text = format_match_analysis(analysis_result)
            keyboard = get_match_analysis_keyboard()
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await callback.message.edit_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑**\n\n"
                "–ú–∞—Ç—á –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                reply_markup=get_current_match_keyboard(),
                parse_mode="Markdown"
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_current_match_keyboard(),
            parse_mode="Markdown"
        )
    
    await callback.answer()


@router.callback_query(F.data.in_(["main_menu", "back_to_main"]))
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    
    user_id = callback.from_user.id
    user_data = await storage.get_user(user_id)
    
    text = "üéÆ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()