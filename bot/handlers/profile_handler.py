from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards import get_profile_keyboard, get_main_menu_keyboard
from storage import storage
from faceit_client import faceit_client
import logging

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
router = Router(name="profile_handler")

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è
class ProfileStates(StatesGroup):
    waiting_for_new_nickname = State()

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        user_data = await storage.get_user(user_id)
        
        if not user_data:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start", show_alert=True)
            return
        
        faceit_id = user_data.get('faceit_id')
        nickname = user_data.get('nickname')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä–æ–∫–∞ —Å FACEIT
        player_details = None
        try:
            player_details = await faceit_client.get_player_details(faceit_id)
        except Exception as e:
            logger.error(f"Error getting player details for {faceit_id}: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        if player_details:
            games = player_details.get('games', {})
            cs2_data = games.get('cs2', {})
            elo = cs2_data.get('faceit_elo', 0)
            level = cs2_data.get('skill_level', 0)
            region = player_details.get('country', 'Unknown')
            avatar = player_details.get('avatar', '')
        else:
            elo = 0
            level = 0
            region = 'Unknown'
            avatar = ''
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        settings = await storage.get_user_settings(user_id) or {}
        notifications = "–í–∫–ª—é—á–µ–Ω—ã ‚úÖ" if settings.get('notifications', True) else "–í—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
        subscription_type = settings.get('subscription_type', 'standard')
        subscription_text = "–ü—Ä–µ–º–∏—É–º ‚≠ê" if subscription_type == 'premium' else "–°—Ç–∞–Ω–¥–∞—Ä—Ç üì¶"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        created_at = user_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if created_at and created_at != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π ISO, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
                from datetime import datetime
                if isinstance(created_at, str):
                    created_dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    created_at = created_dt.strftime('%d.%m.%Y %H:%M')
                else:
                    created_at = str(created_at)[:19]
            except:
                created_at = str(created_at)
        
        last_activity = user_data.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if last_activity and last_activity != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            try:
                if isinstance(last_activity, str):
                    activity_dt = datetime.fromisoformat(last_activity.replace('Z', '+00:00'))
                    last_activity = activity_dt.strftime('%d.%m.%Y %H:%M')
                else:
                    last_activity = str(last_activity)[:19]
            except:
                last_activity = str(last_activity)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üéÆ **FACEIT –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ù–∏–∫–Ω–µ–π–º: {nickname}
‚Ä¢ ID: `{faceit_id}`
‚Ä¢ ELO: {elo} (–£—Ä–æ–≤–µ–Ω—å {level})
‚Ä¢ –†–µ–≥–∏–æ–Ω: {region}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:**
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_text}

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:**
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º.
"""
        
        await callback.message.edit_text(
            profile_text,
            parse_mode="Markdown",
            reply_markup=get_profile_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing profile for user {user_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)

@router.callback_query(F.data == "change_profile")
async def request_new_nickname(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        await callback.message.edit_text(
            "üîÑ **–°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º FACEIT –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:\n\n"
            "üí° *–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∏–∫–Ω–µ–π–º –Ω–∞–ø–∏—Å–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ*"
        )
        await state.set_state(ProfileStates.waiting_for_new_nickname)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error requesting new nickname: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(ProfileStates.waiting_for_new_nickname)
async def process_new_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è"""
    nickname = message.text.strip()
    user_id = message.from_user.id
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
        if len(nickname) < 2:
            await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if len(nickname) > 30:
            await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if not nickname.replace('_', '').replace('-', '').isalnum():
            await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        search_msg = await message.answer("üîç –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ FACEIT...")
        
        # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤ FACEIT API
        player_data = await faceit_client.find_player_by_nickname(nickname)
        
        if not player_data:
            await search_msg.edit_text(
                f"‚ùå –ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ FACEIT.\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º FACEIT ID –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        faceit_id = player_data.get('player_id')
        if not faceit_id:
            await search_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await storage.save_user(user_id, faceit_id, nickname)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Å–º–µ–Ω—ã
        success_text = f"""
‚úÖ **–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!**

üéÆ **–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –ù–∏–∫–Ω–µ–π–º: {nickname}
‚Ä¢ FACEIT ID: `{faceit_id}`

–¢–µ–ø–µ—Ä—å –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
"""
        
        await search_msg.edit_text(
            success_text,
            parse_mode="Markdown",
            reply_markup=get_main_menu_keyboard()
        )
        
        logger.info(f"User {user_id} changed profile to {nickname} ({faceit_id})")
        
    except Exception as e:
        logger.error(f"Error processing new nickname for user {user_id}: {e}")
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è FSM)
@router.callback_query(ProfileStates.waiting_for_new_nickname)
async def cancel_profile_change(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
    from aiogram.types import CallbackQuery
    fake_callback = CallbackQuery(
        id=callback.id,
        from_user=callback.from_user,
        chat_instance=callback.chat_instance,
        message=callback.message,
        data="profile"
    )
    await show_profile(fake_callback)