from aiogram import Router, F
from aiogram.types import CallbackQuery
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Optional, Any

from keyboards import get_stats_keyboard, get_main_menu_keyboard, get_stats_reply_keyboard, get_main_reply_keyboard
from storage import storage
from faceit_client import faceit_client

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
router = Router(name="stats_handler")

# –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
@router.callback_query(F.data == "player_stats")
async def show_stats_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_stats_keyboard()
    )
    await callback.answer()

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "stats_overall")
async def show_overall_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è async –º–µ—Ç–æ–¥–∞ storage
        faceit_id = await storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        player_details = await faceit_client.get_player_details(faceit_id)
        stats_data = await faceit_client.get_player_stats(faceit_id)
        
        if not stats_data or not player_details:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_stats_keyboard()
            )
            await callback.answer()
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ faceit_client
        formatted_stats = faceit_client.format_player_stats(player_details, stats_data)
        
        if not formatted_stats:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                reply_markup=get_stats_keyboard()
            )
            await callback.answer()
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await storage.get_user(user_id)
        nickname = user_data.get('nickname', 'Unknown') if user_data else 'Unknown'
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º await - calculate_player_rating —ç—Ç–æ sync –º–µ—Ç–æ–¥
        # –î–∞–Ω–Ω—ã–µ —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤ format_player_stats
        hltv_rating = formatted_stats.get('hltv_rating', 0.0)
        
        # –ü–æ–ª—É—á–∞–µ–º ELO –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        current_elo = formatted_stats.get('elo', 0)
        current_level = formatted_stats.get('level', 0)
        elo_to_next_level = max(0, (current_level + 1) * 100 - current_elo) if current_level < 10 else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
        stats_message = f"""
üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞**

üë§ **–ò–≥—Ä–æ–∫:** {nickname}
üéÆ **–£—Ä–æ–≤–µ–Ω—å:** {current_level} | **ELO:** {current_elo}
‚¨ÜÔ∏è **–î–æ —Å–ª–µ–¥. —É—Ä–æ–≤–Ω—è:** {elo_to_next_level if elo_to_next_level > 0 else '–ú–∞–∫—Å–∏–º—É–º'}
‚≠ê **–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞:** {hltv_rating:.3f}
üåç **–†–µ–≥–∏–æ–Ω:** {formatted_stats.get('region', 'N/A')}
‚úÖ **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:** {'–î–∞' if formatted_stats.get('verified', False) else '–ù–µ—Ç'}

üìà **–ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ **–ö–∞—Ä—Ç —Å—ã–≥—Ä–∞–Ω–æ:** {formatted_stats.get('matches', 0)}
‚Ä¢ **–ü–æ–±–µ–¥:** {formatted_stats.get('wins', 0)} ({formatted_stats.get('winrate', 0):.1f}%)
‚Ä¢ **–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:** {formatted_stats.get('longest_win_streak', 0)} –ø–æ–±–µ–¥

‚öîÔ∏è **–£–±–∏–π—Å—Ç–≤–∞ –∏ —Å–º–µ—Ä—Ç–∏:**
‚Ä¢ **–°—Ä–µ–¥–Ω–∏–π K/D:** {formatted_stats.get('average_kd', 0):.3f}
‚Ä¢ **–û–±—â–∏–π K/D:** {formatted_stats.get('kd_ratio', 0):.3f} 
‚Ä¢ **–ö–∏–ª–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥:** {formatted_stats.get('kpr', 0):.3f}
‚Ä¢ **–•–µ–¥—à–æ—Ç–æ–≤:** {formatted_stats.get('headshots_avg', 0):.1f}%

üí• **–£—Ä–æ–Ω:**
‚Ä¢ **ADR:** {formatted_stats.get('adr', 0):.1f}

_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}_
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await callback.message.edit_text(
            stats_message,
            parse_mode="Markdown",
            reply_markup=get_stats_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in show_overall_stats for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_stats_keyboard()
        )
        await callback.answer()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º
@router.callback_query(F.data == "stats_maps")
async def show_maps_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞–º —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è async –º–µ—Ç–æ–¥–∞
        faceit_id = await storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!", show_alert=True)
            return
        
        await callback.message.edit_text("üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        player_details = await faceit_client.get_player_details(faceit_id)
        stats_data = await faceit_client.get_player_stats(faceit_id)
        
        if not stats_data or not player_details:
            await callback.message.edit_text(
                "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=get_stats_keyboard()
            )
            await callback.answer()
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted_stats = faceit_client.format_player_stats(player_details, stats_data)
        maps_stats = formatted_stats.get('maps', {})
        
        if not maps_stats:
            await callback.message.edit_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ä—Ç–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–æ–∫ –Ω–µ –∏–≥—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π.",
                reply_markup=get_stats_keyboard()
            )
            await callback.answer()
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π
        sorted_maps = sorted(
            maps_stats.items(), 
            key=lambda x: x[1].get('matches', 0), 
            reverse=True
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        message = "üó∫Ô∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º**\n\n"
        
        for i, (map_name, map_data) in enumerate(sorted_maps[:7], 1):  # –¢–æ–ø-7 –∫–∞—Ä—Ç
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
            matches = map_data.get('matches', 0)
            wins = map_data.get('wins', 0)
            winrate = map_data.get('winrate', 0)
            kd_ratio = map_data.get('kd_ratio', 0)
            adr = map_data.get('adr', 0)
            kast = map_data.get('kast', 0)
            hltv_rating = map_data.get('hltv_rating', 0)
            headshots = map_data.get('headshots', 0)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
            if matches == 0:
                continue
                
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ä—Ç
            map_emojis = {
                'de_mirage': 'üåã', 'de_inferno': 'üè≠', 'de_dust2': 'üå™Ô∏è',
                'de_train': 'üöÇ', 'de_cache': 'üè∞', 'de_overpass': 'üåä',
                'de_nuke': 'üåå', 'de_vertigo': 'üèîÔ∏è', 'de_ancient': 'üåø'
            }
            
            map_emoji = ""
            for key, emoji in map_emojis.items():
                if key.lower() in map_name.lower() or map_name.lower() in key.lower():
                    map_emoji = emoji
                    break
            
            message += f"**{map_emoji} {i}. {map_name}**\n"
            message += f"üìä –ú–∞—Ç—á–µ–π: **{matches}** (üèÜ{wins})\n"
            message += f"üìà Winrate: **{winrate:.1f}%**\n"
            message += f"‚öîÔ∏è K/D: **{kd_ratio:.3f}**\n"
            message += f"üí• ADR: **{adr:.1f}**\n"
            message += f"üéØ KAST: **{kast:.1f}%**\n"
            message += f"üéß HS%: **{headshots:.1f}%**\n"
            message += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: **{hltv_rating:.2f}**\n\n"
        
        if len(message.split('\n')) <= 3:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            message += "_–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º._"
        else:
            message += f"_–ü–æ–∫–∞–∑–∞–Ω–æ –∫–∞—Ä—Ç: {min(len(sorted_maps), 7)} –∏–∑ {len(sorted_maps)}_"
        
        await callback.message.edit_text(
            message,
            parse_mode="Markdown",
            reply_markup=get_stats_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in show_maps_stats for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_stats_keyboard()
        )
        await callback.answer()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ—Å—Å–∏—é
@router.callback_query(F.data == "stats_session")
async def show_session_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
    user_id = callback.from_user.id
    
    try:
        faceit_id = await storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!", show_alert=True)
            return
        
        await callback.message.edit_text("‚è∞ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Å—Å–∏–π
        history_data = await faceit_client.get_player_history(faceit_id, limit=100)
        
        if not history_data or 'items' not in history_data:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö",
                reply_markup=get_stats_keyboard()
            )
            await callback.answer()
            return
        
        matches = history_data['items']
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –≤ —Å–µ—Å—Å–∏–∏ (–ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤ = –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)
        sessions = []
        current_session = []
        
        for match in matches:
            finished_at = match.get('finished_at', 0)
            if not finished_at:
                continue
                
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
            if finished_at > 10**12:
                match_time = datetime.fromtimestamp(finished_at / 1000)
            else:
                match_time = datetime.fromtimestamp(finished_at)
            
            match['parsed_time'] = match_time
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –ø—É—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            if not current_session:
                current_session = [match]
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
                last_match_time = current_session[-1]['parsed_time']
                time_diff = (last_match_time - match_time).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                
                if time_diff <= 12:  # –ú–∞—Ç—á–∏ –≤ —Ä–∞–º–∫–∞—Ö 12 —á–∞—Å–æ–≤ - –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è
                    current_session.append(match)
                else:  # –ë–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤ - –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è
                    sessions.append(current_session)
                    current_session = [match]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
        if current_session:
            sessions.append(current_session)
        
        if not sessions:
            await callback.message.edit_text(
                "‚è∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏**\n\n"
                "–°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="Markdown",
                reply_markup=get_stats_keyboard()
            )
            await callback.answer()
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é (—Å–∞–º—É—é —Å–≤–µ–∂—É—é)
        latest_session = sessions[0]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏
        session_stats = await analyze_session_stats(latest_session, faceit_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        session_start = latest_session[-1]['parsed_time'].strftime('%d.%m %H:%M')
        session_end = latest_session[0]['parsed_time'].strftime('%d.%m %H:%M')
        
        message = f"""
‚è∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º**

üïí **–ü–µ—Ä–∏–æ–¥:** {session_start} - {session_end}
üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –ú–∞—Ç—á–µ–π: {session_stats['total_matches']}
‚Ä¢ –ü–æ–±–µ–¥: {session_stats['wins']} ({session_stats['winrate']:.1f}%)
‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {session_stats['losses']}

üìà **–ò–≥—Ä–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ K/D: {session_stats['kd_ratio']:.3f}
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞: {session_stats['hltv_rating']:.3f}
‚Ä¢ ADR: {session_stats['adr']:.1f}

üìã **–ú–∞—Ç—á–∏ —Å–µ—Å—Å–∏–∏:**
"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–µ–π —Å–µ—Å—Å–∏–∏
        for i, match in enumerate(latest_session[:5], 1):
            result_emoji = session_stats['match_results'][i-1] if i-1 < len(session_stats['match_results']) else "‚ùì"
            map_name = match.get('map', 'Unknown')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç
            score_info = ""
            if 'results' in match and 'score' in match['results']:
                score = match['results']['score']
                score_info = f" ({score.get('faction1', 0)}:{score.get('faction2', 0)})"
            
            time_str = match['parsed_time'].strftime('%H:%M')
            message += f"\n{i}. {result_emoji} {map_name}{score_info} - {time_str}"
        
        if len(latest_session) > 5:
            message += f"\n\n_–ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(latest_session)} –º–∞—Ç—á–µ–π —Å–µ—Å—Å–∏–∏_"
        
        message += f"\n\n_–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}_"
        
        await callback.message.edit_text(
            message,
            parse_mode="Markdown",
            reply_markup=get_stats_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in show_session_stats for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_stats_keyboard()
        )
        await callback.answer()


async def analyze_session_stats(session_matches: List[Dict], faceit_id: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
    total_matches = len(session_matches)
    wins = 0
    losses = 0
    match_results = []
    
    total_kills = 0
    total_deaths = 0
    total_damage = 0
    total_rounds = 0
    
    for match in session_matches:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
        player_won = faceit_client._determine_player_result(match, faceit_id)
        
        if player_won is True:
            wins += 1
            match_results.append("üèÜ")
        elif player_won is False:
            losses += 1
            match_results.append("‚ùå")
        else:
            match_results.append("‚ùì")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        match_id = match.get('match_id')
        if match_id:
            try:
                match_stats = await faceit_client.get_match_stats(match_id)
                if match_stats and 'rounds' in match_stats:
                    # –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á–µ
                    for round_data in match_stats['rounds']:
                        for team in round_data.get('teams', []):
                            for player in team.get('players', []):
                                if player.get('player_id') == faceit_id:
                                    stats = player.get('player_stats', {})
                                    total_kills += int(stats.get('Kills', 0))
                                    total_deaths += int(stats.get('Deaths', 0))
                                    total_damage += int(stats.get('Damage', 0))
                                    total_rounds += int(round_data.get('round_stats', {}).get('Rounds', 0))
                                    break
            except Exception as e:
                logger.debug(f"Could not get detailed stats for match {match_id}: {e}")
                continue
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    kd_ratio = (total_kills / total_deaths) if total_deaths > 0 else 0
    adr = (total_damage / total_rounds) if total_rounds > 0 else 0
    winrate = (wins / total_matches * 100) if total_matches > 0 else 0
    
    # –ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
    if total_rounds > 0:
        kpr = total_kills / total_rounds
        dpr = total_deaths / total_rounds
        hltv_rating = max(0.0, 0.0073 * 70 + 0.3591 * kpr - 0.5329 * dpr + 0.2372 * kpr + 0.0032 * adr + 0.1587)
    else:
        hltv_rating = 0.0
    
    return {
        'total_matches': total_matches,
        'wins': wins,
        'losses': losses,
        'winrate': winrate,
        'kd_ratio': kd_ratio,
        'adr': adr,
        'hltv_rating': hltv_rating,
        'match_results': match_results
    }

# –£–î–ê–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è calculate_average_adr –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞,
# —Ç–∞–∫ –∫–∞–∫ ADR —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ faceit_client.format_player_stats()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def safe_float(value: Any, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ float"""
    if isinstance(value, (int, float)):
        return float(value)
    if isinstance(value, str):
        try:
            return float(value.replace(',', '.'))
        except (ValueError, TypeError):
            return default
    return default

def safe_int(value: Any, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ int"""
    if isinstance(value, int):
        return value
    if isinstance(value, str):
        try:
            return int(float(value.replace(',', '.')))
        except (ValueError, TypeError):
            return default
    return default

def validate_user_data(user_data: Optional[Dict]) -> Dict[str, Any]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user_data:
        return {'nickname': 'Unknown', 'faceit_id': None}
    
    return {
        'nickname': user_data.get('nickname', 'Unknown'),
        'faceit_id': user_data.get('faceit_id'),
        'created_at': user_data.get('created_at'),
        'last_activity': user_data.get('last_activity')
    }

def format_time_ago(timestamp: Optional[Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ '–Ω–∞–∑–∞–¥'"""
    if not timestamp:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    try:
        if isinstance(timestamp, str):
            time_obj = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        elif isinstance(timestamp, (int, float)):
            if timestamp > 10**12:  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                time_obj = datetime.fromtimestamp(timestamp / 1000)
            else:  # —Å–µ–∫—É–Ω–¥—ã
                time_obj = datetime.fromtimestamp(timestamp)
        else:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        delta = datetime.now() - time_obj
        
        if delta.days > 0:
            return f"{delta.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif delta.seconds > 3600:
            hours = delta.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif delta.seconds > 60:
            minutes = delta.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
            
    except Exception as e:
        logger.error(f"Error formatting time: {e}")
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


# –£–î–ê–õ–ï–ù–´: Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ main_handler.py –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞