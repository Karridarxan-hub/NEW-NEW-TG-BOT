from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import List, Dict, Any, Optional, Tuple
import logging
import asyncio
from datetime import datetime

from keyboards import get_form_analysis_keyboard, get_main_menu_keyboard
from storage import storage
from faceit_client import faceit_client

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã
router = Router(name="form_analysis_handler")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã
class FormAnalysisStates(StatesGroup):
    waiting_for_custom_count = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã
@router.callback_query(F.data == "form_analysis")
async def show_form_analysis_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã"""
    await state.clear()
    
    await callback.message.edit_text(
        "üìà <b>–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –∏–≥—Ä–æ–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:\n"
        "‚Ä¢ <i>10 vs 10</i> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π –ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 10\n"
        "‚Ä¢ <i>20 vs 20</i> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∞—Ç—á–µ–π –ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 20\n"
        "‚Ä¢ <i>50 vs 50</i> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –º–∞—Ç—á–µ–π –ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 50\n"
        "‚Ä¢ <i>–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é</i> - –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
        reply_markup=get_form_analysis_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
@router.callback_query(F.data.in_(["form_10", "form_20", "form_50"]))
async def analyze_form_fixed(callback: CallbackQuery, state: FSMContext):
    """–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π"""
    await state.clear()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –∏–∑ callback_data
    match_count = int(callback.data.split("_")[1])
    
    await perform_form_analysis(callback, match_count)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
@router.callback_query(F.data == "form_custom")
async def ask_custom_form_count(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã"""
    await state.set_state(FormAnalysisStates.waiting_for_custom_count)
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã - –≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–æ—Ç 5 –¥–æ 200):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25</code>\n\n"
        "‚ùó –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –º–∞—Ç—á–µ–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ N –º–∞—Ç—á–∞–º–∏",
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(FormAnalysisStates.waiting_for_custom_count)
async def process_custom_form_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π"""
    try:
        match_count = int(message.text.strip())
        
        if not 5 <= match_count <= 200:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ 200.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–π –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏
        class FakeCallback:
            def __init__(self, message_obj, user_id):
                self.message = message_obj
                self.from_user = type('obj', (object,), {'id': user_id})()
                
            async def answer(self):
                pass
        
        fake_callback = FakeCallback(message, message.from_user.id)
        await perform_form_analysis(fake_callback, match_count)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 200:"
        )

async def perform_form_analysis(callback, match_count: int):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –∏–≥—Ä–æ–∫–∞"""
    user_id = callback.from_user.id
    
    try:
        faceit_id = await storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_form_analysis_keyboard()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ä–º—É –∏–≥—Ä–æ–∫–∞...\n"
            f"–ó–∞–≥—Ä—É–∂–∞—é {match_count * 2} –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        player_details = await faceit_client.get_player_details(faceit_id)
        if not player_details:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞.",
                reply_markup=get_form_analysis_keyboard()
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π (–Ω—É–∂–Ω–æ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        history_data = await faceit_client.get_player_history(faceit_id, limit=match_count * 2)
        
        if not history_data or not history_data.get("items"):
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π.",
                reply_markup=get_form_analysis_keyboard()
            )
            await callback.answer()
            return
        
        matches = history_data["items"]
        
        if len(matches) < match_count * 2:
            available_matches = len(matches)
            adjusted_count = available_matches // 2
            
            if adjusted_count < 5:
                await callback.message.edit_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_matches}, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10.",
                    reply_markup=get_form_analysis_keyboard()
                )
                await callback.answer()
                return
            
            match_count = adjusted_count
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Ç—á–∏ –Ω–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
        recent_matches = matches[:match_count]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∞—Ç—á–µ–π
        previous_matches = matches[match_count:match_count * 2]  # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ N –º–∞—Ç—á–µ–π
        
        await callback.message.edit_text(
            f"üìä –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π...\n"
            f"–ü–µ—Ä–∏–æ–¥ 1: {len(recent_matches)} –º–∞—Ç—á–µ–π\n"
            f"–ü–µ—Ä–∏–æ–¥ 2: {len(previous_matches)} –º–∞—Ç—á–µ–π"
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ –ø–µ—Ä–∏–æ–¥–∞
        recent_stats = await analyze_matches_period(recent_matches, faceit_id, "–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥")
        previous_stats = await analyze_matches_period(previous_matches, faceit_id, "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text = await format_form_analysis_result(
            recent_stats, previous_stats, match_count, 
            player_details.get('nickname', 'Unknown')
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=None,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ä–º—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_form_analysis_keyboard()
        )
    
    await callback.answer()

async def analyze_matches_period(matches: List[Dict], faceit_id: str, period_name: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–∞—Ç—á–µ–π"""
    logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {period_name}: {len(matches)} –º–∞—Ç—á–µ–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    stats = {
        'total_matches': len(matches),
        'wins': 0,
        'losses': 0,
        'winrate': 0.0,
        'kills': 0,
        'deaths': 0,
        'assists': 0,
        'kd_ratio': 0.0,
        'headshots': 0,
        'headshot_percentage': 0.0,
        'total_damage': 0,
        'total_rounds': 0,
        'adr': 0.0,
        'flash_assists': 0,
        'kast_rounds': 0,
        'kast_percentage': 0.0,
        'player_rating': 0.0,
        'first_kills': 0,
        'first_deaths': 0,
        'detailed_matches': 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    }
    
    if not matches:
        return stats
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π (–±—ã—Å—Ç—Ä–æ)
    for match in matches:
        player_result = faceit_client._determine_player_result(match, faceit_id)
        if player_result is True:
            stats['wins'] += 1
        elif player_result is False:
            stats['losses'] += 1
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π
    semaphore = asyncio.Semaphore(5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    async def get_match_detailed_stats(match):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        match_id = match.get('match_id')
        if not match_id:
            return None
            
        async with semaphore:
            try:
                match_stats = await faceit_client.get_match_stats(match_id)
                if match_stats and 'rounds' in match_stats:
                    return extract_player_stats_from_match(match_stats, faceit_id)
                return None
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞ {match_id}: {e}")
                return None
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    tasks = [get_match_detailed_stats(match) for match in matches]
    detailed_stats_results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for result in detailed_stats_results:
        if result and not isinstance(result, Exception):
            stats['detailed_matches'] += 1
            merge_player_stats(stats, result)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    calculate_final_stats(stats)
    
    logger.info(f"{period_name} - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è {stats['detailed_matches']} –∏–∑ {len(matches)} –º–∞—Ç—á–µ–π")
    
    return stats

def extract_player_stats_from_match(match_stats: Dict, faceit_id: str) -> Optional[Dict]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞"""
    if not match_stats.get('rounds'):
        return None
    
    for round_data in match_stats['rounds']:
        for team in round_data.get('teams', []):
            for player in team.get('players', []):
                if player.get('player_id') == faceit_id:
                    player_stats = player.get('player_stats', {})
                    
                    return {
                        'kills': safe_int(player_stats.get('Kills', 0)),
                        'deaths': safe_int(player_stats.get('Deaths', 0)),
                        'assists': safe_int(player_stats.get('Assists', 0)),
                        'headshots': safe_int(player_stats.get('Headshots', 0)),
                        'damage': safe_int(player_stats.get('Damage', 0)),
                        'rounds': safe_int(round_data.get('round_stats', {}).get('Rounds', 0)),
                        'flash_assists': safe_int(player_stats.get('Flash Assists', 0)),
                        'first_kills': safe_int(player_stats.get('First Kills Round', 0)),
                        'first_deaths': safe_int(player_stats.get('First Deaths', 0)),
                        'kast': safe_int(player_stats.get('KAST', 0))
                    }
    
    return None

def merge_player_stats(total_stats: Dict, match_stats: Dict):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞ —Å –æ–±—â–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"""
    total_stats['kills'] += match_stats['kills']
    total_stats['deaths'] += match_stats['deaths']
    total_stats['assists'] += match_stats['assists']
    total_stats['headshots'] += match_stats['headshots']
    total_stats['total_damage'] += match_stats['damage']
    total_stats['total_rounds'] += match_stats['rounds']
    total_stats['flash_assists'] += match_stats['flash_assists']
    total_stats['first_kills'] += match_stats['first_kills']
    total_stats['first_deaths'] += match_stats['first_deaths']
    total_stats['kast_rounds'] += match_stats['kast']

def calculate_final_stats(stats: Dict):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –í–∏–Ω—Ä–µ–π—Ç
    total_decided_matches = stats['wins'] + stats['losses']
    if total_decided_matches > 0:
        stats['winrate'] = (stats['wins'] / total_decided_matches) * 100
    
    # K/D —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    if stats['deaths'] > 0:
        stats['kd_ratio'] = stats['kills'] / stats['deaths']
    else:
        stats['kd_ratio'] = stats['kills']  # –ï—Å–ª–∏ —Å–º–µ—Ä—Ç–µ–π –Ω–µ—Ç
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —Ö–µ–¥—à–æ—Ç–æ–≤
    if stats['kills'] > 0:
        stats['headshot_percentage'] = (stats['headshots'] / stats['kills']) * 100
    
    # ADR (Average Damage per Round)
    if stats['total_rounds'] > 0:
        stats['adr'] = stats['total_damage'] / stats['total_rounds']
    

async def format_form_analysis_result(
    recent_stats: Dict, 
    previous_stats: Dict, 
    match_count: int,
    nickname: str
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã"""
    
    message = f"üìà <b>–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –∏–≥—Ä–æ–∫–∞</b>\n"
    message += f"üë§ <b>–ò–≥—Ä–æ–∫:</b> {nickname}\n"
    message += f"üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:</b> {match_count} vs {match_count} –º–∞—Ç—á–µ–π\n\n"
    
    # –ü–µ—Ä–∏–æ–¥ 1 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏)
    message += f"üü¢ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {match_count} –º–∞—Ç—á–µ–π:</b>\n"
    message += format_period_stats(recent_stats)
    message += "\n"
    
    # –ü–µ—Ä–∏–æ–¥ 2 (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ç—á–∏)
    message += f"üü° <b>–ü—Ä–µ–¥—ã–¥—É—â–∏–µ {match_count} –º–∞—Ç—á–µ–π:</b>\n"
    message += format_period_stats(previous_stats)
    message += "\n"
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    message += "üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ:</b>\n"
    message += format_comparison(recent_stats, previous_stats)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
    recent_coverage = (recent_stats['detailed_matches'] / recent_stats['total_matches']) * 100 if recent_stats['total_matches'] > 0 else 0
    previous_coverage = (previous_stats['detailed_matches'] / previous_stats['total_matches']) * 100 if previous_stats['total_matches'] > 0 else 0
    
    message += f"\n<i>üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}</i>"
    
    return message

def format_period_stats(stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–∏–æ–¥–∞"""
    text = f"‚Ä¢ üèÜ –ü–æ–±–µ–¥: {stats['wins']}/{stats['total_matches']} ({stats['winrate']:.1f}%)\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if stats['detailed_matches'] > 0:
        text += f"‚Ä¢ ‚öîÔ∏è K/D: {stats['kd_ratio']:.2f} "
        text += f"(K:{stats['kills']} D:{stats['deaths']} A:{stats['assists']})\n"
        text += f"‚Ä¢ üéØ –•–µ–¥—à–æ—Ç—ã: {stats['headshot_percentage']:.1f}%\n"
        text += f"‚Ä¢ üí• ADR: {stats['adr']:.1f}\n"
    else:
        text += "<i>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</i>\n"
    
    return text

def format_comparison(recent: Dict, previous: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏"""
    comparisons = []
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–Ω—Ä–µ–π—Ç–∞
    winrate_diff = recent['winrate'] - previous['winrate']
    winrate_emoji = "üìà" if winrate_diff > 0 else "üìâ" if winrate_diff < 0 else "‚û°Ô∏è"
    comparisons.append(f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {winrate_emoji} {winrate_diff:+.1f}%")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±–æ–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    if recent['detailed_matches'] > 0 and previous['detailed_matches'] > 0:
        # K/D
        kd_diff = recent['kd_ratio'] - previous['kd_ratio']
        kd_emoji = "üìà" if kd_diff > 0 else "üìâ" if kd_diff < 0 else "‚û°Ô∏è"
        comparisons.append(f"‚Ä¢ K/D: {kd_emoji} {kd_diff:+.3f}")
        
        # ADR
        adr_diff = recent['adr'] - previous['adr']
        adr_emoji = "üìà" if adr_diff > 0 else "üìâ" if adr_diff < 0 else "‚û°Ô∏è"
        comparisons.append(f"‚Ä¢ ADR: {adr_emoji} {adr_diff:+.1f}")
        
        
        # –•–µ–¥—à–æ—Ç—ã
        hs_diff = recent['headshot_percentage'] - previous['headshot_percentage']
        hs_emoji = "üìà" if hs_diff > 0 else "üìâ" if hs_diff < 0 else "‚û°Ô∏è"
        comparisons.append(f"‚Ä¢ –•–µ–¥—à–æ—Ç—ã: {hs_emoji} {hs_diff:+.1f}%")
        
    else:
        comparisons.append("<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</i>")
    
    return "\n".join(comparisons)

def safe_int(value: Any, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ int"""
    if isinstance(value, int):
        return value
    if isinstance(value, str):
        try:
            return int(float(value.replace(',', '.')))
        except (ValueError, TypeError):
            return default
    if isinstance(value, float):
        return int(value)
    return default

def safe_float(value: Any, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ float"""
    if isinstance(value, (int, float)):
        return float(value)
    if isinstance(value, str):
        try:
            return float(value.replace(',', '.'))
        except (ValueError, TypeError):
            return default
    return default