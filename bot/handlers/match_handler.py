from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import re

from keyboards import get_match_history_keyboard, get_main_menu_keyboard
from storage import storage
from faceit_client import faceit_client

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Ç—á–µ–π
router = Router(name="match_handler")

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—Ç—á–µ–π
class MatchStates(StatesGroup):
    waiting_for_custom_count = State()
    waiting_for_match_url = State()

# –ú–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
@router.callback_query(F.data == "match_history")
async def show_match_history_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_match_history_keyboard()
    )
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∞—Ç—á–µ–π
@router.callback_query(F.data.startswith("history_"))
async def show_match_history(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π"""
    data = callback.data.split("_")
    
    if len(data) != 2:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return
    
    if data[1] == "custom":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (1-100):"
        )
        await state.set_state(MatchStates.waiting_for_custom_count)
        await callback.answer()
        return
    
    try:
        count = int(data[1])
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π", show_alert=True)
        return
    
    await show_matches_list(callback.message, callback.from_user.id, count)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
@router.message(MatchStates.waiting_for_custom_count)
async def process_custom_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π"""
    try:
        count = int(message.text.strip())
        if count < 1 or count > 100:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
        return
    
    await state.clear()
    await show_matches_list(message, message.from_user.id, count)

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á
@router.callback_query(F.data == "last_match")
async def show_last_match(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ"""
    user_id = callback.from_user.id
    faceit_id = await storage.get_user_faceit_id(user_id)
    
    if not faceit_id:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text("üéÆ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á
    matches = await faceit_client.get_player_matches(faceit_id, limit=1)
    
    if not matches or not matches.get('items'):
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
        return
    
    match = matches['items'][0]
    match_id = match.get('match_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
    match_stats = await faceit_client.get_match_stats(match_id)
    
    if not match_stats:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–∞—Ç—á–∞
    message = format_match_details(match, match_stats, faceit_id)
    
    await callback.message.edit_text(
        message,
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard(),
        disable_web_page_preview=True
    )
    await callback.answer()

# –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞ –ø–æ —Å—Å—ã–ª–∫–µ
@router.callback_query(F.data == "current_match_analysis")
async def request_match_url(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    await callback.message.edit_text(
        "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: https://www.faceit.com/en/cs2/room/..."
    )
    await state.set_state(MatchStates.waiting_for_match_url)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç—á
@router.message(MatchStates.waiting_for_match_url)
async def analyze_match_url(message: Message, state: FSMContext):
    """–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ –ø–æ —Å—Å—ã–ª–∫–µ"""
    url = message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º match_id –∏–∑ URL
    match_pattern = r'room/([a-f0-9\-]+)'
    match_result = re.search(match_pattern, url)
    
    if not match_result:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://www.faceit.com/en/cs2/room/..."
        )
        return
    
    match_id = match_result.group(1)
    await state.clear()
    
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—á...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞
    match_details = await faceit_client.get_match_details(match_id)
    
    if not match_details:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    teams = match_details.get('teams', {})
    
    message_text = "üîç **–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞**\n\n"
    
    for team_key, team_data in teams.items():
        message_text += f"**–ö–æ–º–∞–Ω–¥–∞ {team_key}:**\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        for player in team_data.get('roster', []):
            player_id = player.get('player_id')
            player_stats = await faceit_client.get_player_stats(player_id)
            
            if player_stats:
                lifetime = player_stats.get('lifetime', {})
                kd = lifetime.get('K/D Ratio', '?')
                winrate = lifetime.get('Win Rate %', '?')
                matches = lifetime.get('Matches', '?')
                
                message_text += f"‚Ä¢ {player.get('nickname')}: "
                message_text += f"K/D {kd}, WR {winrate}%, {matches} –º–∞—Ç—á–µ–π\n"
            else:
                message_text += f"‚Ä¢ {player.get('nickname')}: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
        
        message_text += "\n"
    
    message_text += f"[–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ FACEIT]({url})"
    
    await message.answer(
        message_text,
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard(),
        disable_web_page_preview=True
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def show_matches_list(message, user_id: int, count: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π"""
    faceit_id = await storage.get_user_faceit_id(user_id)
    
    if not faceit_id:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
    matches = await faceit_client.get_player_matches(faceit_id, limit=count)
    
    if not matches or not matches.get('items'):
        await message.edit_text(
            "üìù –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø—É—Å—Ç–∞",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üìù **–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {count} –º–∞—Ç—á–µ–π:**\n\n"
    
    for i, match in enumerate(matches['items'][:count], 1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        teams = match.get('teams', {})
        results = match.get('results', {})
        winner = results.get('winner')
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
        player_team = None
        for team_id, team_data in teams.items():
            if any(p['player_id'] == faceit_id for p in team_data.get('players', [])):
                player_team = team_id
                break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥
        if player_team == winner:
            result_emoji = "‚úÖ"
        else:
            result_emoji = "‚ùå"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç
        score = results.get('score', {})
        faction1_score = score.get('faction1', 0)
        faction2_score = score.get('faction2', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É
        voting = match.get('voting', {})
        map_pick = voting.get('map', {}).get('pick', ['Unknown'])[0]
        
        # –í—Ä–µ–º—è –º–∞—Ç—á–∞
        finished_at = match.get('finished_at', 0) / 1000
        time_str = datetime.fromtimestamp(finished_at).strftime('%d.%m %H:%M')
        
        text += f"{i}. {result_emoji} **{faction1_score}:{faction2_score}** "
        text += f"–Ω–∞ {map_pick} | {time_str}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ FACEIT
    user_data = await storage.get_user(user_id)
    nickname = user_data.get('nickname', '')
    text += f"\n[–í—Å–µ –º–∞—Ç—á–∏ –Ω–∞ FACEIT](https://www.faceit.com/en/players/{nickname}/stats/cs2)"
    
    await message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_match_history_keyboard(),
        disable_web_page_preview=True
    )

def format_match_details(match, match_stats, player_id):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ"""
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    teams = match.get('teams', {})
    results = match.get('results', {})
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
    player_team = None
    for team_id, team_data in teams.items():
        if any(p['player_id'] == player_id for p in team_data.get('players', [])):
            player_team = team_id
            break
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
    winner = results.get('winner')
    is_win = player_team == winner
    result_text = "–ü–æ–±–µ–¥–∞ ‚úÖ" if is_win else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ ‚ùå"
    
    # –°—á–µ—Ç
    score = results.get('score', {})
    
    # –ö–∞—Ä—Ç–∞
    voting = match.get('voting', {})
    map_name = voting.get('map', {}).get('pick', ['Unknown'])[0]
    
    # –í—Ä–µ–º—è
    finished_at = match.get('finished_at', 0) / 1000
    time_str = datetime.fromtimestamp(finished_at).strftime('%H:%M %d.%m.%Y')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""
üéÆ **–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result_text}
üó∫Ô∏è **–ö–∞—Ä—Ç–∞:** {map_name}
‚öîÔ∏è **–°—á–µ—Ç:** {score.get('faction1', 0)}:{score.get('faction2', 0)}
üïê **–í—Ä–µ–º—è:** {time_str}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:**
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
    if match_stats and 'rounds' in match_stats:
        rounds = match_stats['rounds']
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        for team_key in ['faction1', 'faction2']:
            message += f"\n**–ö–æ–º–∞–Ω–¥–∞ {team_key}:**\n"
            
            team_players = rounds[0].get('teams', [])[0 if team_key == 'faction1' else 1].get('players', [])
            
            for player in team_players:
                nickname = player.get('nickname', 'Unknown')
                kills = player.get('player_stats', {}).get('Kills', 0)
                deaths = player.get('player_stats', {}).get('Deaths', 0)
                assists = player.get('player_stats', {}).get('Assists', 0)
                kd = kills / deaths if deaths > 0 else kills
                
                message += f"‚Ä¢ {nickname}: {kills}/{deaths}/{assists} (K/D: {kd:.2f})\n"
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á
    match_id = match.get('match_id')
    message += f"\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ FACEIT](https://www.faceit.com/en/cs2/room/{match_id})"
    
    return message