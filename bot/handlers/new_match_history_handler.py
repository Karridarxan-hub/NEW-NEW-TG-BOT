from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import List, Dict, Any, Optional
import logging

from keyboards import get_history_reply_keyboard, get_main_reply_keyboard
from storage import storage
from faceit_client import faceit_client

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
router = Router(name="new_match_history_handler")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
class NewMatchHistoryStates(StatesGroup):
    waiting_for_custom_count = State()  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
@router.callback_query(F.data == "match_history")
async def show_match_history_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
    logger.info(f"üîç –í—ã–∑–æ–≤ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await state.clear()
    
    keyboard = get_history_reply_keyboard()
    logger.info(f"üîç –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(keyboard.inline_keyboard)} —Ä—è–¥–∞–º–∏ –∫–Ω–æ–ø–æ–∫")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    for i, row in enumerate(keyboard.inline_keyboard):
        for j, button in enumerate(row):
            logger.info(f"üîç –ö–Ω–æ–ø–∫–∞ [{i}][{j}]: '{button.text}' -> {button.callback_data}")
    
    await callback.message.answer(
        "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π (5, 10, 30)
@router.callback_query(F.data.in_(["history_5", "history_10", "history_30"]))
async def show_match_history(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    await state.clear()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –∏–∑ callback_data
    match_count = int(callback.data.split("_")[1])
    
    await process_match_history_request(callback, match_count)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@router.callback_query(F.data == "history_custom")
async def ask_custom_history_count(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π"""
    logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ' (Inline callback) –≤ new_match_history_handler")
    await state.clear()
    await state.set_state(NewMatchHistoryStates.waiting_for_custom_count)
    
    await callback.message.answer(
        "‚úèÔ∏è <b>–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–æ—Ç 1 –¥–æ 100):\n\n"
        "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 15</i>",
        parse_mode="HTML"
    )
    await callback.answer()



async def process_match_history_request(callback: CallbackQuery, match_count: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ callback"""
    user_id = callback.from_user.id
    faceit_id = await storage.get_user_faceit_id(user_id)
    
    if not faceit_id:
        await callback.message.answer(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_back_to_main_keyboard()
        )
        await callback.answer()
        return

    await callback.message.answer(
        f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {match_count} –º–∞—Ç—á–µ–π...",
        reply_markup=None
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∏–≥—Ä–æ–∫–∞ {faceit_id}, –ª–∏–º–∏—Ç: {match_count}")
        history_data = await faceit_client.get_player_history(faceit_id, limit=match_count)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç API: {bool(history_data)}")
        if history_data:
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ –æ—Ç–≤–µ—Ç–µ: {len(history_data.get('items', []))}")
        
        if not history_data or not history_data.get("items"):
            logger.warning(f"–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø—É—Å—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {faceit_id}")
            await callback.message.answer(
                "üì≠ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø—É—Å—Ç–∞.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ CS2 –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å.",
                reply_markup=get_history_reply_keyboard()
            )
            await callback.answer()
            return

        matches = history_data["items"]
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(matches)} –º–∞—Ç—á–µ–π")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        message_text = await format_new_match_history(matches, faceit_id, match_count)
        
        await callback.message.answer(
            message_text,
            reply_markup=None,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π.",
            reply_markup=get_history_reply_keyboard()
        )
    
    await callback.answer()

async def process_match_history_request_from_message(message: Message, match_count: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ message (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞)"""
    user_id = message.from_user.id
    faceit_id = await storage.get_user_faceit_id(user_id)
    
    if not faceit_id:
        await message.answer(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_back_to_main_keyboard()
        )
        return

    loading_msg = await message.answer(
        f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {match_count} –º–∞—Ç—á–µ–π..."
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
        history_data = await faceit_client.get_player_history(faceit_id, limit=match_count)
        
        if not history_data or not history_data.get("items"):
            await loading_msg.edit_text(
                "üì≠ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø—É—Å—Ç–∞.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ CS2 –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å.",
                reply_markup=get_history_reply_keyboard()
            )
            return

        matches = history_data["items"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        message_text = await format_new_match_history(matches, faceit_id, match_count)
        
        await loading_msg.edit_text(
            message_text,
            reply_markup=None,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π: {e}")
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π.",
            reply_markup=get_history_reply_keyboard()
        )

async def format_new_match_history(matches: List[Dict[str, Any]], player_faceit_id: str, match_count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º {len(matches)} –º–∞—Ç—á–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_faceit_id}")
    message_text = ""
    processed_matches = 0
    
    for i, match in enumerate(matches, 1):
        try:
            match_id = match["match_id"]
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á {i}/{len(matches)}: {match_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
            match_stats = await faceit_client.get_match_stats(match_id)
            
            if not match_stats:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
            player_result = determine_player_result(match_stats, player_faceit_id)
            
            if not player_result:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä–æ–∫–∞ –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
                continue

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            match_info = format_single_match_new(match, match_stats, player_result, i)
            message_text += match_info + "\n\n"
            processed_matches += 1
            logger.info(f"–ú–∞—Ç—á {match_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ {match.get('match_id', 'unknown')}: {e}")
            continue
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_matches} –∏–∑ {len(matches)} –º–∞—Ç—á–µ–π")
    
    if processed_matches == 0:
        message_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    return message_text

def determine_player_result(match_stats: Dict[str, Any], player_faceit_id: str) -> Optional[Dict[str, Any]]:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    try:
        rounds = match_stats.get("rounds", [])
        if not rounds:
            return None
        
        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞)
        round_stats = rounds[0]
        teams = round_stats.get("teams", [])
        
        player_team = None
        enemy_team = None
        player_stats = None
        player_nickname = None
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞ –∏ –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for team in teams:
            players = team.get("players", [])
            for player in players:
                if player.get("player_id") == player_faceit_id:
                    player_team = team
                    player_stats = player.get("player_stats", {})
                    player_nickname = player.get("nickname", "Unknown")
                    logger.info(f"–ò–≥—Ä–æ–∫ {player_nickname} –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ {team.get('team_stats', {}).get('Team', 'Unknown')}")
                    break
            
            if player_team:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞–∂–µ—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É
                enemy_team = next((t for t in teams if t != player_team), None)
                break
        
        if not player_team or not enemy_team or not player_stats:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ {player_faceit_id} –≤ –º–∞—Ç—á–µ")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥—É/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        player_score = int(player_team.get("team_stats", {}).get("Final Score", "0"))
        enemy_score = int(enemy_team.get("team_stats", {}).get("Final Score", "0"))
        
        won = player_score > enemy_score
        
        player_team_name = player_team.get("team_stats", {}).get("Team", "Unknown")
        enemy_team_name = enemy_team.get("team_stats", {}).get("Team", "Unknown")
        logger.info(f"–ú–∞—Ç—á: {player_team_name} {player_score} - {enemy_score} {enemy_team_name}. –ò–≥—Ä–æ–∫ {'–≤—ã–∏–≥—Ä–∞–ª' if won else '–ø—Ä–æ–∏–≥—Ä–∞–ª'}")
        
        return {
            "won": won,
            "player_team": player_team,
            "enemy_team": enemy_team,
            "player_stats": player_stats,
            "player_score": player_score,
            "enemy_score": enemy_score,
            "player_nickname": player_nickname
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞: {e}")
        return None

def format_single_match_new(match: Dict[str, Any], match_stats: Dict[str, Any], player_result: Dict[str, Any], match_number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º –º–∞—Ç—á–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        player_team_name = player_result["player_team"].get("team_stats", {}).get("Team", "team_Unknown")
        enemy_team_name = player_result["enemy_team"].get("team_stats", {}).get("Team", "team_Unknown")
        
        # –°—á–µ—Ç
        player_score = player_result["player_score"]
        enemy_score = player_result["enemy_score"]
        
        # –°—Ç–∞—Ç—É—Å (–ø–æ–±–µ–¥–∞/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ)
        status_emoji = "üèÜ" if player_result["won"] else "‚ùå"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        player_nickname = player_result.get("player_nickname", "Unknown")
        
        # –ö–∞—Ä—Ç–∞
        map_name = match_stats.get("rounds", [{}])[0].get("round_stats", {}).get("Map", "Unknown")
        if map_name != "Unknown":
            map_name = f"de_{map_name.lower()}" if not map_name.startswith("de_") else map_name
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        player_stats = player_result["player_stats"]
        kills = int(player_stats.get("Kills", "0"))
        deaths = int(player_stats.get("Deaths", "0"))
        assists = int(player_stats.get("Assists", "0"))
        
        # K/D ratio —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        try:
            kd_ratio = round(float(kills) / max(float(deaths), 1), 2)
        except:
            kd_ratio = 0.00
        
        # ADR (Average Damage per Round)
        try:
            adr = float(player_stats.get("ADR", "0"))
        except:
            adr = 0.0
        
        # –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
        try:
            hltv_rating = faceit_client.calculate_hltv_rating(player_stats)  # –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞
        except:
            hltv_rating = 0.00
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        # 1. üèÜ team_Geun-Hee 13 - 4 team_kuv1ch
        # üó∫Ô∏è de_nuke  
        # üìä 16-15-5 | K/D: 1.07 | ADR: 97.3
        # üîó [–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á –Ω–∞ FACEIT](https://www.faceit.com/ru/cs2/room/MATCH_ID)
        
        # –ü–æ–ª—É—á–∞–µ–º match_id –¥–ª—è —Å—Å—ã–ª–∫–∏
        match_id = match.get("match_id", "")
        faceit_url = f"https://www.faceit.com/ru/cs2/room/{match_id}"
        
        match_text = (
            f"{match_number}. <b>{player_team_name}</b> {status_emoji} {player_score} - {enemy_score} {enemy_team_name}\n"
            f"üó∫Ô∏è {map_name}\n"
            f"üìä {kills}-{deaths}-{assists} | K/D: {kd_ratio:.2f} | ADR: {adr:.1f}\n"
            f"üîó <a href='{faceit_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á –Ω–∞ FACEIT</a>"
        )
        
        return match_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ç—á–∞: {e}")
        return f"{match_number}. ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞"

# Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
@router.message(F.text == "5 –º–∞—Ç—á–µ–π")
async def handle_history_5_reply(message: Message, state: FSMContext):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 5 –º–∞—Ç—á–µ–π"""
    logger.warning(f"‚úÖ SUCCESS: NEW ROUTER –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç '5 –º–∞—Ç—á–µ–π' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await process_match_history_request_from_message(message, 5)

@router.message(F.text == "10 –º–∞—Ç—á–µ–π")
async def handle_history_10_reply(message: Message, state: FSMContext):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 10 –º–∞—Ç—á–µ–π"""
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º reply '10 –º–∞—Ç—á–µ–π' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await process_match_history_request_from_message(message, 10)

@router.message(F.text == "30 –º–∞—Ç—á–µ–π")
async def handle_history_30_reply(message: Message, state: FSMContext):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 30 –º–∞—Ç—á–µ–π"""
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º reply '30 –º–∞—Ç—á–µ–π' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await process_match_history_request_from_message(message, 30)

# Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@router.message(F.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")
async def handle_custom_history_input_reply(message: Message, state: FSMContext):
    """Reply-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
    logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '–í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ' (Reply) –≤ new_match_history_handler")
    
    await state.clear()
    await state.set_state(NewMatchHistoryStates.waiting_for_custom_count)
    
    await message.answer(
        "‚úèÔ∏è <b>–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–æ—Ç 1 –¥–æ 100):\n\n"
        "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 15</i>",
        parse_mode="HTML"
    )

# FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
@router.message(NewMatchHistoryStates.waiting_for_custom_count)
async def process_custom_history_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π"""
    user_text = message.text.strip()
    
    try:
        match_count = int(user_text)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if match_count < 1 or match_count > 100:
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ</b>\n\n"
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        await state.clear()
        await process_match_history_request_from_message(message, match_count)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 15</i>",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    from keyboards import get_main_menu_keyboard
    await callback.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()