"""
–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤.
–í–∫–ª—é—á–∞–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
"""

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Dict, List, Any, Optional
import asyncio

from storage import storage
from faceit_client import faceit_client


class ComparisonStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤."""
    waiting_for_nickname = State()


router = Router()


async def get_comparison_keyboard(user_data: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
    
    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    comparison_players = user_data.get('comparison_players', [])
    players_count = len(comparison_players)
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–±—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    keyboard.append([InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ",
        callback_data="comparison_add_self"
    )])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    keyboard.append([InlineKeyboardButton(
        text="üîç –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
        callback_data="comparison_add_player"
    )])
    
    # –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 2 –∏–≥—Ä–æ–∫–∞—Ö)
    if players_count == 2:
        keyboard.append([InlineKeyboardButton(
            text="‚öîÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ",
            callback_data="comparison_compare"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏)
    if players_count > 0:
        keyboard.append([InlineKeyboardButton(
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            callback_data="comparison_clear"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="main_menu"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def format_comparison_menu_text(user_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞—Ö.
    
    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º–µ–Ω—é
    """
    comparison_players = user_data.get('comparison_players', [])
    
    text = "üÜö <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
    
    if not comparison_players:
        text += "üìã –°–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—É—Å—Ç\n"
        text += "–î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
    else:
        text += f"üìã –í—ã–±—Ä–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(comparison_players)}/2\n\n"
        
        for i, player in enumerate(comparison_players, 1):
            text += f"{i}. <b>{player['nickname']}</b>\n"
            text += f"   üéØ –£—Ä–æ–≤–µ–Ω—å: {player.get('skill_level', 'N/A')}\n"
            text += f"   üèÜ ELO: {player.get('faceit_elo', 'N/A')}\n\n"
        
        if len(comparison_players) == 2:
            text += "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é!"
        else:
            text += f"‚è≥ –ù—É–∂–Ω–æ –µ—â–µ {2 - len(comparison_players)} –∏–≥—Ä–æ–∫(–æ–≤)"
    
    return text


async def get_player_comparison_stats(player_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    
    Args:
        player_data: –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç FACEIT API
        
    Returns:
        Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    stats = {}
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    stats['nickname'] = player_data.get('nickname', 'N/A')
    stats['skill_level'] = player_data.get('skill_level', 0)
    stats['faceit_elo'] = player_data.get('faceit_elo', 0)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ lifetime stats
    lifetime = player_data.get('lifetime', {})
    stats['matches'] = int(lifetime.get('Matches', 0))
    stats['wins'] = int(lifetime.get('Wins', 0))
    stats['winrate'] = round(stats['wins'] / max(stats['matches'], 1) * 100, 1)
    
    stats['avg_kills'] = float(lifetime.get('Average Kills', 0))
    stats['avg_deaths'] = float(lifetime.get('Average Deaths', 1))  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    stats['avg_assists'] = float(lifetime.get('Average Assists', 0))
    stats['kd_ratio'] = round(stats['avg_kills'] / max(stats['avg_deaths'], 1), 2)
    
    stats['headshots_percent'] = float(lifetime.get('Average Headshots %', 0))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats['adr'] = float(lifetime.get('ADR', 0))
    stats['flash_assists'] = float(lifetime.get('Flash Assists', 0))
    stats['kast'] = float(lifetime.get('KAST', 0))
    stats['hltv_rating'] = float(lifetime.get('HLTV Rating 2.1', 0))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤—ã—Ö —É–±–∏–π—Å—Ç–≤/—Å–º–µ—Ä—Ç–µ–π
    stats['first_kills'] = float(lifetime.get('First Kills', 0))
    stats['first_deaths'] = float(lifetime.get('First Deaths', 0))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–Ω–∞—Ç
    stats['grenade_damage'] = float(lifetime.get('Grenade Damage', 0))
    stats['molotov_damage'] = float(lifetime.get('Molotov Damage', 0))
    stats['enemies_flashed'] = float(lifetime.get('Enemies Flashed', 0))
    
    return stats


def format_comparison_table(player1_stats: Dict[str, Any], player2_stats: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã.
    
    Args:
        player1_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        player2_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    p1_name = player1_stats['nickname']
    p2_name = player2_stats['nickname']
    
    text = f"‚öîÔ∏è <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
    text += f"<b>{p1_name}</b> üÜö <b>{p2_name}</b>\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += "üéØ <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
    text += f"–£—Ä–æ–≤–µ–Ω—å: <b>{player1_stats['skill_level']}</b> | <b>{player2_stats['skill_level']}</b>\n"
    text += f"ELO: <b>{player1_stats['faceit_elo']}</b> | <b>{player2_stats['faceit_elo']}</b>\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π
    text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π:</b>\n"
    text += f"–ú–∞—Ç—á–∏: <b>{player1_stats['matches']}</b> | <b>{player2_stats['matches']}</b>\n"
    text += f"–ü–æ–±–µ–¥—ã: <b>{player1_stats['wins']}</b> | <b>{player2_stats['wins']}</b>\n"
    text += f"–í–∏–Ω—Ä–µ–π—Ç: <b>{player1_stats['winrate']}%</b> | <b>{player2_stats['winrate']}%</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    text += "üíÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
    text += f"–°—Ä. –∫–∏–ª—ã: <b>{player1_stats['avg_kills']:.1f}</b> | <b>{player2_stats['avg_kills']:.1f}</b>\n"
    text += f"–°—Ä. —Å–º–µ—Ä—Ç–∏: <b>{player1_stats['avg_deaths']:.1f}</b> | <b>{player2_stats['avg_deaths']:.1f}</b>\n"
    text += f"–°—Ä. –∞—Å—Å–∏—Å—Ç—ã: <b>{player1_stats['avg_assists']:.1f}</b> | <b>{player2_stats['avg_assists']:.1f}</b>\n"
    text += f"K/D: <b>{player1_stats['kd_ratio']}</b> | <b>{player2_stats['kd_ratio']}</b>\n"
    text += f"HS%: <b>{player1_stats['headshots_percent']:.1f}%</b> | <b>{player2_stats['headshots_percent']:.1f}%</b>\n\n"
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    text += "üìà <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
    text += f"ADR: <b>{player1_stats['adr']:.1f}</b> | <b>{player2_stats['adr']:.1f}</b>\n"
    text += f"Flash Assists: <b>{player1_stats['flash_assists']:.1f}</b> | <b>{player2_stats['flash_assists']:.1f}</b>\n"
    text += f"KAST: <b>{player1_stats['kast']:.1f}%</b> | <b>{player2_stats['kast']:.1f}%</b>\n"
    text += f"HLTV 2.1: <b>{player1_stats['hltv_rating']:.2f}</b> | <b>{player2_stats['hltv_rating']:.2f}</b>\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Entry
    text += "‚ö° <b>Entry —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"–ü–µ—Ä–≤—ã–µ –∫–∏–ª—ã: <b>{player1_stats['first_kills']:.1f}</b> | <b>{player2_stats['first_kills']:.1f}</b>\n"
    text += f"–ü–µ—Ä–≤—ã–µ —Å–º–µ—Ä—Ç–∏: <b>{player1_stats['first_deaths']:.1f}</b> | <b>{player2_stats['first_deaths']:.1f}</b>\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ç–∏–ª–∏—Ç
    text += "üí• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ç–∏–ª–∏—Ç:</b>\n"
    text += f"–£—Ä–æ–Ω –≥—Ä–∞–Ω–∞—Ç: <b>{player1_stats['grenade_damage']:.1f}</b> | <b>{player2_stats['grenade_damage']:.1f}</b>\n"
    text += f"–£—Ä–æ–Ω –º–æ–ª–æ—Ç–æ–≤–æ–≤: <b>{player1_stats['molotov_damage']:.1f}</b> | <b>{player2_stats['molotov_damage']:.1f}</b>\n"
    text += f"–û—Å–ª–µ–ø–ª–µ–Ω–∏—è: <b>{player1_stats['enemies_flashed']:.1f}</b> | <b>{player2_stats['enemies_flashed']:.1f}</b>\n\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
    winner_indicators = []
    if player1_stats['faceit_elo'] > player2_stats['faceit_elo']:
        winner_indicators.append(f"{p1_name} –∏–º–µ–µ—Ç –≤—ã—à–µ ELO")
    elif player2_stats['faceit_elo'] > player1_stats['faceit_elo']:
        winner_indicators.append(f"{p2_name} –∏–º–µ–µ—Ç –≤—ã—à–µ ELO")
        
    if player1_stats['kd_ratio'] > player2_stats['kd_ratio']:
        winner_indicators.append(f"{p1_name} –∏–º–µ–µ—Ç –ª—É—á—à–∏–π K/D")
    elif player2_stats['kd_ratio'] > player1_stats['kd_ratio']:
        winner_indicators.append(f"{p2_name} –∏–º–µ–µ—Ç –ª—É—á—à–∏–π K/D")
        
    if player1_stats['winrate'] > player2_stats['winrate']:
        winner_indicators.append(f"{p1_name} –∏–º–µ–µ—Ç –≤—ã—à–µ –≤–∏–Ω—Ä–µ–π—Ç")
    elif player2_stats['winrate'] > player1_stats['winrate']:
        winner_indicators.append(f"{p2_name} –∏–º–µ–µ—Ç –≤—ã—à–µ –≤–∏–Ω—Ä–µ–π—Ç")
    
    if winner_indicators:
        text += "üèÜ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        for indicator in winner_indicators:
            text += f"‚Ä¢ {indicator}\n"
    
    return text


@router.callback_query(F.data == "comparison")
async def handle_comparison_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤."""
    try:
        await state.clear()
        user_data = await state.get_data()
        
        text = await format_comparison_menu_text(user_data)
        keyboard = await get_comparison_keyboard(user_data)
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        print(f"Error in comparison menu: {e}")


@router.callback_query(F.data == "comparison_add_self")
async def handle_add_self_to_comparison(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    try:
        user_id = str(callback.from_user.id)
        user_data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ storage
        user_nickname = await storage.get(f"user:{user_id}:nickname")
        
        if not user_nickname:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
            return
        
        comparison_players = user_data.get('comparison_players', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
        if any(player['nickname'] == user_nickname for player in comparison_players):
            await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if len(comparison_players) >= 2:
            await callback.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 2 –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
        await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...")
        
        player_profile = await faceit_client.get_player_full_profile(user_nickname)
        if not player_profile:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å FACEIT!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
        comparison_players.append({
            'nickname': user_nickname,
            'skill_level': player_profile.get('skill_level', 0),
            'faceit_elo': player_profile.get('faceit_elo', 0),
            'profile_data': player_profile
        })
        
        await state.update_data(comparison_players=comparison_players)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        text = await format_comparison_menu_text(await state.get_data())
        keyboard = await get_comparison_keyboard(await state.get_data())
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        print(f"Error adding self to comparison: {e}")


@router.callback_query(F.data == "comparison_add_player")
async def handle_add_player_to_comparison(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ."""
    try:
        user_data = await state.get_data()
        comparison_players = user_data.get('comparison_players', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        if len(comparison_players) >= 2:
            await callback.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 2 –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
            return
        
        await state.set_state(ComparisonStates.waiting_for_nickname)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="comparison")
        ]])
        
        await callback.message.edit_text(
            text="üîç <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</b>\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ FACEIT, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"Error in add player handler: {e}")


@router.message(ComparisonStates.waiting_for_nickname)
async def handle_player_nickname_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ."""
    try:
        nickname = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
        if not nickname:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º!")
            return
        
        if len(nickname) < 3 or len(nickname) > 20:
            await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!")
            return
        
        user_data = await state.get_data()
        comparison_players = user_data.get('comparison_players', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
        if any(player['nickname'].lower() == nickname.lower() for player in comparison_players):
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer("‚è≥ –ò—â—É –∏–≥—Ä–æ–∫–∞ –∏ –∑–∞–≥—Ä—É–∂–∞—é –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
        player_profile = await faceit_client.get_player_full_profile(nickname)
        
        if not player_profile:
            await loading_msg.edit_text("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FACEIT!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
        comparison_players.append({
            'nickname': player_profile.get('nickname', nickname),
            'skill_level': player_profile.get('skill_level', 0),
            'faceit_elo': player_profile.get('faceit_elo', 0),
            'profile_data': player_profile
        })
        
        await state.update_data(comparison_players=comparison_players)
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        text = await format_comparison_menu_text(await state.get_data())
        keyboard = await get_comparison_keyboard(await state.get_data())
        
        await loading_msg.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await message.delete()
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–∞")
        print(f"Error processing nickname input: {e}")


@router.callback_query(F.data == "comparison_compare")
async def handle_compare_players(callback: CallbackQuery, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."""
    try:
        user_data = await state.get_data()
        comparison_players = user_data.get('comparison_players', [])
        
        if len(comparison_players) != 2:
            await callback.answer("‚ö†Ô∏è –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 2 –∏–≥—Ä–æ–∫–æ–≤!")
            return
        
        await callback.message.edit_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        player1_stats = await get_player_comparison_stats(comparison_players[0]['profile_data'])
        player2_stats = await get_player_comparison_stats(comparison_players[1]['profile_data'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison_text = format_comparison_table(player1_stats, player2_stats)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", callback_data="comparison_clear")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="comparison")]
        ])
        
        await callback.message.edit_text(
            text=comparison_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤")
        print(f"Error comparing players: {e}")


@router.callback_query(F.data == "comparison_clear")
async def handle_clear_comparison(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    try:
        await state.update_data(comparison_players=[])
        
        text = await format_comparison_menu_text(await state.get_data())
        keyboard = await get_comparison_keyboard(await state.get_data())
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("üóëÔ∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω!")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        print(f"Error clearing comparison: {e}")