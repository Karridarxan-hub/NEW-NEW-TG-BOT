from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import List, Dict, Any, Optional
import logging

from keyboards import get_match_history_keyboard, get_back_to_main_keyboard, get_back_to_history_keyboard
from storage import storage
from faceit_client import faceit_client

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
router = Router(name="match_history_handler")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
class MatchHistoryStates(StatesGroup):
    waiting_for_custom_count = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
@router.callback_query(F.data == "match_history")
async def show_match_history_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
    await state.clear()
    
    await callback.message.edit_text(
        "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_match_history_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
@router.callback_query(F.data.in_(["history_5", "history_10", "history_30"]))
async def show_match_history(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    await state.clear()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –∏–∑ callback_data
    match_count = int(callback.data.split("_")[1])
    
    user_id = callback.from_user.id
    faceit_id = await storage.get_user_faceit_id(user_id)
    
    if not faceit_id:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_back_to_history_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {match_count} –º–∞—Ç—á–µ–π...",
        reply_markup=None
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
        history_data = await faceit_client.get_player_history(faceit_id, limit=match_count)
        
        if not history_data:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π.\n"
                "FACEIT API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_match_history_keyboard()
            )
            await callback.answer()
            return
        
        if not history_data.get("items"):
            await callback.message.edit_text(
                "üì≠ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø—É—Å—Ç–∞.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ CS2 –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å.",
                reply_markup=get_match_history_keyboard()
            )
            await callback.answer()
            return
        
        matches = history_data["items"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        message_text = await format_match_history(matches, faceit_id, match_count)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_match_history_keyboard(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π.",
            reply_markup=get_match_history_keyboard()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
@router.callback_query(F.data == "history_custom")
async def ask_custom_match_count(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π"""
    await state.set_state(MatchHistoryStates.waiting_for_custom_count)
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–æ—Ç 1 –¥–æ 100):",
        reply_markup=get_back_to_history_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(MatchHistoryStates.waiting_for_custom_count)
async def process_custom_match_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π"""
    try:
        match_count = int(message.text.strip())
        
        if not 1 <= match_count <= 100:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        await state.clear()
        
        user_id = message.from_user.id
        faceit_id = await storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_back_to_history_keyboard()
            )
            return
        
        loading_msg = await message.answer(
            f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {match_count} –º–∞—Ç—á–µ–π..."
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
            history_data = await faceit_client.get_player_history(faceit_id, limit=match_count)
            
            if not history_data:
                await loading_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π.\n"
                    "FACEIT API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_match_history_keyboard()
                )
                return
            
            if not history_data.get("items"):
                await loading_msg.edit_text(
                    "üì≠ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø—É—Å—Ç–∞.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ CS2 –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å.",
                    reply_markup=get_match_history_keyboard()
                )
                return
            
            matches = history_data["items"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            message_text = await format_match_history(matches, faceit_id, match_count)
            
            await loading_msg.edit_text(
                message_text,
                reply_markup=get_match_history_keyboard(),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π: {e}")
            await loading_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π.",
                reply_markup=get_match_history_keyboard()
            )
    
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

async def format_match_history(matches: List[Dict[str, Any]], player_faceit_id: str, match_count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π"""
    message_text = f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {match_count} –º–∞—Ç—á–µ–π</b>\n\n"
    
    for i, match in enumerate(matches, 1):
        try:
            match_id = match["match_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
            match_stats = await faceit_client.get_match_stats(match_id)
            
            if not match_stats:
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
            player_result = determine_player_result(match_stats, player_faceit_id)
            
            if not player_result:
                continue
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            match_info = format_single_match(match, match_stats, player_result, i)
            message_text += match_info + "\n"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ {match.get('match_id', 'unknown')}: {e}")
            continue
    
    if len(matches) == 0:
        message_text += "‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    return message_text

def determine_player_result(match_stats: Dict[str, Any], player_faceit_id: str) -> Optional[Dict[str, Any]]:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    try:
        rounds = match_stats.get("rounds", [])
        if not rounds:
            return None
        
        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞)
        round_stats = rounds[0]
        teams = round_stats.get("teams", [])
        
        player_team = None
        enemy_team = None
        player_stats = None
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞ –∏ –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for team in teams:
            players = team.get("players", [])
            for player in players:
                if player.get("player_id") == player_faceit_id:
                    player_team = team
                    player_stats = player.get("player_stats", {})
                    break
            
            if player_team:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞–∂–µ—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É
                enemy_team = next((t for t in teams if t != player_team), None)
                break
        
        if not player_team or not enemy_team or not player_stats:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥—É/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        player_score = int(player_team.get("team_stats", {}).get("Final Score", "0"))
        enemy_score = int(enemy_team.get("team_stats", {}).get("Final Score", "0"))
        
        won = player_score > enemy_score
        
        return {
            "won": won,
            "player_team": player_team,
            "enemy_team": enemy_team,
            "player_stats": player_stats,
            "player_score": player_score,
            "enemy_score": enemy_score
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞: {e}")
        return None

def format_single_match(match: Dict[str, Any], match_stats: Dict[str, Any], player_result: Dict[str, Any], match_number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º –º–∞—Ç—á–µ"""
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
        match_id = match["match_id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        team1_name = player_result["player_team"].get("team_stats", {}).get("Team", "Team 1")
        team2_name = player_result["enemy_team"].get("team_stats", {}).get("Team", "Team 2")
        
        # –°—á–µ—Ç
        team1_score = player_result["player_score"]
        team2_score = player_result["enemy_score"]
        
        # –°—Ç–∞—Ç—É—Å (–ø–æ–±–µ–¥–∞/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ)
        status_emoji = "üèÜ" if player_result["won"] else "üíî"
        
        # –ö–∞—Ä—Ç–∞
        map_name = match_stats.get("rounds", [{}])[0].get("round_stats", {}).get("Map", "Unknown")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        player_stats = player_result["player_stats"]
        kills = player_stats.get("Kills", "0")
        deaths = player_stats.get("Deaths", "0")
        assists = player_stats.get("Assists", "0")
        
        # K/D ratio
        try:
            kd_ratio = round(float(kills) / max(float(deaths), 1), 2)
        except:
            kd_ratio = "0.00"
        
        # ADR (Average Damage per Round)
        adr = player_stats.get("ADR", "0")
        
        # HLTV Rating 2.1 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        hltv_rating = player_stats.get("K/D Ratio", kd_ratio)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º K/D –∫–∞–∫ fallback
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–∞—Ç—á–∞
        match_text = (
            f"{match_number}. {status_emoji} <b>{team1_name}</b> {team1_score} - {team2_score} <b>{team2_name}</b>\n"
            f"üó∫Ô∏è <i>{map_name}</i>\n"
            f"üîó <a href=\"https://www.faceit.com/en/cs2/room/{match_id}\">–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á –Ω–∞ FACEIT</a>\n"
            f"üìä {kills}-{deaths}-{assists} | K/D: {kd_ratio} | ADR: {adr} | HLTV: {hltv_rating}"
        )
        
        return match_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ç—á–∞: {e}")
        return f"{match_number}. ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏
@router.callback_query(F.data == "back_to_history")
async def back_to_history_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
    await state.clear()
    await show_match_history_menu(callback, state)