from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, List, Optional, Any
import logging

from storage import storage
from faceit_client import faceit_client


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞
router = Router(name="last_match_handler")
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "last_match")
async def show_last_match(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ –∏–≥—Ä–æ–∫–∞"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º FACEIT ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        faceit_id = await storage.get_user_faceit_id(user_id)
        if not faceit_id:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=_get_back_keyboard()
            )
            await callback.answer()
            return

        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ...")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        history = await faceit_client.get_player_history(faceit_id, limit=1)
        if not history or not history.get('items'):
            await callback.message.edit_text(
                "‚ùå –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=_get_back_keyboard()
            )
            await callback.answer()
            return

        last_match = history['items'][0]
        match_id = last_match['match_id']

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
        match_stats = await faceit_client.get_match_stats(match_id)
        if not match_stats:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞.",
                reply_markup=_get_back_keyboard()
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–µ
        message_text = await _format_match_message(last_match, match_stats, faceit_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–∞—Ç—á
        keyboard = _create_match_keyboard(last_match)

        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Error in show_last_match: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ.",
            reply_markup=_get_back_keyboard()
        )
    
    await callback.answer()


async def _format_match_message(match_data: Dict, match_stats: Dict, user_faceit_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        match_result = match_data.get('results', {})
        winner = match_result.get('winner')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç
        teams = match_data.get('teams', {})
        team1_name = teams.get('faction1', {}).get('name', 'Team 1')
        team2_name = teams.get('faction2', {}).get('name', 'Team 2')
        
        team1_score = match_result.get('score', {}).get('faction1', 0)
        team2_score = match_result.get('score', {}).get('faction2', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–±–µ–¥–∞/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ)
        user_team = _get_user_team(match_stats, user_faceit_id)
        if user_team and winner:
            if (user_team == 'faction1' and winner == 'faction1') or \
               (user_team == 'faction2' and winner == 'faction2'):
                status_emoji = "üèÜ"
            else:
                status_emoji = "üíî"
        else:
            status_emoji = "üéÆ"

        # –ö–∞—Ä—Ç–∞
        voting = match_data.get('voting', {})
        map_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
        if voting and 'map' in voting:
            if 'pick' in voting['map']:
                map_name = voting['map']['pick'][0] if voting['map']['pick'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
            elif 'name' in voting['map']:
                map_name = voting['map']['name']

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = _get_user_stats(match_stats, user_faceit_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_lines = [
            f"{status_emoji} <b>{team1_name} {team1_score} - {team2_score} {team2_name}</b>",
            f"üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞:</b> {map_name}",
            "",
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
        ]

        if user_stats:
            kills = user_stats.get('Kills', '0')
            deaths = user_stats.get('Deaths', '0')
            assists = user_stats.get('Assists', '0')
            kd_ratio = user_stats.get('K/D Ratio', '0.00')
            adr = user_stats.get('ADR', '0')
            hltv_rating = faceit_client.calculate_hltv_rating(user_stats)
            
            message_lines.append(
                f"üî• K-D-A: {kills}-{deaths}-{assists} | K/D: {kd_ratio} | ADR: {adr} | HLTV 2.1: {hltv_rating:.2f}"
            )
        else:
            message_lines.append("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        message_lines.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        teams_info = _format_teams_info(match_stats, user_faceit_id)
        message_lines.extend(teams_info)

        return "\n".join(message_lines)

    except Exception as e:
        logger.error(f"Error formatting match message: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–∞—Ç—á–µ"


def _get_user_team(match_stats: Dict, user_faceit_id: str) -> Optional[str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ –∏–≥—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return None
            
        round_stats = rounds[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
        teams = round_stats.get('teams', [])
        
        for team in teams:
            players = team.get('players', [])
            for player in players:
                if player.get('player_id') == user_faceit_id:
                    return team.get('team_id')
        
        return None
    except Exception as e:
        logger.error(f"Error getting user team: {e}")
        return None


def _get_user_stats(match_stats: Dict, user_faceit_id: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Ç—á–∞"""
    try:
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return None
            
        round_stats = rounds[0]
        teams = round_stats.get('teams', [])
        
        for team in teams:
            players = team.get('players', [])
            for player in players:
                if player.get('player_id') == user_faceit_id:
                    return player.get('player_stats', {})
        
        return None
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        return None


def _format_teams_info(match_stats: Dict, user_faceit_id: str) -> List[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö —Å –∏–≥—Ä–æ–∫–∞–º–∏"""
    try:
        lines = []
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return ["‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"]
            
        round_stats = rounds[0]
        teams = round_stats.get('teams', [])
        
        for i, team in enumerate(teams):
            team_name = team.get('team_stats', {}).get('Team', f'–ö–æ–º–∞–Ω–¥–∞ {i+1}')
            lines.append(f"üë• <b>{team_name}:</b>")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∏–ª–ª–æ–≤
            players = team.get('players', [])
            sorted_players = sorted(
                players, 
                key=lambda p: int(p.get('player_stats', {}).get('Kills', '0')), 
                reverse=True
            )
            
            for player in sorted_players:
                nickname = player.get('nickname', 'Unknown')
                stats = player.get('player_stats', {})
                player_id = player.get('player_id', '')
                
                kills = stats.get('Kills', '0')
                deaths = stats.get('Deaths', '0')
                assists = stats.get('Assists', '0')
                adr = stats.get('ADR', '0')
                kast = stats.get('KAST', '0')
                hltv_rating = faceit_client.calculate_hltv_rating(stats)
                
                # –í—ã–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                if player_id == user_faceit_id:
                    player_line = f"<b>‚Ä¢ {nickname}</b> ({kills}-{deaths}-{assists}, ADR: {adr}, KAST: {kast}%, HLTV 2.1: {hltv_rating:.2f})"
                else:
                    player_line = f"‚Ä¢ {nickname} ({kills}-{deaths}-{assists}, ADR: {adr}, KAST: {kast}%, HLTV 2.1: {hltv_rating:.2f})"
                
                lines.append(player_line)
            
            lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        
        return lines

    except Exception as e:
        logger.error(f"Error formatting teams info: {e}")
        return ["‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö"]


def _create_match_keyboard(match_data: Dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–∞—Ç—á–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–∞ –Ω–∞ FACEIT
    match_id = match_data.get('match_id', '')
    if match_id:
        faceit_url = f"https://www.faceit.com/en/cs2/room/{match_id}"
        builder.button(text="üîó –°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á –Ω–∞ FACEIT", url=faceit_url)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    
    builder.adjust(1, 1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def _get_back_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
    )