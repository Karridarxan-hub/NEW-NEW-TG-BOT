from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, List, Optional, Any
import logging

from storage import storage
from faceit_client import faceit_client


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞
router = Router(name="last_match_handler")
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "last_match")
async def show_last_match(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ –∏–≥—Ä–æ–∫–∞"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º FACEIT ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        faceit_id = await storage.get_user_faceit_id(user_id)
        if not faceit_id:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å FACEIT –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=_get_back_keyboard()
            )
            await callback.answer()
            return

        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ...")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        history = await faceit_client.get_player_history(faceit_id, limit=1)
        if not history or not history.get('items'):
            await callback.message.edit_text(
                "‚ùå –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=_get_back_keyboard()
            )
            await callback.answer()
            return

        last_match = history['items'][0]
        match_id = last_match['match_id']

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
        match_stats = await faceit_client.get_match_stats(match_id)
        if not match_stats:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞.",
                reply_markup=_get_back_keyboard()
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–µ
        message_text = await _format_match_message(last_match, match_stats, faceit_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–∞—Ç—á
        keyboard = _create_match_keyboard(last_match)

        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Error in show_last_match: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ.",
            reply_markup=_get_back_keyboard()
        )
    
    await callback.answer()


async def _format_match_message(match_data: Dict, match_stats: Dict, user_faceit_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        match_result = match_data.get('results', {})
        winner = match_result.get('winner')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç
        teams = match_data.get('teams', {})
        team1_name = teams.get('faction1', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        team2_name = teams.get('faction2', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ match_stats –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        if team1_name == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' or team2_name == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞':
            try:
                rounds = match_stats.get('rounds', [])
                if rounds:
                    teams_data = rounds[0].get('teams', [])
                    if len(teams_data) >= 2:
                        team1_stats_name = teams_data[0].get('team_stats', {}).get('Team', '')
                        team2_stats_name = teams_data[1].get('team_stats', {}).get('Team', '')
                        if team1_stats_name and team1_name == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞':
                            team1_name = team1_stats_name
                        if team2_stats_name and team2_name == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞':
                            team2_name = team2_stats_name
            except Exception as e:
                logger.error(f"Error getting team names from match_stats: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—á—ë—Ç —Ä–∞—É–Ω–¥–æ–≤ –∏–∑ match_stats
        team1_score, team2_score = _get_round_scores(match_stats)
        if team1_score is None or team2_score is None:
            # Fallback –∫ —Å—á—ë—Ç—É –º–∞—Ç—á–µ–π –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—É–Ω–¥–∞—Ö
            team1_score = match_result.get('score', {}).get('faction1', 0)
            team2_score = match_result.get('score', {}).get('faction2', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–±–µ–¥–∞/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ)
        user_team_index = _get_user_team(match_stats, user_faceit_id)
        status_emoji = "üéÆ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        logger.error(f"VERSION 2.1: user_team_index={user_team_index}, team1_score={team1_score}, team2_score={team2_score}")
        logger.error(f"VERSION 2.1: team1_name={team1_name}, team2_name={team2_name}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—á–µ—Ç—É
        if user_team_index is not None and team1_score is not None and team2_score is not None:
            if user_team_index == 0:
                # –ò–≥—Ä–æ–∫ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
                status_emoji = "üèÜ" if team1_score > team2_score else "‚ùå"
                user_team = 'faction1'
                logger.error(f"VERSION 2.1: –ò–≥—Ä–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ 1, —Å—Ç–∞—Ç—É—Å: {status_emoji}")
            elif user_team_index == 1:
                # –ò–≥—Ä–æ–∫ –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥–µ
                status_emoji = "üèÜ" if team2_score > team1_score else "‚ùå"
                user_team = 'faction2'
                logger.error(f"VERSION 2.1: –ò–≥—Ä–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ 2, —Å—Ç–∞—Ç—É—Å: {status_emoji}")
            else:
                user_team = None
        else:
            user_team = None
            logger.error(f"VERSION 2.1: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞")

        # –ö–∞—Ä—Ç–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        map_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
        
        # –°–Ω–∞—á–∞–ª–∞ –∏–∑ voting
        voting = match_data.get('voting', {})
        if voting and 'map' in voting:
            if 'pick' in voting['map'] and voting['map']['pick']:
                map_name = voting['map']['pick'][0]
            elif 'name' in voting['map'] and voting['map']['name']:
                map_name = voting['map']['name']
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑ match_stats
        if map_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞":
            try:
                rounds = match_stats.get('rounds', [])
                if rounds:
                    round_stats = rounds[0].get('round_stats', {})
                    if 'Map' in round_stats and round_stats['Map']:
                        map_name = round_stats['Map']
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å de_ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if not map_name.startswith('de_') and map_name.lower() != 'unknown':
                            map_name = f"de_{map_name.lower()}"
            except Exception as e:
                logger.error(f"Error getting map name from match_stats: {e}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = _get_user_stats(match_stats, user_faceit_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –ø–µ—Ä–≤–æ–π
        if user_team_index == 0:
            # –ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞ - –ø–µ—Ä–≤–∞—è
            user_team_name = team1_name
            user_team_score = team1_score
            enemy_team_name = team2_name
            enemy_team_score = team2_score
        elif user_team_index == 1:
            # –ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞ - –≤—Ç–æ—Ä–∞—è
            user_team_name = team2_name
            user_team_score = team2_score
            enemy_team_name = team1_name
            enemy_team_score = team1_score
        else:
            # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            user_team_name = team1_name
            user_team_score = team1_score
            enemy_team_name = team2_name
            enemy_team_score = team2_score
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_lines = [
            f"{status_emoji} <b>{user_team_name}</b> {user_team_score} - {enemy_team_score} {enemy_team_name}",
            f"üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞:</b> {map_name}",
            "",
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
        ]

        if user_stats:
            kills = user_stats.get('Kills', '0')
            deaths = user_stats.get('Deaths', '0')
            assists = user_stats.get('Assists', '0')
            kd_ratio = user_stats.get('K/D Ratio', '0.00')
            kr_ratio = user_stats.get('K/R Ratio', '0.00')
            headshots = user_stats.get('Headshots', '0')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ö–µ–¥—à–æ—Ç–æ–≤
            try:
                kills_int = int(kills)
                hs_int = int(headshots)
                if kills_int > 0:
                    hs_percent = round((hs_int / kills_int) * 100, 1)
                    logger.error(f"VERSION 2.1: HS% —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {hs_int}/{kills_int} = {hs_percent}%")
                else:
                    hs_percent = 0
            except Exception as e:
                logger.error(f"VERSION 2.1: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ HS%: {e}")
                hs_percent = user_stats.get('HS %', '0')
                
            mvps = user_stats.get('MVPs', '0')
            triple_kills = user_stats.get('Triple Kills', '0')
            quadro_kills = user_stats.get('Quadro Kills', '0')
            penta_kills = user_stats.get('Penta Kills', '0')
            adr = user_stats.get('ADR', '0')
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message_lines.append(
                f"üî• <b>K-D-A:</b> {kills}-{deaths}-{assists} | <b>K/D:</b> {kd_ratio} | <b>ADR:</b> {adr}"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message_lines.append(
                f"üéØ <b>–•–µ–¥—à–æ—Ç—ã:</b> {headshots} ({hs_percent}%) | <b>K/R:</b> {kr_ratio} | <b>MVP:</b> {mvps}"
            )
            
            # –ú—É–ª—å—Ç–∏–∫–∏–ª–ª—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
            multikills = []
            if int(triple_kills) > 0:
                multikills.append(f"3K: {triple_kills}")
            if int(quadro_kills) > 0:
                multikills.append(f"4K: {quadro_kills}")  
            if int(penta_kills) > 0:
                multikills.append(f"5K: {penta_kills}")
                
            if multikills:
                message_lines.append(f"‚ö° <b>–ú—É–ª—å—Ç–∏–∫–∏–ª–ª—ã:</b> {' | '.join(multikills)}")
        else:
            message_lines.append("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        message_lines.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        teams_info = _format_teams_info(match_stats, user_faceit_id)
        message_lines.extend(teams_info)

        return "\n".join(message_lines)

    except Exception as e:
        logger.error(f"Error formatting match message: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–∞—Ç—á–µ"


def _get_user_team(match_stats: Dict, user_faceit_id: str) -> Optional[str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ –∏–≥—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        logger.error(f"VERSION 2.1: –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ {user_faceit_id}")
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return None
            
        round_stats = rounds[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
        teams = round_stats.get('teams', [])
        
        for i, team in enumerate(teams):
            team_name = team.get('team_stats', {}).get('Team', 'Unknown')
            players = team.get('players', [])
            logger.error(f"VERSION 2.1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É {i} ({team_name}) —Å {len(players)} –∏–≥—Ä–æ–∫–∞–º–∏")
            
            for player in players:
                player_id = player.get('player_id')
                player_nick = player.get('nickname', 'Unknown')
                logger.error(f"VERSION 2.1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–∞ {player_nick} (ID: {player_id})")
                
                if player_id == user_faceit_id:
                    logger.error(f"VERSION 2.1: –ù–ê–®–õ–ò –∏–≥—Ä–æ–∫–∞ {player_nick} –≤ –∫–æ–º–∞–Ω–¥–µ {team_name} (–∏–Ω–¥–µ–∫—Å {i})")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–º–∞–Ω–¥—ã (0 –∏–ª–∏ 1) –≤–º–µ—Å—Ç–æ team_id
                    return i
        
        logger.error(f"VERSION 2.1: –ò–≥—Ä–æ–∫ {user_faceit_id} –ù–ï –ù–ê–ô–î–ï–ù –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return None
    except Exception as e:
        logger.error(f"Error getting user team: {e}")
        return None


def _get_user_stats(match_stats: Dict, user_faceit_id: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Ç—á–∞"""
    try:
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return None
            
        round_stats = rounds[0]
        teams = round_stats.get('teams', [])
        
        for team in teams:
            players = team.get('players', [])
            for player in players:
                if player.get('player_id') == user_faceit_id:
                    return player.get('player_stats', {})
        
        return None
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        return None


def _format_teams_info(match_stats: Dict, user_faceit_id: str) -> List[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö —Å –∏–≥—Ä–æ–∫–∞–º–∏"""
    try:
        lines = []
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return ["‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"]
            
        round_stats = rounds[0]
        teams = round_stats.get('teams', [])
        
        for i, team in enumerate(teams):
            team_name = team.get('team_stats', {}).get('Team', f'–ö–æ–º–∞–Ω–¥–∞ {i+1}')
            lines.append(f"üë• <b>{team_name}:</b>")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∏–ª–ª–æ–≤
            players = team.get('players', [])
            sorted_players = sorted(
                players, 
                key=lambda p: int(p.get('player_stats', {}).get('Kills', '0')), 
                reverse=True
            )
            
            for player in sorted_players:
                nickname = player.get('nickname', 'Unknown')
                stats = player.get('player_stats', {})
                player_id = player.get('player_id', '')
                
                kills = stats.get('Kills', '0')
                deaths = stats.get('Deaths', '0')
                assists = stats.get('Assists', '0')
                adr = stats.get('ADR', '0')
                # –í—ã–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                if player_id == user_faceit_id:
                    player_line = f"<b>‚Ä¢ {nickname}</b> ({kills}-{deaths}-{assists}, ADR: {adr})"
                else:
                    player_line = f"‚Ä¢ {nickname} ({kills}-{deaths}-{assists}, ADR: {adr})"
                
                lines.append(player_line)
            
            lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        
        return lines

    except Exception as e:
        logger.error(f"Error formatting teams info: {e}")
        return ["‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö"]


def _create_match_keyboard(match_data: Dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–∞—Ç—á–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–∞ –Ω–∞ FACEIT
    match_id = match_data.get('match_id', '')
    if match_id:
        faceit_url = f"https://www.faceit.com/en/cs2/room/{match_id}"
        builder.button(text="üîó –°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á –Ω–∞ FACEIT", url=faceit_url)
    
    builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def _get_back_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    return None


def _get_round_scores(match_stats: Dict) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—á—ë—Ç —Ä–∞—É–Ω–¥–æ–≤ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞"""
    try:
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return None, None
            
        round_stats = rounds[0]
        teams = round_stats.get('teams', [])
        
        if len(teams) >= 2:
            team1_score = teams[0].get('team_stats', {}).get('Final Score', 0)
            team2_score = teams[1].get('team_stats', {}).get('Final Score', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—á—ë—Ç –≤–∞–ª–∏–¥–Ω—ã–π
            if isinstance(team1_score, (int, str)) and isinstance(team2_score, (int, str)):
                try:
                    return int(team1_score), int(team2_score)
                except ValueError:
                    pass
        
        return None, None
    except Exception as e:
        logger.error(f"Error getting round scores: {e}")
        return None, None


def _get_team_display_order(user_team, team1_name, team2_name, team1_score, team2_score):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ - –∫–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–≤–æ–π"""
    if user_team == 'faction1':
        return team1_name, team1_score, team2_name, team2_score
    elif user_team == 'faction2':
        return team2_name, team2_score, team1_name, team1_score
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
        return team1_name, team1_score, team2_name, team2_score