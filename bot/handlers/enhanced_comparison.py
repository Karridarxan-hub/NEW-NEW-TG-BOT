"""
–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

from typing import Dict, Any, List, Tuple
import logging

logger = logging.getLogger(__name__)


def get_indicator(value1: float, value2: float, higher_is_better: bool = True) -> Tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    Args:
        value1: –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        value2: –í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        higher_is_better: True –µ—Å–ª–∏ –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª—É—á—à–µ, False –µ—Å–ª–∏ –º–µ–Ω—å—à–µ–µ
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    if value1 == value2:
        return "‚û°Ô∏è", "‚û°Ô∏è"
    
    if higher_is_better:
        if value1 > value2:
            return "üìà", "üìâ"
        else:
            return "üìâ", "üìà"
    else:
        if value1 < value2:
            return "üìà", "üìâ"
        else:
            return "üìâ", "üìà"


def format_value_with_indicator(value: float, indicator: str, decimals: int = 1) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º"""
    if decimals == 0:
        return f"{indicator} <b>{int(value)}</b>"
    else:
        return f"{indicator} <b>{value:.{decimals}f}</b>"



def get_top_maps(player_stats: Dict[str, Any], limit: int = 3) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π
    
    Args:
        player_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç–æ–ø –∫–∞—Ä—Ç —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    map_statistics = player_stats.get('stats', {}).get('map_statistics', {})
    
    if not map_statistics:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π
    sorted_maps = sorted(
        map_statistics.items(),
        key=lambda x: x[1].get('matches', 0),
        reverse=True
    )[:limit]
    
    top_maps = []
    for map_name, map_data in sorted_maps:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å de_ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        display_name = map_name.replace('de_', '').capitalize()
        
        top_maps.append({
            'name': display_name,
            'matches': map_data.get('matches', 0),
            'winrate': map_data.get('winrate', 0),
            'kd_ratio': map_data.get('kd_ratio', 0),
            'adr': map_data.get('adr', 0),
            'rating': map_data.get('hltv_rating', 1.0)
        })
    
    return top_maps


def format_enhanced_comparison(player1_stats: Dict[str, Any], player2_stats: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    
    Args:
        player1_stats: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        player2_stats: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    p1_name = player1_stats.get('nickname', '–ò–≥—Ä–æ–∫ 1')
    p2_name = player2_stats.get('nickname', '–ò–≥—Ä–æ–∫ 2')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    p1_stats = player1_stats.get('stats', {}) if 'stats' in player1_stats else player1_stats
    p2_stats = player2_stats.get('stats', {}) if 'stats' in player2_stats else player2_stats
    
    text = f"‚öîÔ∏è <b>–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
    text += f"<b>{p1_name}</b> üÜö <b>{p2_name}</b>\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    text += "üéØ <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
    
    # –£—Ä–æ–≤–µ–Ω—å
    level1 = p1_stats.get('level', p1_stats.get('skill_level', 0))
    level2 = p2_stats.get('level', p2_stats.get('skill_level', 0))
    text += f"–£—Ä–æ–≤–µ–Ω—å: <b>{level1}</b> | <b>{level2}</b>\n"
    
    # ELO
    elo1 = p1_stats.get('elo', p1_stats.get('faceit_elo', 0))
    elo2 = p2_stats.get('elo', p2_stats.get('faceit_elo', 0))
    text += f"ELO: <b>{elo1}</b> | <b>{elo2}</b>\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π
    text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π:</b>\n"
    
    # –ú–∞—Ç—á–∏
    matches1 = p1_stats.get('matches', 0)
    matches2 = p2_stats.get('matches', 0)
    text += f"–ú–∞—Ç—á–∏: <b>{matches1}</b> | <b>{matches2}</b>\n"
    
    # –ü–æ–±–µ–¥—ã (–±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
    wins1 = p1_stats.get('wins', 0)
    wins2 = p2_stats.get('wins', 0)
    text += f"–ü–æ–±–µ–¥—ã: <b>{wins1}</b> | <b>{wins2}</b>\n"
    
    # –í–∏–Ω—Ä–µ–π—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    winrate1 = p1_stats.get('winrate', 0)
    winrate2 = p2_stats.get('winrate', 0)
    ind1, ind2 = get_indicator(winrate1, winrate2)
    text += f"–í–∏–Ω—Ä–µ–π—Ç: {format_value_with_indicator(winrate1, ind1)}% | {format_value_with_indicator(winrate2, ind2)}%\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    text += "üíÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
    
    # K/D —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    kd1 = p1_stats.get('kd_ratio', p1_stats.get('average_kd', 0))
    kd2 = p2_stats.get('kd_ratio', p2_stats.get('average_kd', 0))
    ind1, ind2 = get_indicator(kd1, kd2)
    text += f"K/D: {format_value_with_indicator(kd1, ind1, 2)} | {format_value_with_indicator(kd2, ind2, 2)}\n"
    
    # K/R —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    kpr1 = p1_stats.get('kpr', p1_stats.get('average_kpr', 0))
    kpr2 = p2_stats.get('kpr', p2_stats.get('average_kpr', 0))
    if kpr1 > 0 and kpr2 > 0:
        ind1, ind2 = get_indicator(kpr1, kpr2)
        text += f"K/R: {format_value_with_indicator(kpr1, ind1, 2)} | {format_value_with_indicator(kpr2, ind2, 2)}\n"
    
    # Headshots —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    hs1 = p1_stats.get('avg_headshot_percentage', p1_stats.get('headshots_avg', 0))
    hs2 = p2_stats.get('avg_headshot_percentage', p2_stats.get('headshots_avg', 0))
    ind1, ind2 = get_indicator(hs1, hs2)
    text += f"HS%: {format_value_with_indicator(hs1, ind1)}% | {format_value_with_indicator(hs2, ind2)}%\n\n"
    
    # –£—Ä–æ–Ω –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    text += "üí• <b>–£—Ä–æ–Ω –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
    
    # ADR
    adr1 = p1_stats.get('adr', 0)
    adr2 = p2_stats.get('adr', 0)
    ind1, ind2 = get_indicator(adr1, adr2)
    text += f"ADR: {format_value_with_indicator(adr1, ind1)} | {format_value_with_indicator(adr2, ind2)}\n"
    
    # –û—Å–ª–µ–ø–ª–µ–Ω–∏—è –∑–∞ –∏–≥—Ä—É
    flash1 = p1_stats.get('avg_flash_assists_per_match', 0)
    flash2 = p2_stats.get('avg_flash_assists_per_match', 0)
    ind1, ind2 = get_indicator(flash1, flash2)
    text += f"–û—Å–ª–µ–ø–ª–µ–Ω–∏–π –∑–∞ –∏–≥—Ä—É: {format_value_with_indicator(flash1, ind1)} | {format_value_with_indicator(flash2, ind2)}\n"
    
    # –£—Ä–æ–Ω –≥—Ä–∞–Ω–∞—Ç–∞–º–∏ –∑–∞ –∏–≥—Ä—É
    grenade1 = p1_stats.get('avg_grenade_damage_per_match', 0)
    grenade2 = p2_stats.get('avg_grenade_damage_per_match', 0)
    ind1, ind2 = get_indicator(grenade1, grenade2)
    text += f"–£—Ä–æ–Ω –≥—Ä–∞–Ω–∞—Ç–∞–º–∏ –∑–∞ –∏–≥—Ä—É: {format_value_with_indicator(grenade1, ind1)} | {format_value_with_indicator(grenade2, ind2)}\n"
    
    # –£—Ä–æ–Ω –º–æ–ª–æ—Ç–æ–≤—ã—Ö –∑–∞ –∏–≥—Ä—É
    molotov1 = p1_stats.get('avg_molotov_damage_per_match', 0)
    molotov2 = p2_stats.get('avg_molotov_damage_per_match', 0)
    ind1, ind2 = get_indicator(molotov1, molotov2)
    text += f"–£—Ä–æ–Ω –º–æ–ª–æ—Ç–æ–≤—ã—Ö –∑–∞ –∏–≥—Ä—É: {format_value_with_indicator(molotov1, ind1)} | {format_value_with_indicator(molotov2, ind2)}\n\n"
    
    # –°–µ—Ä–∏–∏ —É–±–∏–π—Å—Ç–≤
    text += "üî• <b>–°–µ—Ä–∏–∏ —É–±–∏–π—Å—Ç–≤:</b>\n"
    
    # –≠–π—Å—ã
    aces1 = p1_stats.get('total_aces', 0)
    aces2 = p2_stats.get('total_aces', 0)
    ind1, ind2 = get_indicator(aces1, aces2)
    text += f"–≠–π—Å–æ–≤ (5–∫): {format_value_with_indicator(aces1, ind1, 0)} | {format_value_with_indicator(aces2, ind2, 0)}\n"
    
    # 4–∫ —É–±–∏–π—Å—Ç–≤
    quadro1 = p1_stats.get('total_quadro_kills', 0)
    quadro2 = p2_stats.get('total_quadro_kills', 0)
    ind1, ind2 = get_indicator(quadro1, quadro2)
    text += f"4–∫ —É–±–∏–π—Å—Ç–≤: {format_value_with_indicator(quadro1, ind1, 0)} | {format_value_with_indicator(quadro2, ind2, 0)}\n"
    
    # 3–∫ —É–±–∏–π—Å—Ç–≤
    triple1 = p1_stats.get('total_triple_kills', 0)
    triple2 = p2_stats.get('total_triple_kills', 0)
    ind1, ind2 = get_indicator(triple1, triple2)
    text += f"3–∫ —É–±–∏–π—Å—Ç–≤: {format_value_with_indicator(triple1, ind1, 0)} | {format_value_with_indicator(triple2, ind2, 0)}\n"
    
    # –ú—É–ª—å—Ç–∏-–∫–∏–ª–ª –∑–∞ –º–∞—Ç—á
    multi1 = p1_stats.get('multi_kills_per_match', 0)
    multi2 = p2_stats.get('multi_kills_per_match', 0)
    ind1, ind2 = get_indicator(multi1, multi2)
    text += f"–ú—É–ª—å—Ç–∏-–∫–∏–ª–ª –∑–∞ –º–∞—Ç—á (3+): {format_value_with_indicator(multi1, ind1, 3)} | {format_value_with_indicator(multi2, ind2, 3)}\n\n"
    
    # –ö–ª–∞—Ç—á–∏
    text += "üèÜ <b>–ö–ª–∞—Ç—á–∏:</b>\n"
    
    # 1v1
    clutch1v1_total1 = p1_stats.get('clutch_1v1_total', 0)
    clutch1v1_pct1 = p1_stats.get('clutch_1v1_percentage', 0)
    clutch1v1_total2 = p2_stats.get('clutch_1v1_total', 0)
    clutch1v1_pct2 = p2_stats.get('clutch_1v1_percentage', 0)
    ind1, ind2 = get_indicator(clutch1v1_pct1, clutch1v1_pct2)
    text += f"1v1: {format_value_with_indicator(clutch1v1_total1, ind1, 0)} ({clutch1v1_pct1:.0f}% –ø–æ–±–µ–¥) | {format_value_with_indicator(clutch1v1_total2, ind2, 0)} ({clutch1v1_pct2:.0f}% –ø–æ–±–µ–¥)\n"
    
    # 1v2
    clutch1v2_total1 = p1_stats.get('clutch_1v2_total', 0)
    clutch1v2_pct1 = p1_stats.get('clutch_1v2_percentage', 0)
    clutch1v2_total2 = p2_stats.get('clutch_1v2_total', 0)
    clutch1v2_pct2 = p2_stats.get('clutch_1v2_percentage', 0)
    ind1, ind2 = get_indicator(clutch1v2_pct1, clutch1v2_pct2)
    text += f"1v2: {format_value_with_indicator(clutch1v2_total1, ind1, 0)} ({clutch1v2_pct1:.0f}% –ø–æ–±–µ–¥) | {format_value_with_indicator(clutch1v2_total2, ind2, 0)} ({clutch1v2_pct2:.0f}% –ø–æ–±–µ–¥)\n\n"
    
    
    return text


async def get_last_matches_comparison(player1_id: str, player2_id: str, matches_count: int = 10) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –º–∞—Ç—á–µ–π –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
    
    Args:
        player1_id: ID –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        player2_id: ID –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        matches_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π
    """
    from faceit_client import faceit_client
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        p1_history = await faceit_client.get_player_history(player1_id, limit=matches_count)
        p2_history = await faceit_client.get_player_history(player2_id, limit=matches_count)
        
        if not p1_history or not p2_history:
            return {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—á–∏
        p1_stats = await analyze_matches_stats(p1_history.get('items', []), player1_id)
        p2_stats = await analyze_matches_stats(p2_history.get('items', []), player2_id)
        
        return {
            'player1': p1_stats,
            'player2': p2_stats
        }
        
    except Exception as e:
        logger.error(f"Error getting last matches comparison: {e}")
        return {}


async def analyze_matches_stats(matches: List[Dict], player_id: str) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞
    
    Args:
        matches: –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
        player_id: ID –∏–≥—Ä–æ–∫–∞
    
    Returns:
        –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π
    """
    from faceit_client import faceit_client
    
    stats = {
        'total_matches': len(matches),
        'wins': 0,
        'losses': 0,
        'total_kills': 0,
        'total_deaths': 0,
        'total_assists': 0,
        'total_adr': 0,
        'total_rating': 0,
        'matches_with_stats': 0
    }
    
    for match in matches:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        player_won = faceit_client._determine_player_result(match, player_id)
        if player_won is True:
            stats['wins'] += 1
        elif player_won is False:
            stats['losses'] += 1
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
        match_id = match.get('match_id')
        if match_id:
            match_stats = await faceit_client.get_player_stats_from_match(match_id, player_id)
            if match_stats:
                stats['total_kills'] += match_stats.get('kills', 0)
                stats['total_deaths'] += match_stats.get('deaths', 0)
                stats['total_assists'] += match_stats.get('assists', 0)
                stats['total_adr'] += match_stats.get('adr', 0)
                stats['total_rating'] += faceit_client.calculate_hltv_rating(match_stats)  # –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞
                stats['matches_with_stats'] += 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ
    if stats['matches_with_stats'] > 0:
        stats['avg_kills'] = stats['total_kills'] / stats['matches_with_stats']
        stats['avg_deaths'] = stats['total_deaths'] / stats['matches_with_stats']
        stats['avg_assists'] = stats['total_assists'] / stats['matches_with_stats']
        stats['avg_adr'] = stats['total_adr'] / stats['matches_with_stats']
        stats['avg_rating'] = stats['total_rating'] / stats['matches_with_stats']
        stats['kd_ratio'] = stats['total_kills'] / max(stats['total_deaths'], 1)
    
    stats['winrate'] = (stats['wins'] / stats['total_matches'] * 100) if stats['total_matches'] > 0 else 0
    
    return stats