#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞
"""
import asyncio
from aiogram.types import Message, User, Chat, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from bot.handlers.new_match_history_handler import (
    ask_custom_history_count, 
    process_custom_history_count,
    NewMatchHistoryStates
)
from bot.handlers.form_analysis_handler import (
    ask_custom_form_count,
    process_custom_form_count,
    FormAnalysisStates
)

def create_fake_user():
    return User(id=12345, is_bot=False, first_name="Test", username="testuser")

def create_fake_chat():
    return Chat(id=12345, type="private")

def create_fake_message(text="15"):
    user = create_fake_user()
    chat = create_fake_chat()
    return Message(
        message_id=1,
        date=1234567890,
        chat=chat,
        from_user=user,
        content_type="text",
        text=text
    )

def create_fake_callback(data="history_custom"):
    user = create_fake_user()
    chat = create_fake_chat()
    message = create_fake_message()
    message.edit_text = lambda text, **kwargs: print(f"Edit: {text}")
    
    callback = CallbackQuery(
        id="test_callback",
        from_user=user,
        chat_instance="test",
        data=data,
        message=message
    )
    callback.answer = lambda text="": asyncio.sleep(0)
    return callback

async def test_custom_input_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞...")
    
    storage = MemoryStorage()
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    valid_inputs = ["15", "25", "50", "1", "100"]
    for input_val in valid_inputs:
        print(f"  ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {input_val}")
        message = create_fake_message(input_val)
        message.answer = lambda text, **kwargs: print(f"    Answer: {text}")
        
        state = FSMContext(storage=storage, key=12345)
        await state.set_state(NewMatchHistoryStates.waiting_for_custom_count)
        
        try:
            # –ó–¥–µ—Å—å –±—ã –≤—ã–∑—ã–≤–∞–ª—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –Ω–æ –Ω–∞–º –Ω—É–∂–µ–Ω –º–æ–∫–∏–Ω–≥
            match_count = int(input_val)
            if 1 <= match_count <= 100:
                print(f"    ‚úÖ {input_val} - –≤–∞–ª–∏–¥–Ω–æ")
            else:
                print(f"    ‚ùå {input_val} - –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except ValueError:
            print(f"    ‚ùå {input_val} - –Ω–µ —á–∏—Å–ª–æ")
    
    # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    invalid_inputs = ["0", "101", "-5", "abc", "15.5", ""]
    for input_val in invalid_inputs:
        print(f"  ‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {input_val}")
        try:
            match_count = int(input_val) if input_val else 0
            if match_count < 1 or match_count > 100:
                print(f"    ‚ùå {input_val} - –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ)")
            else:
                print(f"    ‚ö†Ô∏è {input_val} - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ")
        except ValueError:
            print(f"    ‚ùå {input_val} - –Ω–µ —á–∏—Å–ª–æ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ)")

async def test_callback_handlers():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫...")
    
    # –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
    print("  üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é' –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏")
    callback = create_fake_callback("history_custom")
    storage = MemoryStorage()
    state = FSMContext(storage=storage, key=12345)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
    print("    ‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_custom_count")
    
    # –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã
    print("  üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É '–°–≤–æ–π –ø–µ—Ä–∏–æ–¥' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    callback = create_fake_callback("form_custom")
    print("    ‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_custom_count")

def test_keyboard_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    from keyboards import get_match_history_keyboard, get_form_analysis_keyboard
    
    # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
    history_kb = get_match_history_keyboard()
    buttons = []
    for row in history_kb.inline_keyboard:
        for button in row:
            buttons.append(button.text)
    
    print("  üìù –ö–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π:")
    for btn in buttons:
        print(f"    - {btn}")
    
    if "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" in buttons:
        print("    ‚úÖ –ö–Ω–æ–ø–∫–∞ '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        print("    ‚ùå –ö–Ω–æ–ø–∫–∞ '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã
    form_kb = get_form_analysis_keyboard()
    buttons = []
    for row in form_kb.inline_keyboard:
        for button in row:
            buttons.append(button.text)
    
    print("  üìà –ö–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã:")
    for btn in buttons:
        print(f"    - {btn}")
    
    if "‚úèÔ∏è –°–≤–æ–π –ø–µ—Ä–∏–æ–¥" in buttons:
        print("    ‚úÖ –ö–Ω–æ–ø–∫–∞ '–°–≤–æ–π –ø–µ—Ä–∏–æ–¥' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        print("    ‚ùå –ö–Ω–æ–ø–∫–∞ '–°–≤–æ–π –ø–µ—Ä–∏–æ–¥' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞...\n")
    
    # –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    test_keyboard_structure()
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    await test_custom_input_validation()
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    await test_callback_handlers()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram")
    print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'üìù –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π'")
    print("3. –ù–∞–∂–º–∏—Ç–µ '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'")
    print("4. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
    print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π")
    print("6. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è 'üìà –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã' -> '‚úèÔ∏è –°–≤–æ–π –ø–µ—Ä–∏–æ–¥'")

if __name__ == "__main__":
    asyncio.run(main())