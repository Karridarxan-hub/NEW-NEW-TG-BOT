# Production Nginx Configuration for FACEIT CS2 Bot

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging Format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # Production Logging
    access_log /var/log/nginx/access.log main buffer=16k flush=2m;
    error_log /var/log/nginx/error.log warn;

    # Performance Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer Settings
    client_max_body_size 10m;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        application/rss+xml
        image/svg+xml;

    # Rate Limiting - более строгие лимиты для продакшена
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=1r/m;
    limit_req_zone $binary_remote_addr zone=docs:10m rate=1r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Upstream Configuration
    upstream faceit_bot {
        server faceit-bot:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Map для определения реального IP
    map $http_x_forwarded_for $real_ip {
        ~^([0-9.]+) $1;
        default $remote_addr;
    }

    # Security Headers Map
    map $sent_http_content_type $security_headers {
        "~*text/html" "nosniff";
    }

    # HTTP Server - только редирект и health check
    server {
        listen 80 default_server;
        server_name _;
        
        # Ограничиваем соединения
        limit_conn conn_limit_per_ip 20;
        
        # Только health check доступен по HTTP
        location = /health {
            access_log off;
            proxy_pass http://faceit_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
        }
        
        # Редирект всех остальных запросов на HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS Server - основной сервер
    server {
        listen 443 ssl http2 default_server;
        server_name your-domain.com;  # Замените на ваш домен

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        
        # Modern SSL Configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # SSL Optimizations
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        
        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/nginx/ssl/chain.pem;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https:; style-src 'self' 'unsafe-inline' https:; font-src 'self' https:; img-src 'self' data: https:; connect-src 'self' https:;" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=()" always;

        # Connection Limits
        limit_conn conn_limit_per_ip 50;

        # API Endpoints - основные лимиты
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            # Дополнительные security проверки
            if ($request_method !~ ^(GET|POST)$ ) {
                return 405;
            }
            
            proxy_pass http://faceit_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            
            # Caching для некоторых API endpoints
            proxy_cache_valid 200 302 1m;
            proxy_cache_valid 404 1m;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # Health Check - без ограничений для мониторинга
        location = /health {
            access_log off;
            
            proxy_pass http://faceit_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
            
            # Быстрые таймауты для health check
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Webhook Endpoints - строгие лимиты
        location /webhook/ {
            limit_req zone=webhook burst=2 nodelay;
            
            # Только POST запросы для webhook'ов
            if ($request_method != POST) {
                return 405;
            }
            
            proxy_pass http://faceit_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Отключаем кэширование
            proxy_cache_bypass 1;
            proxy_no_cache 1;
            
            # Увеличенный таймаут для webhook обработки
            proxy_read_timeout 30s;
        }

        # API Documentation - ограниченный доступ
        location ~ ^/(docs|redoc)$ {
            limit_req zone=docs burst=5 nodelay;
            
            # Можно ограничить доступ по IP для продакшена
            # allow 192.168.1.0/24;
            # deny all;
            
            proxy_pass http://faceit_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Кэшируем документацию
            proxy_cache_valid 200 1h;
        }

        # OpenAPI Schema
        location = /openapi.json {
            limit_req zone=docs burst=2 nodelay;
            
            proxy_pass http://faceit_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
            
            # Кэшируем схему
            proxy_cache_valid 200 1h;
            
            # Добавляем CORS headers для API schema
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept" always;
        }

        # Metrics Endpoint - только для мониторинга
        location = /metrics {
            # Строгое ограничение доступа
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            # Добавьте IP адреса ваших мониторинговых систем
            # allow your.monitoring.ip;
            deny all;
            
            access_log off;
            
            proxy_pass http://faceit_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
            
            # Быстрые таймауты
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Root endpoint
        location = / {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://faceit_bot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_cache_valid 200 5m;
        }

        # Блокировка подозрительных URL
        location ~* \.(git|env|log|sql|bak|backup)$ {
            deny all;
            return 404;
        }
        
        location ~* /\. {
            deny all;
            return 404;
        }

        # Custom Error Pages
        error_page 400 /error/400.json;
        error_page 401 /error/401.json;
        error_page 403 /error/403.json;
        error_page 404 /error/404.json;
        error_page 405 /error/405.json;
        error_page 429 /error/429.json;
        error_page 500 502 503 504 /error/5xx.json;
        
        location ^~ /error/ {
            internal;
            root /usr/share/nginx/html;
            
            location = /error/400.json {
                return 400 '{"error": "Bad Request", "code": 400}';
                add_header Content-Type application/json always;
            }
            
            location = /error/401.json {
                return 401 '{"error": "Unauthorized", "code": 401}';
                add_header Content-Type application/json always;
            }
            
            location = /error/403.json {
                return 403 '{"error": "Forbidden", "code": 403}';
                add_header Content-Type application/json always;
            }
            
            location = /error/404.json {
                return 404 '{"error": "Not Found", "code": 404}';
                add_header Content-Type application/json always;
            }
            
            location = /error/405.json {
                return 405 '{"error": "Method Not Allowed", "code": 405}';
                add_header Content-Type application/json always;
            }
            
            location = /error/429.json {
                return 429 '{"error": "Too Many Requests", "code": 429, "retry_after": 60}';
                add_header Content-Type application/json always;
                add_header Retry-After 60 always;
            }
            
            location = /error/5xx.json {
                return 500 '{"error": "Internal Server Error", "code": 500}';
                add_header Content-Type application/json always;
            }
        }
    }

    # Дополнительный сервер блок для отклонения неизвестных хостов
    server {
        listen 80;
        listen 443 ssl http2;
        server_name _;
        
        # Фейковые SSL сертификаты для неизвестных хостов
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        
        return 444;  # Закрываем соединение без ответа
    }
}