from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards import *
from faceit_client import faceit_client
from storage import storage
from match_handlers import format_match_status, calculate_player_stats_from_match


class HistoryStates(StatesGroup):
    waiting_for_custom_count = State()


router = Router()


@router.callback_query(F.data == "match_history")
async def match_history_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
    await callback.message.edit_text(
        "üìù –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_match_history_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("history_"))
async def show_match_history(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π"""
    user_id = callback.from_user.id
    faceit_id = storage.get_user_faceit_id(user_id)
    
    if not faceit_id:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_back_to_main_keyboard()
        )
        return
    
    action = callback.data.split("_")[1]
    
    if action == "custom":
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π (–æ—Ç 1 –¥–æ 100):",
            reply_markup=get_back_keyboard("match_history")
        )
        await state.set_state(HistoryStates.waiting_for_custom_count)
        await callback.answer()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
    match_counts = {"5": 5, "10": 10, "30": 30}
    match_count = match_counts.get(action, 10)
    
    await process_match_history_request(callback, faceit_id, match_count)


@router.message(HistoryStates.waiting_for_custom_count)
async def process_custom_match_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π"""
    try:
        count = int(message.text.strip())
        if count < 1 or count > 100:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        user_id = message.from_user.id
        faceit_id = storage.get_user_faceit_id(user_id)
        
        if not faceit_id:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_back_to_main_keyboard()
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class FakeCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user
            
            async def answer(self):
                """–§–∏–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
                return None
        
        fake_callback = FakeCallback(message)
        await process_match_history_request(fake_callback, faceit_id, count)
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:")


async def process_match_history_request(callback, faceit_id: str, match_count: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
    matches_data = await faceit_client.get_player_matches(faceit_id, limit=match_count)
    
    if not matches_data or not matches_data.get('items'):
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard("match_history")
        )
        return
    
    matches = matches_data['items']
    
    if not matches:
        await callback.message.edit_text(
            "‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_back_keyboard("match_history")
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
    processed_matches = []
    
    for i, match in enumerate(matches):
        if i >= match_count:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
            break
            
        try:
            match_id = match['match_id']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
            match_details = await faceit_client.get_match_details(match_id)
            match_stats = await faceit_client.get_match_stats(match_id)
            
            if not match_details or not match_stats:
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
            processed_match = await process_single_match(match_details, match_stats, faceit_id)
            
            if processed_match:
                processed_matches.append(processed_match)
                
        except Exception as e:
            print(f"Error processing match {match.get('match_id', 'unknown')}: {e}")
            continue
    
    if not processed_matches:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Ç—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard("match_history")
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    history_text = f"üìù **–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(processed_matches)})\n\n"
    
    for i, match in enumerate(processed_matches, 1):
        status_emoji = format_match_status(match['status'])
        result_emoji = "üèÜ" if match['won'] else "üíÄ"
        
        history_text += f"**{i}.** {status_emoji} {result_emoji} {match['team_scores']}\n"
        history_text += f"üó∫Ô∏è {match['map']} | [FACEIT]({match['faceit_url']})\n"
        history_text += f"üíÄ {match['stats']['kills']}/{match['stats']['deaths']}/{match['stats']['assists']} | "
        history_text += f"K/D: {match['stats']['kd_ratio']} | ADR: {match['stats']['adr']} | "
        history_text += f"HLTV: {match['stats']['hltv_rating']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_matches = len(processed_matches)
    wins = sum(1 for match in processed_matches if match['won'])
    winrate = round((wins / total_matches) * 100, 1) if total_matches > 0 else 0
    
    avg_kills = round(sum(match['stats']['kills'] for match in processed_matches) / total_matches, 1)
    avg_deaths = round(sum(match['stats']['deaths'] for match in processed_matches) / total_matches, 1)
    avg_assists = round(sum(match['stats']['assists'] for match in processed_matches) / total_matches, 1)
    avg_kd = round(sum(match['stats']['kd_ratio'] for match in processed_matches) / total_matches, 2)
    avg_adr = round(sum(match['stats']['adr'] for match in processed_matches) / total_matches, 1)
    avg_hltv = round(sum(match['stats']['hltv_rating'] for match in processed_matches) / total_matches, 2)
    
    summary_text = f"""üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üéÆ **–ú–∞—Ç—á–∏:** {total_matches}
üèÜ **–ü–æ–±–µ–¥—ã:** {wins} ({winrate}%)
üíÄ **–°—Ä–µ–¥–Ω–∏–µ K/D/A:** {avg_kills}/{avg_deaths}/{avg_assists}
‚öîÔ∏è **–°—Ä–µ–¥–Ω–∏–π K/D:** {avg_kd}
üí• **–°—Ä–µ–¥–Ω–∏–π ADR:** {avg_adr}
üéØ **–°—Ä–µ–¥–Ω–∏–π HLTV:** {avg_hltv}"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(history_text) > 3500:
        await callback.message.edit_text(
            history_text[:3500] + "...",
            reply_markup=get_back_keyboard("match_history"),
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        
        await callback.message.answer(
            summary_text,
            reply_markup=get_back_keyboard("match_history"),
            parse_mode="Markdown"
        )
    else:
        full_text = history_text + summary_text
        await callback.message.edit_text(
            full_text,
            reply_markup=get_back_keyboard("match_history"),
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    
    await callback.answer()


async def process_single_match(match_details: dict, match_stats: dict, player_faceit_id: str) -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –º–∞—Ç—á"""
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
        match_id = match_details['match_id']
        status = match_details.get('status', 'unknown')
        map_name = match_details.get('voting', {}).get('map', {}).get('pick', ['Unknown'])[0]
        
        # –ö–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç
        teams = match_details.get('teams', {})
        team1 = teams.get('faction1', {})
        team2 = teams.get('faction2', {})
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ FACEIT
        faceit_url = f"https://www.faceit.com/en/csgo/room/{match_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return None
        
        round_stats = rounds[0]
        teams_stats = round_stats.get('teams', [])
        
        player_stats = None
        player_team_stats = None
        enemy_team_stats = None
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        for team_stats in teams_stats:
            for player in team_stats.get('players', []):
                if player.get('player_id') == player_faceit_id:
                    player_stats = player
                    player_team_stats = team_stats
                    enemy_team_stats = next(
                        (team for team in teams_stats if team != team_stats), 
                        None
                    )
                    break
            if player_stats:
                break
        
        if not player_stats:
            return None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        calculated_stats = calculate_player_stats_from_match(player_stats)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        player_team_score = player_team_stats.get('stats', {}).get('Final Score', '0')
        enemy_team_score = enemy_team_stats.get('stats', {}).get('Final Score', '0') if enemy_team_stats else '0'
        
        try:
            won = int(player_team_score) > int(enemy_team_score)
        except:
            won = False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥
        team1_name = team1.get('name', 'Team 1')[:10]  # –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        team2_name = team2.get('name', 'Team 2')[:10]
        team_scores = f"{team1_name} {player_team_score}:{enemy_team_score} {team2_name}"
        
        return {
            'match_id': match_id,
            'status': status,
            'map': map_name,
            'won': won,
            'team_scores': team_scores,
            'faceit_url': faceit_url,
            'stats': calculated_stats
        }
        
    except Exception as e:
        print(f"Error processing single match: {e}")
        return None