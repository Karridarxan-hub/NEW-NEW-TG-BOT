import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import uvicorn
import hashlib
import hmac
from contextlib import asynccontextmanager

from config import settings
from storage import storage, init_storage, cleanup_storage, cleanup_storage_task
from faceit_client import faceit_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def mask_sensitive_data(data: str, show_chars: int = 4) -> str:
    """–ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–æ–≤"""
    if len(data) <= show_chars * 2:
        return "*" * len(data)
    return data[:show_chars] + "*" * (len(data) - show_chars * 2) + data[-show_chars:]

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.bot_token)
dp = Dispatcher(storage=MemoryStorage())

def setup_routers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –º–æ–¥—É–ª–µ–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        from bot.handlers import main_router, stats_router, match_router, profile_router, settings_router, match_history_router, form_analysis_router, last_match_router, current_match_router, comparison_router, help_router
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        dp.include_router(main_router)
        dp.include_router(stats_router)
        dp.include_router(match_router)
        dp.include_router(profile_router)
        dp.include_router(match_history_router)
        dp.include_router(form_analysis_router)
        dp.include_router(last_match_router)
        dp.include_router(current_match_router)
        dp.include_router(comparison_router)
        dp.include_router(help_router)
        dp.include_router(settings_router)
        
        logger.info("‚úÖ –†–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")
        raise

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–ø—É—Å–∫
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ FACEIT CS2 –±–æ—Ç–∞...")
    logger.info(f"ü§ñ Bot Token: {mask_sensitive_data(settings.bot_token)}")
    logger.info(f"üîë FACEIT API Key: {mask_sensitive_data(settings.faceit_api_key)}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤
    setup_routers()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await init_storage()
        logger.info("‚úÖ Database connections established")
    except Exception as e:
        logger.error(f"‚ùå Failed to connect to databases: {e}")
        raise
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    cleanup_task = asyncio.create_task(cleanup_storage_task())
    polling_task = asyncio.create_task(start_polling())
    match_monitor_task = asyncio.create_task(match_monitoring_task())
    
    try:
        yield
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        cleanup_task.cancel()
        polling_task.cancel()
        match_monitor_task.cancel()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
        await cleanup_storage()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        await asyncio.gather(cleanup_task, polling_task, match_monitor_task, return_exceptions=True)

app = FastAPI(
    title="FACEIT CS2 Bot API",
    description="API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ CS2 —Å FACEIT",
    version="1.1.0",
    lifespan=lifespan
)

# API endpoints
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "FACEIT CS2 Bot API",
        "version": "1.1.0",
        "status": "active",
        "endpoints": {
            "health": "/health",
            "stats": "/api/stats",
            "player_search": "/api/player/search/{nickname}",
            "player_stats": "/api/player/{player_id}/stats"
        }
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FACEIT API
        test_response = await faceit_client._make_request("/players", {"nickname": "test", "game": "cs2"})
        faceit_status = "ok" if test_response or True else "error"  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º 404 –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_stats = await storage.get_stats()
        
        return {
            "status": "healthy",
            "timestamp": await storage.get_current_time(),
            "services": {
                "bot": "active",
                "api": "active", 
                "storage": "active",
                "postgres": "active",
                "redis": "active",
                "faceit_api": faceit_status
            },
            "metrics": db_stats
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "error": str(e),
                "timestamp": await storage.get_current_time()
            }
        )

@app.get("/api/player/search/{nickname}")
async def search_player(nickname: str):
    """–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
        if not nickname or len(nickname) < 2 or len(nickname) > 30:
            return JSONResponse(
                status_code=400,
                content={"error": "Nickname must be between 2 and 30 characters"}
            )
        
        # –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
        player_data = await faceit_client.find_player_by_nickname(nickname)
        
        if not player_data:
            return JSONResponse(
                status_code=404,
                content={"error": f"Player '{nickname}' not found"}
            )
        
        return {
            "player_id": player_data.get("player_id"),
            "nickname": player_data.get("nickname"),
            "avatar": player_data.get("avatar"),
            "country": player_data.get("country"),
            "games": player_data.get("games", {}),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Error searching player {nickname}: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": "Internal server error"}
        )

@app.get("/api/player/{player_id}/stats")
async def get_player_stats(player_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è player_id
        if not player_id or len(player_id) < 10:
            return JSONResponse(
                status_code=400,
                content={"error": "Invalid player_id format"}
            )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = await faceit_client.get_player_stats(player_id)
        
        if not stats:
            return JSONResponse(
                status_code=404,
                content={"error": f"Stats for player '{player_id}' not found"}
            )
        
        return {
            "player_id": player_id,
            "stats": stats,
            "timestamp": await storage.get_current_time()
        }
        
    except Exception as e:
        logger.error(f"Error getting stats for player {player_id}: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": "Internal server error"}
        )

@app.get("/api/stats")
async def get_bot_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    db_stats = await storage.get_stats()
    return {
        **db_stats,
        "uptime": await storage.get_current_time(),
        "version": "1.2.0"
    }

@app.post("/webhook/faceit")
async def faceit_webhook(request: Request, data: dict):
    """Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç FACEIT"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook (–±–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
        await verify_webhook_signature(request, data)
        logger.info(f"Received FACEIT webhook: {data.get('event', 'unknown')}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        event_type = data.get("event")
        
        if event_type == "match_status_finished":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
            match_id = data.get("payload", {}).get("id")
            if match_id:
                await process_finished_match(match_id)
        
        return {"status": "received"}
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": "Webhook processing failed"}
        )

async def process_finished_match(match_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        logger.info(f"Processing finished match: {match_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞
        match_details = await faceit_client.get_match_details(match_id)
        if not match_details:
            logger.warning(f"No match details found for match {match_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        match_stats = await faceit_client.get_match_stats(match_id)
        if not match_stats:
            logger.warning(f"No match stats found for match {match_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –º–∞—Ç—á–µ
        teams = match_details.get("teams", {})
        notified_users = 0
        
        for team_name, team_data in teams.items():
            roster = team_data.get("roster", [])
            for player in roster:
                player_id = player.get("player_id")
                if not player_id:
                    continue
                
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –ø–æ FACEIT ID
                user = await storage.get_user_by_faceit_id(player_id)
                if not user:
                    continue
                
                user_id = user.get("user_id")
                notifications_enabled = user.get("notifications", True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not notifications_enabled:
                    logger.info(f"Notifications disabled for user {user_id}")
                    await storage.save_notification_log(user_id, match_id, "skipped", "notifications_disabled")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –º–∞—Ç—á–µ
                already_notified = await storage.is_match_notification_sent(match_id, user_id)
                if already_notified:
                    logger.info(f"Notification for match {match_id} already sent to user {user_id}")
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    await send_match_notification(user_id, match_details, match_stats, player_id)
                    
                    # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    await storage.mark_match_notification_sent(match_id, user_id, {
                        "match_id": match_id,
                        "player_id": player_id,
                        "nickname": player.get("nickname"),
                        "sent_at": datetime.now().isoformat()
                    })
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if match_stats:
                        await save_match_to_history(user_id, match_id, match_details, match_stats, player_id)
                    
                    await storage.save_notification_log(user_id, match_id, "sent")
                    notified_users += 1
                    
                    logger.info(f"Match notification sent to user {user_id} for match {match_id}")
                    
                except Exception as notification_error:
                    error_msg = str(notification_error)
                    logger.error(f"Failed to send notification to user {user_id}: {error_msg}")
                    await storage.save_notification_log(user_id, match_id, "failed", error_msg)
        
        logger.info(f"Match {match_id} processing completed. Notifications sent to {notified_users} users")
        
    except Exception as e:
        logger.error(f"Error processing finished match {match_id}: {e}")

async def send_match_notification(user_id: int, match_details: dict, match_stats: dict, user_faceit_id: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –º–∞—Ç—á–µ"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç —á—Ç–æ –∏ –≤ last_match
        message_text = await format_match_notification(match_details, match_stats, user_faceit_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–∞—Ç—á
        keyboard = create_match_keyboard(match_details)
        
        await bot.send_message(
            user_id, 
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error sending notification to user {user_id}: {e}")
        raise


async def format_match_notification(match_data: dict, match_stats: dict, user_faceit_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ —á—Ç–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        match_result = match_data.get('results', {})
        winner = match_result.get('winner')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç
        teams = match_data.get('teams', {})
        team1_name = teams.get('faction1', {}).get('name', 'Team 1')
        team2_name = teams.get('faction2', {}).get('name', 'Team 2')
        
        team1_score = match_result.get('score', {}).get('faction1', 0)
        team2_score = match_result.get('score', {}).get('faction2', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–±–µ–¥–∞/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ)
        user_team = get_user_team_from_match_stats(match_stats, user_faceit_id)
        if user_team and winner:
            if (user_team == 'faction1' and winner == 'faction1') or \
               (user_team == 'faction2' and winner == 'faction2'):
                status_emoji = "üèÜ"
            else:
                status_emoji = "üíî"
        else:
            status_emoji = "üéÆ"

        # –ö–∞—Ä—Ç–∞
        voting = match_data.get('voting', {})
        map_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
        if voting and 'map' in voting:
            if 'pick' in voting['map']:
                map_name = voting['map']['pick'][0] if voting['map']['pick'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
            elif 'name' in voting['map']:
                map_name = voting['map']['name']

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = get_user_stats_from_match(match_stats, user_faceit_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = [
            "üéÆ <b>–í–∞—à –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω!</b>",
            "",
            f"{status_emoji} <b>{team1_name} {team1_score} - {team2_score} {team2_name}</b>",
            f"üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞:</b> {map_name}",
            "",
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
        ]

        if user_stats:
            kills = user_stats.get('Kills', '0')
            deaths = user_stats.get('Deaths', '0')
            assists = user_stats.get('Assists', '0')
            kd_ratio = user_stats.get('K/D Ratio', '0.00')
            adr = user_stats.get('ADR', '0')
            hltv_rating = faceit_client.calculate_hltv_rating(user_stats)
            
            message_lines.append(
                f"üî• K-D-A: {kills}-{deaths}-{assists} | K/D: {kd_ratio} | ADR: {adr} | HLTV 2.1: {hltv_rating:.2f}"
            )
        else:
            message_lines.append("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        return "\n".join(message_lines)

    except Exception as e:
        logger.error(f"Error formatting match notification: {e}")
        return "üéÆ –í–∞—à –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω!\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞"


def get_user_team_from_match_stats(match_stats: dict, user_faceit_id: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ –∏–≥—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        if not match_stats:
            return None
            
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return None
            
        round_stats = rounds[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
        teams = round_stats.get('teams', [])
        
        for team in teams:
            players = team.get('players', [])
            for player in players:
                if player.get('player_id') == user_faceit_id:
                    return team.get('team_id')
        
        return None
    except Exception as e:
        logger.error(f"Error getting user team: {e}")
        return None


def get_user_stats_from_match(match_stats: dict, user_faceit_id: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Ç—á–∞"""
    try:
        if not match_stats:
            return None
            
        rounds = match_stats.get('rounds', [])
        if not rounds:
            return None
            
        round_stats = rounds[0]
        teams = round_stats.get('teams', [])
        
        for team in teams:
            players = team.get('players', [])
            for player in players:
                if player.get('player_id') == user_faceit_id:
                    return player.get('player_stats', {})
        
        return None
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        return None


def create_match_keyboard(match_data: dict):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–∞ –Ω–∞ FACEIT"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–∞ –Ω–∞ FACEIT
    match_id = match_data.get('match_id', '')
    if match_id:
        faceit_url = f"https://www.faceit.com/en/cs2/room/{match_id}"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîó –°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á –Ω–∞ FACEIT", url=faceit_url)]
            ]
        )
        return keyboard
    
    return None


async def save_match_to_history(user_id: int, match_id: str, match_details: dict, match_stats: dict, user_faceit_id: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ç—á –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Ç—á–∞
        user_stats = get_user_stats_from_match(match_stats, user_faceit_id)
        if not user_stats:
            logger.warning(f"No user stats found for match {match_id}")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        match_result = match_details.get('results', {})
        winner = match_result.get('winner')
        user_team = get_user_team_from_match_stats(match_stats, user_faceit_id)
        
        if user_team and winner:
            if (user_team == 'faction1' and winner == 'faction1') or \
               (user_team == 'faction2' and winner == 'faction2'):
                result = "win"
            else:
                result = "loss"
        else:
            result = "unknown"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞
        finished_at = match_details.get('finished_at')
        if finished_at:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ datetime
            from datetime import datetime
            finished_at = datetime.fromtimestamp(finished_at)
        else:
            finished_at = datetime.now()
        
        # –ö–∞—Ä—Ç–∞
        voting = match_details.get('voting', {})
        map_name = "Unknown"
        if voting and 'map' in voting:
            if 'pick' in voting['map']:
                map_name = voting['map']['pick'][0] if voting['map']['pick'] else "Unknown"
            elif 'name' in voting['map']:
                map_name = voting['map']['name']
        
        # –°—á–µ—Ç –∫–æ–º–∞–Ω–¥
        teams = match_details.get('teams', {})
        score = match_result.get('score', {})
        team1_score = score.get('faction1', 0)
        team2_score = score.get('faction2', 0)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        match_data = {
            'match_id': match_id,
            'user_id': user_id,
            'finished_at': finished_at,
            'result': result,
            'kills': int(user_stats.get('Kills', '0')),
            'deaths': int(user_stats.get('Deaths', '0')),
            'assists': int(user_stats.get('Assists', '0')),
            'adr': float(user_stats.get('ADR', '0')),
            'hltv_rating': faceit_client.calculate_hltv_rating(user_stats),
            'headshots': int(user_stats.get('Headshots', '0')),
            'headshot_percentage': float(user_stats.get('Headshots %', '0')),
            'map_name': map_name,
            'score_team1': team1_score,
            'score_team2': team2_score,
            'rounds_played': team1_score + team2_score
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await storage.save_match(match_data)
        logger.info(f"Match {match_id} saved to history for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error saving match {match_id} to history: {e}")

async def verify_webhook_signature(request: Request, data: dict):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å webhook (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        signature_header = request.headers.get("X-FACEIT-Signature")
        user_agent = request.headers.get("User-Agent", "")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not user_agent.startswith("FACEIT"):
            logger.warning("Suspicious webhook: invalid user agent")
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        webhook_secret = getattr(settings, 'faceit_webhook_secret', None)
        if webhook_secret and signature_header:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HMAC –ø–æ–¥–ø–∏—Å–∏
            body = str(data).encode()
            expected_signature = hmac.new(
                webhook_secret.encode(), 
                body, 
                hashlib.sha256
            ).hexdigest()
            
            if not hmac.compare_digest(signature_header, expected_signature):
                logger.warning("Webhook signature verification failed")
        
        logger.info("Webhook signature verification passed")
        
    except Exception as e:
        logger.error(f"Webhook signature verification error: {e}")


async def match_monitoring_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π"""
    logger.info("üîç –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ç—á–µ–π...")
    
    while True:
        try:
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await asyncio.sleep(300)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            users_with_notifications = await storage.get_users_with_notifications()
            if not users_with_notifications:
                logger.debug("No users with notifications enabled")
                continue
            
            logger.info(f"Checking matches for {len(users_with_notifications)} users")
            
            for user in users_with_notifications:
                try:
                    await check_user_new_matches(user)
                except Exception as user_error:
                    logger.error(f"Error checking matches for user {user.get('user_id')}: {user_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    
        except Exception as e:
            logger.error(f"Error in match monitoring task: {e}")
            # –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ
            await asyncio.sleep(600)


async def check_user_new_matches(user: dict):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = user.get('user_id')
        faceit_id = user.get('faceit_id')
        nickname = user.get('nickname', 'Unknown')
        
        if not faceit_id:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –∏–≥—Ä–æ–∫–∞
        history = await faceit_client.get_player_history(faceit_id, limit=5)
        if not history or not history.get('items'):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
        last_processed_time = await storage.get_last_processed_match_time(faceit_id)
        
        new_matches = []
        for match in history['items']:
            match_finished_at = match.get('finished_at')
            if not match_finished_at:
                continue
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ datetime
            match_time = datetime.fromtimestamp(match_finished_at)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Ç—á –Ω–æ–≤–µ–µ
            if last_processed_time and match_time <= last_processed_time:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
            match_id = match.get('match_id')
            if not match_id:
                continue
                
            already_notified = await storage.is_match_notification_sent(match_id, user_id)
            if already_notified:
                continue
                
            new_matches.append(match)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏
        for match in new_matches:
            match_id = match.get('match_id')
            logger.info(f"Processing new match {match_id} for user {nickname}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞
            match_details = await faceit_client.get_match_details(match_id)
            if not match_details:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
            match_stats = await faceit_client.get_match_stats(match_id)
            if not match_stats:
                logger.warning(f"No stats available for match {match_id}")
                continue
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await send_match_notification(user_id, match_details, match_stats, faceit_id)
                
                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await storage.mark_match_notification_sent(match_id, user_id, {
                    "match_id": match_id,
                    "player_id": faceit_id,
                    "nickname": nickname,
                    "sent_at": datetime.now().isoformat()
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á –≤ –∏—Å—Ç–æ—Ä–∏—é
                await save_match_to_history(user_id, match_id, match_details, match_stats, faceit_id)
                
                await storage.save_notification_log(user_id, match_id, "sent")
                logger.info(f"New match notification sent to {nickname} for match {match_id}")
                
            except Exception as notification_error:
                error_msg = str(notification_error)
                logger.error(f"Failed to send new match notification to {nickname}: {error_msg}")
                await storage.save_notification_log(user_id, match_id, "failed", error_msg)
    
    except Exception as e:
        logger.error(f"Error checking new matches for user {user.get('nickname', 'Unknown')}: {e}")


async def start_polling():
    """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –±–æ—Ç–∞"""
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram bot polling...")
        await dp.start_polling(
            bot, 
            allowed_updates=["message", "callback_query"],
            drop_pending_updates=True
        )
    except Exception as e:
        logger.error(f"Polling error: {e}")
    finally:
        await bot.session.close()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        uvicorn.run(
            "main:app",
            host="0.0.0.0",
            port=8001,
            reload=settings.debug,
            log_level="info"
        )
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")