#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import sys
import os
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from faceit_client import FaceitAPIClient
from keyboards import (
    get_main_menu_keyboard, get_player_stats_keyboard, get_match_history_keyboard,
    get_form_analysis_keyboard, get_player_comparison_keyboard, get_settings_keyboard,
    get_help_keyboard, get_profile_keyboard, get_current_match_analysis_keyboard,
    get_last_match_keyboard
)

async def test_faceit_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç FACEIT API"""
    print("=== –¢–µ—Å—Ç FACEIT Client ===")
    
    try:
        client = FaceitAPIClient()
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ 'test'...")
        player_data = await client.get_player_full_profile("test")
        
        if player_data:
            print(f"‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω: {player_data.get('nickname', 'N/A')}")
            print(f"   FACEIT ID: {player_data.get('player_id', 'N/A')}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å: {player_data.get('games', {}).get('cs2', {}).get('skill_level', 'N/A')}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            stats = await client.get_player_stats(player_data['player_id'])
            if stats:
                print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
                segments = stats.get('segments', [])
                if segments:
                    overall = next((s for s in segments if s.get('type') == 'Overall'), None)
                    if overall and 'stats' in overall:
                        stats_data = overall['stats']
                        print(f"   K/D: {stats_data.get('Average K/D Ratio', {}).get('value', 'N/A')}")
                        print(f"   HLTV 2.1: {stats_data.get('Average HLTV 2.1 Rating', {}).get('value', 'N/A')}")
                        print(f"   KAST: {stats_data.get('Average KAST', {}).get('value', 'N/A')}")
                        print(f"   –£—Ä–æ–Ω —Å –≥—Ä–∞–Ω–∞—Ç: {stats_data.get('Average Grenade Damage', {}).get('value', 'N/A')}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π
            print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π...")
            matches = await client.get_player_matches(player_data['player_id'], limit=5)
            if matches:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")
                for i, match in enumerate(matches[:3], 1):
                    print(f"   –ú–∞—Ç—á {i}: {match.get('competition_name', 'N/A')} –Ω–∞ {match.get('map', {}).get('name', 'N/A')}")
            
        else:
            print("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_keyboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("\n=== –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä ===")
    
    keyboards = [
        ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", get_main_menu_keyboard),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞", get_player_stats_keyboard),
        ("–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π", get_match_history_keyboard),
        ("–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã", get_form_analysis_keyboard),
        ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤", lambda: get_player_comparison_keyboard(False)),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", get_settings_keyboard),
        ("–ü–æ–º–æ—â—å", get_help_keyboard),
        ("–ü—Ä–æ—Ñ–∏–ª—å", get_profile_keyboard),
        ("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞", get_current_match_analysis_keyboard),
        ("–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á", get_last_match_keyboard),
    ]
    
    for name, keyboard_func in keyboards:
        try:
            keyboard = keyboard_func()
            buttons_count = len([btn for row in keyboard.inline_keyboard for btn in row])
            print(f"‚úÖ {name}: {buttons_count} –∫–Ω–æ–ø–æ–∫")
        except Exception as e:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ - {e}")

async def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
    
    try:
        import asyncpg
        from config import settings
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = await asyncpg.connect(settings.database_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("SELECT tablename FROM pg_tables WHERE schemaname = 'public' ORDER BY tablename;")
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü:")
        for table in tables:
            print(f"   - {table['tablename']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
        cache_cleaned = await conn.fetchval("SELECT clean_expired_cache();")
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: —É–¥–∞–ª–µ–Ω–æ {cache_cleaned} –∑–∞–ø–∏—Å–µ–π")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

async def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
    print("\n=== –¢–µ—Å—Ç Redis ===")
    
    try:
        import redis.asyncio as redis
        from config import settings
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        r = await redis.from_url(settings.redis_url)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        await r.set("test_key", "test_value", ex=10)
        value = await r.get("test_key")
        
        if value == b"test_value":
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info = await r.info("server")
            print(f"   Redis –≤–µ—Ä—Å–∏—è: {info.get('redis_version', 'N/A')}")
        else:
            print("‚ùå Redis —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
            
        await r.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===")
    
    handlers = [
        "bot.handlers.main_handler",
        "bot.handlers.stats_handler", 
        "bot.handlers.match_history_handler",
        "bot.handlers.form_analysis_handler",
        "bot.handlers.last_match_handler",
        "bot.handlers.comparison_handler",
        "bot.handlers.current_match_handler",
        "bot.handlers.profile_handler",
        "bot.handlers.settings_handler",
        "bot.handlers.help_handler",
        "bot.handlers.notifications_handler"
    ]
    
    for handler_name in handlers:
        try:
            __import__(handler_name)
            print(f"‚úÖ {handler_name}")
        except Exception as e:
            print(f"‚ùå {handler_name}: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FACEIT CS2 Bot")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    test_imports()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    test_keyboards()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await test_redis_connection()
    await test_database_connection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º FACEIT API
    await test_faceit_client()
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
    if sys.platform == "win32":
        import locale
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
            if hasattr(sys.stdout, 'reconfigure'):
                sys.stdout.reconfigure(encoding='utf-8')
                sys.stderr.reconfigure(encoding='utf-8')
            else:
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python
                import codecs
                sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)
                sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            import functools
            print = functools.partial(print, errors='replace')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(main())