"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ FACEIT –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from config import settings
from storage import storage
from faceit_client import FaceitAPIClient


logger = logging.getLogger(__name__)


class WorkerQueue:
    """–°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏"""
    
    def __init__(self, max_size: int = 1000):
        self.stats_queue = asyncio.Queue(maxsize=max_size)
        self.history_queue = asyncio.Queue(maxsize=max_size)
        self.comparison_queue = asyncio.Queue(maxsize=max_size)
        self.notification_queue = asyncio.Queue(maxsize=max_size)
        
    async def add_stats_task(self, task: Dict[str, Any]):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            await self.stats_queue.put(task)
            logger.debug(f"Added stats task: {task.get('type', 'unknown')}")
        except asyncio.QueueFull:
            logger.warning("Stats queue is full, dropping task")
    
    async def add_history_task(self, task: Dict[str, Any]):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
        try:
            await self.history_queue.put(task)
            logger.debug(f"Added history task: {task.get('type', 'unknown')}")
        except asyncio.QueueFull:
            logger.warning("History queue is full, dropping task")
    
    async def add_comparison_task(self, task: Dict[str, Any]):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤"""
        try:
            await self.comparison_queue.put(task)
            logger.debug(f"Added comparison task: {task.get('type', 'unknown')}")
        except asyncio.QueueFull:
            logger.warning("Comparison queue is full, dropping task")
    
    async def add_notification_task(self, task: Dict[str, Any]):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            await self.notification_queue.put(task)
            logger.debug(f"Added notification task: {task.get('type', 'unknown')}")
        except asyncio.QueueFull:
            logger.warning("Notification queue is full, dropping task")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
worker_queue = WorkerQueue(max_size=settings.max_queue_size)


async def stats_analysis_worker(worker_id: int):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤"""
    logger.info(f"üîç Stats analysis worker {worker_id} started")
    client = FaceitAPIClient()
    
    while True:
        try:
            # –ñ–¥–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            task = await asyncio.wait_for(
                worker_queue.stats_queue.get(),
                timeout=settings.worker_timeout
            )
            
            logger.debug(f"Worker {worker_id} processing stats task: {task.get('type')}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            task_type = task.get('type')
            if task_type == 'player_stats':
                await process_player_stats(client, task)
            elif task_type == 'current_match':
                await process_current_match(client, task)
            elif task_type == 'form_analysis':
                await process_form_analysis(client, task)
            else:
                logger.warning(f"Unknown stats task type: {task_type}")
            
            # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            worker_queue.stats_queue.task_done()
            
        except asyncio.TimeoutError:
            # –ù–µ—Ç –∑–∞–¥–∞—á, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            continue
        except Exception as e:
            logger.error(f"Error in stats worker {worker_id}: {e}")
            await asyncio.sleep(1)
    
    await client.close()


async def match_history_worker(worker_id: int):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
    logger.info(f"üìä Match history worker {worker_id} started")
    client = FaceitAPIClient()
    
    while True:
        try:
            task = await asyncio.wait_for(
                worker_queue.history_queue.get(),
                timeout=settings.worker_timeout
            )
            
            logger.debug(f"Worker {worker_id} processing history task: {task.get('type')}")
            
            task_type = task.get('type')
            if task_type == 'match_history':
                await process_match_history(client, task)
            elif task_type == 'last_matches':
                await process_last_matches(client, task)
            elif task_type == 'session_stats':
                await process_session_stats(client, task)
            else:
                logger.warning(f"Unknown history task type: {task_type}")
            
            worker_queue.history_queue.task_done()
            
        except asyncio.TimeoutError:
            continue
        except Exception as e:
            logger.error(f"Error in history worker {worker_id}: {e}")
            await asyncio.sleep(1)
    
    await client.close()


async def comparison_worker(worker_id: int):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤"""
    logger.info(f"‚öñÔ∏è Comparison worker {worker_id} started")
    client = FaceitAPIClient()
    
    while True:
        try:
            task = await asyncio.wait_for(
                worker_queue.comparison_queue.get(),
                timeout=settings.worker_timeout
            )
            
            logger.debug(f"Worker {worker_id} processing comparison task: {task.get('type')}")
            
            task_type = task.get('type')
            if task_type == 'player_comparison':
                await process_player_comparison(client, task)
            elif task_type == 'enhanced_comparison':
                await process_enhanced_comparison(client, task)
            else:
                logger.warning(f"Unknown comparison task type: {task_type}")
            
            worker_queue.comparison_queue.task_done()
            
        except asyncio.TimeoutError:
            continue
        except Exception as e:
            logger.error(f"Error in comparison worker {worker_id}: {e}")
            await asyncio.sleep(1)
    
    await client.close()


async def notification_worker(worker_id: int):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info(f"üì¢ Notification worker {worker_id} started")
    
    while True:
        try:
            task = await asyncio.wait_for(
                worker_queue.notification_queue.get(),
                timeout=settings.worker_timeout
            )
            
            logger.debug(f"Processing notification task: {task.get('type')}")
            
            task_type = task.get('type')
            if task_type == 'match_notification':
                await process_match_notification(task)
            elif task_type == 'stats_notification':
                await process_stats_notification(task)
            else:
                logger.warning(f"Unknown notification task type: {task_type}")
            
            worker_queue.notification_queue.task_done()
            
        except asyncio.TimeoutError:
            continue
        except Exception as e:
            logger.error(f"Error in notification worker {worker_id}: {e}")
            await asyncio.sleep(1)


# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á

async def process_player_stats(client: FaceitAPIClient, task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    try:
        player_id = task['player_id']
        user_id = task['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        player_details = await client.get_player_details(player_id)
        if not player_details:
            logger.warning(f"No details found for player {player_id}")
            return
        
        player_stats = await client.get_player_stats(player_id)
        if not player_stats:
            logger.warning(f"No stats found for player {player_id}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        formatted_stats = client.format_player_stats(player_details, player_stats)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache_key = f"player_stats_{player_id}"
        await storage.cache_data(cache_key, formatted_stats, ttl_minutes=15)
        
        logger.info(f"Processed stats for player {player_id}")
        
    except Exception as e:
        logger.error(f"Error processing player stats: {e}")


async def process_current_match(client: FaceitAPIClient, task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞"""
    try:
        player_id = task['player_id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç—á
        current_match = await client.get_current_match(player_id)
        if not current_match:
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
        participants = await client.analyze_match_participants(current_match)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_key = f"current_match_{player_id}"
        await storage.cache_data(cache_key, {
            'match': current_match,
            'participants': participants
        }, ttl_minutes=5)
        
        logger.info(f"Processed current match for player {player_id}")
        
    except Exception as e:
        logger.error(f"Error processing current match: {e}")


async def process_form_analysis(client: FaceitAPIClient, task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –∏–≥—Ä–æ–∫–∞"""
    try:
        player_id = task['player_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏
        matches = await client.get_player_matches(player_id, limit=20)
        if not matches:
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
        form_analysis = await client.analyze_player_form(matches)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_key = f"form_analysis_{player_id}"
        await storage.cache_data(cache_key, form_analysis, ttl_minutes=30)
        
        logger.info(f"Processed form analysis for player {player_id}")
        
    except Exception as e:
        logger.error(f"Error processing form analysis: {e}")


async def process_match_history(client: FaceitAPIClient, task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π"""
    try:
        player_id = task['player_id']
        limit = task.get('limit', 20)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
        matches = await client.get_player_matches(player_id, limit=limit)
        if not matches:
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
        processed_matches = []
        for match in matches:
            match_details = await client.get_match_details(match['match_id'])
            if match_details:
                processed_matches.append(match_details)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_key = f"match_history_{player_id}_{limit}"
        await storage.cache_data(cache_key, processed_matches, ttl_minutes=20)
        
        logger.info(f"Processed {len(processed_matches)} matches for player {player_id}")
        
    except Exception as e:
        logger.error(f"Error processing match history: {e}")


async def process_last_matches(client: FaceitAPIClient, task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π"""
    try:
        player_id = task['player_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
        matches = await client.get_player_matches(player_id, limit=5)
        detailed_matches = []
        
        # Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–µ–π
        semaphore = asyncio.Semaphore(settings.concurrent_requests)
        
        async def get_match_detail(match):
            async with semaphore:
                return await client.get_match_details(match['match_id'])
        
        tasks = [get_match_detail(match) for match in matches]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for result in results:
            if not isinstance(result, Exception) and result:
                detailed_matches.append(result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_key = f"last_matches_{player_id}"
        await storage.cache_data(cache_key, detailed_matches, ttl_minutes=10)
        
        logger.info(f"Processed last matches for player {player_id}")
        
    except Exception as e:
        logger.error(f"Error processing last matches: {e}")


async def process_session_stats(client: FaceitAPIClient, task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
    try:
        user_id = task['user_id']
        player_id = task['player_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
        session = await storage.get_user_active_session(user_id)
        if not session:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–µ—Å—Å–∏–∏
        matches = await client.get_player_matches_since(player_id, session['start_time'])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        session_stats = await client.calculate_session_stats(matches)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        await storage.update_session_stats(session['id'], session_stats)
        
        logger.info(f"Updated session stats for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error processing session stats: {e}")


async def process_player_comparison(client: FaceitAPIClient, task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤"""
    try:
        players = task['players']  # –°–ø–∏—Å–æ–∫ player_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        semaphore = asyncio.Semaphore(settings.concurrent_requests)
        
        async def get_player_data(player_id):
            async with semaphore:
                details = await client.get_player_details(player_id)
                stats = await client.get_player_stats(player_id)
                return client.format_player_stats(details, stats) if details and stats else None
        
        tasks = [get_player_data(pid) for pid in players]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        player_data = []
        for result in results:
            if not isinstance(result, Exception) and result:
                player_data.append(result)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison_result = await client.create_comparison(player_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_key = f"comparison_{'_'.join(players)}"
        await storage.cache_data(cache_key, comparison_result, ttl_minutes=20)
        
        logger.info(f"Created comparison for {len(player_data)} players")
        
    except Exception as e:
        logger.error(f"Error processing player comparison: {e}")


async def process_enhanced_comparison(client: FaceitAPIClient, task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    try:
        players = task['players']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        enhanced_data = []
        
        for player_id in players:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            details = await client.get_player_details(player_id)
            stats = await client.get_player_stats(player_id)
            
            if details and stats:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã
                matches = await client.get_player_matches(player_id, limit=10)
                form = await client.analyze_player_form(matches) if matches else None
                
                enhanced_data.append({
                    'player': client.format_player_stats(details, stats),
                    'form': form,
                    'recent_matches': matches[:5] if matches else []
                })
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        enhanced_comparison = await client.create_enhanced_comparison(enhanced_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_key = f"enhanced_comparison_{'_'.join(players)}"
        await storage.cache_data(cache_key, enhanced_comparison, ttl_minutes=30)
        
        logger.info(f"Created enhanced comparison for {len(enhanced_data)} players")
        
    except Exception as e:
        logger.error(f"Error processing enhanced comparison: {e}")


async def process_match_notification(task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ"""
    try:
        user_id = task['user_id']
        match_data = task['match_data']
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        logger.info(f"Sent match notification to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error processing match notification: {e}")


async def process_stats_notification(task: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    try:
        user_id = task['user_id']
        stats_data = task['stats_data']
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        logger.info(f"Sent stats notification to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error processing stats notification: {e}")


def get_worker_queue() -> WorkerQueue:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    return worker_queue