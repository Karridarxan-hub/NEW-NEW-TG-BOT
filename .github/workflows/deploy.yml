name: üöÄ Production Deploy

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  PROJECT_NAME: faceit-cs2-bot
  DEPLOY_PATH: /opt/faceit-bot

jobs:
  deploy:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest
    
    steps:
    - name: üìã Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üîç Get commit info
      id: commit
      run: |
        echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT
        echo "author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT

    - name: üñ•Ô∏è Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script_stop: true
        script: |
          echo "üöÄ Starting deployment..."
          echo "üì¶ Commit: ${{ steps.commit.outputs.sha }}"
          echo "üí¨ Message: ${{ steps.commit.outputs.message }}"
          echo "üë§ Author: ${{ steps.commit.outputs.author }}"
          
          # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
          cd ${{ env.DEPLOY_PATH }}
          
          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
          echo "üõë Stopping current services..."
          docker-compose down --remove-orphans || true
          
          # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
          echo "‚¨áÔ∏è Pulling latest changes..."
          git fetch --all --tags --prune
          git checkout master
          git reset --hard origin/master
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
          CURRENT_VERSION=$(grep -o 'version="[^"]*"' main.py | cut -d'"' -f2)
          echo "üìä Current version: $CURRENT_VERSION"
          
          # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
          echo "üíæ Creating backup..."
          BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)"
          mkdir -p /opt/backups
          tar -czf "/opt/backups/${BACKUP_NAME}.tar.gz" \
            --exclude='logs' --exclude='data' --exclude='.git' \
            --exclude='__pycache__' . || echo "‚ö†Ô∏è Backup creation failed"
          
          # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ production –∫–æ–Ω—Ñ–∏–≥–∞
          echo "‚öôÔ∏è Setting up production config..."
          if [ -f .env.production ]; then
            cp .env.production .env
            echo "‚úÖ Production config applied"
          else
            echo "‚ùå Production config not found!"
            exit 1
          fi
          
          # –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞
          echo "üßπ Cleaning Docker cache..."
          docker system prune -f || true
          
          # –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
          echo "üî® Building and starting services..."
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh prod --rebuild
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
          echo "üè• Checking service health..."
          sleep 30
          
          if docker-compose ps | grep -q "Up.*healthy"; then
            echo "‚úÖ Services are running and healthy"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
            if curl -f -s http://localhost:8000/health > /dev/null; then
              echo "‚úÖ API health check passed"
              
              # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ –ª–æ–≥–∞—Ö
              WORKER_COUNT=$(docker-compose logs faceit-bot 2>/dev/null | grep -c "–≤–æ—Ä–∫–µ—Ä" || echo "0")
              echo "üîß Workers detected: $WORKER_COUNT"
              
              echo "üéâ Deployment successful!"
              
              # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              echo "üìä Deployment statistics:"
              docker-compose ps
              docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
              
            else
              echo "‚ùå API health check failed"
              docker-compose logs faceit-bot
              exit 1
            fi
          else
            echo "‚ùå Services failed to start properly"
            docker-compose ps
            docker-compose logs
            exit 1
          fi

    - name: üì± Notify success
      if: success()
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üéØ Version: $(grep -o 'version=\"[^\"]*\"' main.py | cut -d'\"' -f2)"
        echo "üîó Commit: ${{ steps.commit.outputs.sha }}"

    - name: üì± Notify failure  
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "üîó Commit: ${{ steps.commit.outputs.sha }}"
        echo "üí¨ Message: ${{ steps.commit.outputs.message }}"

    - name: üîÑ Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          echo "üîÑ Starting rollback process..."
          cd ${{ env.DEPLOY_PATH }}
          
          # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
          LAST_BACKUP=$(ls -t /opt/backups/backup_*.tar.gz 2>/dev/null | head -1)
          if [ -n "$LAST_BACKUP" ]; then
            echo "üì¶ Found backup: $LAST_BACKUP"
            echo "üîÑ Rolling back to previous version..."
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            docker-compose down --remove-orphans || true
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
            tar -xzf "$LAST_BACKUP" -C . || echo "‚ö†Ô∏è Backup extraction failed"
            
            # –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            docker-compose up -d || echo "‚ö†Ô∏è Rollback startup failed"
            
            echo "üîÑ Rollback completed"
          else
            echo "‚ùå No backup found for rollback"
          fi