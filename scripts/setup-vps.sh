#!/bin/bash

# üñ•Ô∏è FACEIT CS2 Bot - VPS Setup Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –í–ü–° –¥–ª—è GitHub Actions –¥–µ–ø–ª–æ—è

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_NAME="faceit-cs2-bot"
DEPLOY_PATH="/opt/faceit-bot"
BACKUP_DIR="/opt/backups"
USER_NAME="faceit"
REPO_URL="https://github.com/Karridarxan-hub/NEW-NEW-TG-BOT.git"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
    fi
    log "‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    log "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    apt update && apt upgrade -y
    apt install -y curl git wget unzip software-properties-common
    log "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    log "üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    if command -v docker &> /dev/null; then
        log "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    apt remove -y docker docker-engine docker.io containerd runc || true
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    if [[ -n "$SUDO_USER" ]]; then
        usermod -aG docker "$SUDO_USER"
        log "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $SUDO_USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
    fi
    
    # –ó–∞–ø—É—Å–∫ Docker
    systemctl enable docker
    systemctl start docker
    
    log "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
install_docker_compose() {
    log "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    
    if command -v docker-compose &> /dev/null; then
        log "‚úÖ Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ pip –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    apt install -y python3-pip
    pip3 install docker-compose
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ pip –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if ! command -v docker-compose &> /dev/null; then
        COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')
        curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
    fi
    
    log "‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–ø–ª–æ—è
create_deploy_user() {
    log "üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–ø–ª–æ—è..."
    
    if id "$USER_NAME" &>/dev/null; then
        log "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER_NAME —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useradd -m -s /bin/bash -G docker "$USER_NAME"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo –±–µ–∑ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–µ–ø–ª–æ—è
    echo "$USER_NAME ALL=(ALL) NOPASSWD: /usr/bin/docker, /usr/local/bin/docker-compose, /bin/systemctl" > "/etc/sudoers.d/$USER_NAME"
    
    log "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER_NAME —Å–æ–∑–¥–∞–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
setup_directories() {
    log "üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p "$DEPLOY_PATH"
    mkdir -p "$BACKUP_DIR"
    mkdir -p "/var/log/$PROJECT_NAME"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    chown -R "$USER_NAME:$USER_NAME" "$DEPLOY_PATH"
    chown -R "$USER_NAME:$USER_NAME" "$BACKUP_DIR"
    chmod 755 "$DEPLOY_PATH"
    chmod 755 "$BACKUP_DIR"
    
    log "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
clone_repository() {
    log "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    if [[ -d "$DEPLOY_PATH/.git" ]]; then
        log "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return
    fi
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–ø–ª–æ—è
    sudo -u "$USER_NAME" git clone "$REPO_URL" "$DEPLOY_PATH"
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd "$DEPLOY_PATH"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git
    sudo -u "$USER_NAME" git config user.name "VPS Deploy"
    sudo -u "$USER_NAME" git config user.email "deploy@vps"
    
    log "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –¥–ª—è GitHub Actions
setup_ssh() {
    log "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH..."
    
    SSH_DIR="/home/$USER_NAME/.ssh"
    sudo -u "$USER_NAME" mkdir -p "$SSH_DIR"
    sudo -u "$USER_NAME" chmod 700 "$SSH_DIR"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ authorized_keys –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    AUTHORIZED_KEYS="$SSH_DIR/authorized_keys"
    if [[ ! -f "$AUTHORIZED_KEYS" ]]; then
        sudo -u "$USER_NAME" touch "$AUTHORIZED_KEYS"
        sudo -u "$USER_NAME" chmod 600 "$AUTHORIZED_KEYS"
    fi
    
    info "üìã SSH –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–ª—è GitHub Actions –Ω—É–∂–Ω–æ:"
    info "   1. –î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ $AUTHORIZED_KEYS"
    info "   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å GitHub Secrets (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é)"
    
    log "‚úÖ SSH –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
setup_firewall() {
    log "üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ufw –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    apt install -y ufw
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    ufw default deny incoming
    ufw default allow outgoing
    
    # SSH
    ufw allow ssh
    
    # HTTP/HTTPS (–µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)
    ufw allow 80/tcp
    ufw allow 443/tcp
    
    # Docker API (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)
    ufw allow 8000/tcp
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
    echo "y" | ufw enable
    
    log "‚úÖ Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging() {
    log "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    # Logrotate –¥–ª—è –ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    cat > "/etc/logrotate.d/$PROJECT_NAME" << EOF
/var/log/$PROJECT_NAME/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    sharedscripts
    postrotate
        docker-compose -f $DEPLOY_PATH/docker-compose.yml restart faceit-bot || true
    endscript
}
EOF
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è Docker
    mkdir -p /etc/docker
    cat > /etc/docker/daemon.json << EOF
{
    "log-driver": "json-file",
    "log-opts": {
        "max-size": "100m",
        "max-file": "3"
    }
}
EOF
    
    systemctl restart docker
    
    log "‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
create_systemd_service() {
    log "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
    
    cat > "/etc/systemd/system/$PROJECT_NAME.service" << EOF
[Unit]
Description=FACEIT CS2 Bot
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$DEPLOY_PATH
ExecStart=/usr/local/bin/docker-compose up -d
ExecStop=/usr/local/bin/docker-compose down
User=$USER_NAME
Group=$USER_NAME

[Install]
WantedBy=multi-user.target
EOF
    
    systemctl daemon-reload
    systemctl enable "$PROJECT_NAME.service"
    
    log "‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
verify_installation() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! docker --version; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! docker-compose --version; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if ! id "$USER_NAME" &>/dev/null; then
        error "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER_NAME –Ω–µ —Å–æ–∑–¥–∞–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if [[ ! -d "$DEPLOY_PATH" ]]; then
        error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–µ–ø–ª–æ—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if [[ ! -d "$DEPLOY_PATH/.git" ]]; then
        error "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
    fi
    
    log "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
}

# –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_summary() {
    log "üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo
    echo -e "${BLUE}=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–ê–°–¢–†–û–ô–ö–ï ===${NC}"
    echo -e "${GREEN}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ø–ª–æ—è:${NC} $USER_NAME"
    echo -e "${GREEN}–ü—É—Ç—å –¥–µ–ø–ª–æ—è:${NC} $DEPLOY_PATH"
    echo -e "${GREEN}–ë—ç–∫–∞–ø—ã:${NC} $BACKUP_DIR"
    echo -e "${GREEN}–õ–æ–≥–∏:${NC} /var/log/$PROJECT_NAME"
    echo
    echo -e "${YELLOW}=== –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò ===${NC}"
    echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub Secrets –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:"
    echo "   - VPS_HOST: IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω –í–ü–°"
    echo "   - VPS_USER: $USER_NAME"
    echo "   - VPS_PORT: 22 (–∏–ª–∏ –≤–∞—à SSH –ø–æ—Ä—Ç)"
    echo "   - VPS_SSH_KEY: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π SSH –∫–ª—é—á"
    echo
    echo "2. –î–æ–±–∞–≤—å—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π SSH –∫–ª—é—á –≤ authorized_keys:"
    echo "   sudo -u $USER_NAME nano /home/$USER_NAME/.ssh/authorized_keys"
    echo
    echo "3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–µ–ø–ª–æ–π:"
    echo "   git push origin master"
    echo
    echo -e "${GREEN}üéâ –í–ü–° –≥–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ GitHub Actions!${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –í–ü–° –¥–ª—è GitHub Actions –¥–µ–ø–ª–æ—è"
    
    check_root
    update_system
    install_docker
    install_docker_compose
    create_deploy_user
    setup_directories
    clone_repository
    setup_ssh
    setup_firewall
    setup_logging
    create_systemd_service
    verify_installation
    show_summary
    
    log "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –í–ü–° –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi