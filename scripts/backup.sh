#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è FACEIT CS2 –ë–æ—Ç–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./backup.sh [--full] [--config-only] [--retention-days N]

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_NAME="faceit-cs2-bot"
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
BACKUP_BASE_DIR="${BACKUP_DIR:-/opt/backups/$PROJECT_NAME}"
DEFAULT_RETENTION_DAYS=30

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
BACKUP_TYPE="standard"
RETENTION_DAYS=$DEFAULT_RETENTION_DAYS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --full|-f)
            BACKUP_TYPE="full"
            shift
            ;;
        --config-only|-c)
            BACKUP_TYPE="config"
            shift
            ;;
        --retention-days|-r)
            RETENTION_DAYS="$2"
            shift 2
            ;;
        --help|-h)
            cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]

OPTIONS:
  --full, -f                –ü–æ–ª–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –ª–æ–≥–∏ –∏ –¥–∞–Ω–Ω—ã–µ)
  --config-only, -c         –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  --retention-days N, -r N  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è backup'–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $DEFAULT_RETENTION_DAYS)
  --help, -h                –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–¢–∏–ø—ã backup'–æ–≤:
  standard     –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ–¥, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –±–µ–∑ –ª–æ–≥–æ–≤)
  full         –ü–æ–ª–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—Å–µ —Ñ–∞–π–ª—ã –≤–∫–ª—é—á–∞—è –ª–æ–≥–∏ –∏ –¥–∞–Ω–Ω—ã–µ)
  config       –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

–ü—Ä–∏–º–µ—Ä—ã:
  $0                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
  $0 --full                 # –ü–æ–ª–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
  $0 --config-only          # –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  $0 --retention-days 7     # –•—Ä–∞–Ω–∏—Ç—å backup'—ã 7 –¥–Ω–µ–π
EOF
            exit 0
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            exit 1
            ;;
    esac
done

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è backup
setup_backup_dir() {
    log "üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è backup..."
    
    mkdir -p "$BACKUP_BASE_DIR"
    
    if [[ ! -w "$BACKUP_BASE_DIR" ]]; then
        error "–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backup: $BACKUP_BASE_DIR"
    fi
    
    log "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backup –≥–æ—Ç–æ–≤–∞: $BACKUP_BASE_DIR"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
get_project_info() {
    log "üìä –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ..."
    
    # –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç Git (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if [[ -d "$PROJECT_DIR/.git" ]] && command -v git &> /dev/null; then
        GIT_COMMIT=$(cd "$PROJECT_DIR" && git rev-parse HEAD 2>/dev/null || echo "unknown")
        GIT_BRANCH=$(cd "$PROJECT_DIR" && git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
        info "Git commit: $GIT_COMMIT"
        info "Git branch: $GIT_BRANCH"
    else
        GIT_COMMIT="unknown"
        GIT_BRANCH="unknown"
    fi
    
    # –°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if command -v docker &> /dev/null; then
        CONTAINER_STATUS=$(docker ps --filter "name=faceit.*bot" --format "{{.Names}}: {{.Status}}" 2>/dev/null || echo "not running")
        info "Container status: $CONTAINER_STATUS"
    else
        CONTAINER_STATUS="docker not available"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö backup
create_backup_metadata() {
    local backup_dir="$1"
    local metadata_file="$backup_dir/backup_metadata.json"
    
    log "üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö backup..."
    
    cat > "$metadata_file" << EOF
{
  "backup_info": {
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
    "type": "$BACKUP_TYPE",
    "hostname": "$(hostname)",
    "user": "$(whoami)",
    "project_dir": "$PROJECT_DIR"
  },
  "git_info": {
    "commit": "$GIT_COMMIT",
    "branch": "$GIT_BRANCH"
  },
  "system_info": {
    "os": "$(uname -s)",
    "arch": "$(uname -m)",
    "container_status": "$CONTAINER_STATUS"
  },
  "backup_contents": {
    "config_files": true,
    "source_code": $([ "$BACKUP_TYPE" != "config" ] && echo "true" || echo "false"),
    "logs": $([ "$BACKUP_TYPE" == "full" ] && echo "true" || echo "false"),
    "data": $([ "$BACKUP_TYPE" == "full" ] && echo "true" || echo "false")
  }
}
EOF
    
    log "‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: $metadata_file"
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
backup_config() {
    local backup_dir="$1"
    
    log "‚öôÔ∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    local config_files=(
        ".env"
        ".env.example"
        "docker-compose.yml"
        "docker-compose.dev.yml"
        "docker-compose.prod.yml"
        "Dockerfile"
        "Dockerfile.dev"
        "requirements.txt"
        "config.py"
    )
    
    mkdir -p "$backup_dir/config"
    
    for file in "${config_files[@]}"; do
        if [[ -f "$PROJECT_DIR/$file" ]]; then
            cp "$PROJECT_DIR/$file" "$backup_dir/config/"
            info "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $file"
        else
            warn "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $file"
        fi
    done
    
    # Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if [[ -d "$PROJECT_DIR/nginx" ]]; then
        cp -r "$PROJECT_DIR/nginx" "$backup_dir/config/"
        info "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è nginx"
    fi
    
    # –°–∫—Ä–∏–ø—Ç—ã
    if [[ -d "$PROJECT_DIR/scripts" ]]; then
        cp -r "$PROJECT_DIR/scripts" "$backup_dir/"
        info "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è scripts"
    fi
    
    log "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
backup_source() {
    local backup_dir="$1"
    
    if [[ "$BACKUP_TYPE" == "config" ]]; then
        return 0
    fi
    
    log "üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞..."
    
    # –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã Python
    local source_files=(
        "main.py"
        "storage.py"
        "faceit_client.py"
        "keyboards.py"
        "bot_handlers.py"
        "match_handlers.py"
        "history_handlers.py"
        "additional_handlers.py"
        "test_bot.py"
    )
    
    mkdir -p "$backup_dir/src"
    
    for file in "${source_files[@]}"; do
        if [[ -f "$PROJECT_DIR/$file" ]]; then
            cp "$PROJECT_DIR/$file" "$backup_dir/src/"
            info "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $file"
        else
            warn "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $file"
        fi
    done
    
    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    local doc_files=(
        "README.md"
        "ARCHITECTURE.md"
        "DEPLOYMENT.md"
        "API.md"
        "TECHNICAL_GUIDE.md"
    )
    
    mkdir -p "$backup_dir/docs"
    
    for file in "${doc_files[@]}"; do
        if [[ -f "$PROJECT_DIR/$file" ]]; then
            cp "$PROJECT_DIR/$file" "$backup_dir/docs/"
            info "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $file"
        fi
    done
    
    log "‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≥–æ–≤
backup_data() {
    local backup_dir="$1"
    
    if [[ "$BACKUP_TYPE" != "full" ]]; then
        return 0
    fi
    
    log "üóÑÔ∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≥–æ–≤..."
    
    # –õ–æ–≥–∏
    if [[ -d "$PROJECT_DIR/logs" ]]; then
        cp -r "$PROJECT_DIR/logs" "$backup_dir/"
        local log_size
        log_size=$(du -sh "$backup_dir/logs" 2>/dev/null | cut -f1 || echo "unknown")
        info "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–≥–∏ (—Ä–∞–∑–º–µ—Ä: $log_size)"
    else
        warn "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    if [[ -d "$PROJECT_DIR/data" ]]; then
        cp -r "$PROJECT_DIR/data" "$backup_dir/"
        info "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
    fi
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Docker volumes (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    if command -v docker &> /dev/null && docker volume ls | grep -q "$PROJECT_NAME"; then
        log "üì¶ –≠–∫—Å–ø–æ—Ä—Ç Docker volumes..."
        mkdir -p "$backup_dir/volumes"
        
        # –ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ volumes
        docker run --rm -v "${PROJECT_NAME}_redis_data:/data" -v "$backup_dir/volumes:/backup" alpine tar czf /backup/redis_data.tar.gz -C /data . 2>/dev/null || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Redis volume"
    fi
    
    log "‚úÖ –î–∞–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
}

# –°–∂–∞—Ç–∏–µ backup
compress_backup() {
    local backup_dir="$1"
    local timestamp="$2"
    
    log "üóúÔ∏è –°–∂–∞—Ç–∏–µ backup..."
    
    local backup_archive="$BACKUP_BASE_DIR/${PROJECT_NAME}_${BACKUP_TYPE}_${timestamp}.tar.gz"
    
    cd "$BACKUP_BASE_DIR"
    tar -czf "$backup_archive" -C "$(dirname "$backup_dir")" "$(basename "$backup_dir")"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    rm -rf "$backup_dir"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞
    if tar -tzf "$backup_archive" > /dev/null 2>&1; then
        local archive_size
        archive_size=$(du -sh "$backup_archive" | cut -f1)
        log "‚úÖ Backup —Å–∂–∞—Ç: $backup_archive (—Ä–∞–∑–º–µ—Ä: $archive_size)"
        echo "$backup_archive"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ backup"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
cleanup_old_backups() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤ (—Å—Ç–∞—Ä—à–µ $RETENTION_DAYS –¥–Ω–µ–π)..."
    
    if [[ ! -d "$BACKUP_BASE_DIR" ]]; then
        return 0
    fi
    
    local deleted_count=0
    
    # –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    while IFS= read -r -d '' file; do
        rm "$file"
        info "–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π backup: $(basename "$file")"
        ((deleted_count++))
    done < <(find "$BACKUP_BASE_DIR" -name "${PROJECT_NAME}_*.tar.gz" -type f -mtime +$RETENTION_DAYS -print0 2>/dev/null)
    
    if [[ $deleted_count -gt 0 ]]; then
        log "‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤: $deleted_count"
    else
        info "–°—Ç–∞—Ä—ã–µ backup'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
send_notification() {
    local backup_file="$1"
    local backup_size
    backup_size=$(du -sh "$backup_file" | cut -f1)
    
    # Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if [[ -n "${BACKUP_WEBHOOK_URL:-}" ]] && command -v curl &> /dev/null; then
        local notification_data
        notification_data=$(cat << EOF
{
  "text": "‚úÖ Backup –∑–∞–≤–µ—Ä—à–µ–Ω",
  "attachments": [
    {
      "color": "good",
      "fields": [
        {
          "title": "–ü—Ä–æ–µ–∫—Ç",
          "value": "$PROJECT_NAME",
          "short": true
        },
        {
          "title": "–¢–∏–ø",
          "value": "$BACKUP_TYPE",
          "short": true
        },
        {
          "title": "–†–∞–∑–º–µ—Ä",
          "value": "$backup_size",
          "short": true
        },
        {
          "title": "–§–∞–π–ª",
          "value": "$(basename "$backup_file")",
          "short": false
        }
      ]
    }
  ]
}
EOF
        )
        
        if curl -X POST "$BACKUP_WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "$notification_data" \
               --silent --show-error > /dev/null; then
            info "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        else
            warn "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local timestamp
    timestamp=$(date +%Y%m%d_%H%M%S)
    
    log "üöÄ –ù–∞—á–∞–ª–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ($BACKUP_TYPE)"
    log "üìÖ Timestamp: $timestamp"
    log "üìÇ –ü—Ä–æ–µ–∫—Ç: $PROJECT_DIR"
    log "üíæ Backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $BACKUP_BASE_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    if [[ ! -d "$PROJECT_DIR" ]]; then
        error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR"
    fi
    
    setup_backup_dir
    get_project_info
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è backup
    local temp_backup_dir
    temp_backup_dir=$(mktemp -d "$BACKUP_BASE_DIR/tmp_backup_XXXXXX")
    
    create_backup_metadata "$temp_backup_dir"
    backup_config "$temp_backup_dir"
    backup_source "$temp_backup_dir"
    backup_data "$temp_backup_dir"
    
    local backup_archive
    backup_archive=$(compress_backup "$temp_backup_dir" "$timestamp")
    
    cleanup_old_backups
    send_notification "$backup_archive"
    
    log "üéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    log "üì¶ –ê—Ä—Ö–∏–≤: $backup_archive"
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ backup'–µ
    if command -v tar &> /dev/null; then
        echo
        info "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ backup'–∞:"
        tar -tzf "$backup_archive" | head -20
        if [[ $(tar -tzf "$backup_archive" | wc -l) -gt 20 ]]; then
            info "... –∏ –µ—â–µ $(( $(tar -tzf "$backup_archive" | wc -l) - 20 )) —Ñ–∞–π–ª–æ–≤"
        fi
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
cleanup_on_interrupt() {
    warn "Backup –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [[ -n "${temp_backup_dir:-}" && -d "$temp_backup_dir" ]]; then
        rm -rf "$temp_backup_dir"
    fi
    exit 130
}

trap cleanup_on_interrupt INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"