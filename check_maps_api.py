import asyncio
from faceit_client import FaceitAPIClient
import json

async def check_maps_from_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–∞—Ä—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FACEIT API"""
    client = FaceitAPIClient()
    player_id = '0cf595d2-b9a1-4316-9df9-a627c7a8c664'
    
    print("=== –ê–ù–ê–õ–ò–ó –ö–ê–†–¢ –ò–ó FACEIT API ===\n")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        stats = await client.get_player_stats(player_id)
        
        if not stats:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º segments
        segments = stats.get('segments', [])
        print(f"–í—Å–µ–≥–æ segments –ø–æ–ª—É—á–µ–Ω–æ: {len(segments)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã
        map_segments = [s for s in segments if s.get('type') == 'Map']
        print(f"Segments —Ç–∏–ø–∞ 'Map': {len(map_segments)}")
        
        if not map_segments:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ä—Ç–∞–º")
            return
        
        print("\n=== –°–ü–ò–°–û–ö –ö–ê–†–¢ –ò–ó API ===")
        maps_data = {}
        
        for i, map_segment in enumerate(map_segments, 1):
            map_name = map_segment.get('label', 'Unknown')
            map_stats = map_segment.get('stats', {})
            
            print(f"\n{i}. {map_name}")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            matches = map_stats.get('Matches', 0)
            wins = map_stats.get('Wins', 0)
            winrate = map_stats.get('Win Rate %', 0)
            
            print(f"   –ú–∞—Ç—á–µ–π: {matches}")
            print(f"   –ü–æ–±–µ–¥: {wins}")
            print(f"   Winrate: {winrate}%")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            maps_data[map_name] = {
                'matches': matches,
                'wins': wins,
                'winrate': winrate,
                'available_stats': list(map_stats.keys())
            }
        
        print(f"\n=== –ò–¢–û–ì–û ===")
        print(f"üéØ –í—Å–µ–≥–æ –∫–∞—Ä—Ç –≤ API: {len(maps_data)}")
        print(f"üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç:")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π
        sorted_maps = sorted(maps_data.items(), key=lambda x: x[1]['matches'], reverse=True)
        
        for map_name, data in sorted_maps:
            print(f"   ‚Ä¢ {map_name} ({data['matches']} –º–∞—Ç—á–µ–π)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        maps_with_data = [name for name, data in maps_data.items() if data['matches'] > 0]
        maps_without_data = [name for name, data in maps_data.items() if data['matches'] == 0]
        
        print(f"\nüìä –ö–∞—Ä—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏: {len(maps_with_data)}")
        print(f"‚ùå –ö–∞—Ä—Ç—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {len(maps_without_data)}")
        
        if maps_without_data:
            print("–ö–∞—Ä—Ç—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö:")
            for map_name in maps_without_data:
                print(f"   ‚Ä¢ {map_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã CS2
        known_cs2_maps = [
            'Mirage', 'Inferno', 'Dust2', 'Nuke', 'Vertigo', 
            'Ancient', 'Anubis', 'Train', 'Overpass', 'Cache'
        ]
        
        api_map_names = list(maps_data.keys())
        
        print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –° –ò–ó–í–ï–°–¢–ù–´–ú–ò –ö–ê–†–¢–ê–ú–ò CS2:")
        for known_map in known_cs2_maps:
            found = any(known_map.lower() in api_map.lower() for api_map in api_map_names)
            status = "‚úÖ –ù–∞–π–¥–µ–Ω–∞" if found else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞"
            print(f"   {known_map}: {status}")
        
        # –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ API
        additional_maps = []
        for api_map in api_map_names:
            if not any(known_map.lower() in api_map.lower() for known_map in known_cs2_maps):
                additional_maps.append(api_map)
        
        if additional_maps:
            print(f"\n‚ûï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–ê–†–¢–´ –í API:")
            for map_name in additional_maps:
                print(f"   ‚Ä¢ {map_name}")
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Ö
        print(f"\nüìã –î–û–°–¢–£–ü–ù–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò (–ø—Ä–∏–º–µ—Ä —Å –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã):")
        if map_segments:
            first_map = map_segments[0]
            first_map_stats = first_map.get('stats', {})
            print(f"–ö–∞—Ä—Ç–∞: {first_map.get('label', 'Unknown')}")
            for stat_key in sorted(first_map_stats.keys()):
                print(f"   ‚Ä¢ {stat_key}: {first_map_stats[stat_key]}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ API: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(check_maps_from_api())