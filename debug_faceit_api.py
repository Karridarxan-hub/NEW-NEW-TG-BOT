#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import sys
import os
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from faceit_client import FaceitAPIClient

async def investigate_faceit_api_structure():
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FACEIT API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    client = FaceitAPIClient()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã
    test_players = ["test", "shroud", "s1mple"]  # –ò–≥—Ä–æ–∫–∏ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ç—á–µ–π
    
    for nickname in test_players:
        print(f"\n{'='*80}")
        print(f"üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–ì–†–û–ö–ê: {nickname}")
        print(f"{'='*80}")
        
        try:
            # 1. –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
            print("1Ô∏è‚É£ –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞...")
            player = await client.find_player_by_nickname(nickname)
            if not player:
                print(f"‚ùå –ò–≥—Ä–æ–∫ {nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
                
            player_id = player.get('player_id')
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {player.get('nickname')} (ID: {player_id})")
            
            # 2. –î–µ—Ç–∞–ª–∏ –∏–≥—Ä–æ–∫–∞
            print("\n2Ô∏è‚É£ –î–µ—Ç–∞–ª–∏ –∏–≥—Ä–æ–∫–∞...")
            details = await client.get_player_details(player_id)
            if details and 'games' in details and 'cs2' in details['games']:
                cs2_info = details['games']['cs2']
                print(f"üìä CS2 –¥–∞–Ω–Ω—ã–µ:")
                print(f"   - –£—Ä–æ–≤–µ–Ω—å: {cs2_info.get('skill_level', 'N/A')}")
                print(f"   - ELO: {cs2_info.get('faceit_elo', 'N/A')}")
                print(f"   - –†–µ–≥–∏–æ–Ω: {cs2_info.get('region', 'N/A')}")
            
            # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï
            print("\n3Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê - –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
            stats = await client.get_player_stats(player_id)
            if not stats:
                print("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                continue
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º LIFETIME –¥–∞–Ω–Ω—ã–µ
            print("\nüìà LIFETIME –î–ê–ù–ù–´–ï:")
            lifetime = stats.get('lifetime', {})
            if lifetime:
                matches_lifetime = lifetime.get('Matches', '–ù–ï–¢ –î–ê–ù–ù–´–•')
                wins_lifetime = lifetime.get('Wins', '–ù–ï–¢ –î–ê–ù–ù–´–•') 
                winrate_lifetime = lifetime.get('Win Rate %', '–ù–ï–¢ –î–ê–ù–ù–´–•')
                print(f"   üéØ –ú–∞—Ç—á–∏ (lifetime): {matches_lifetime}")
                print(f"   üèÜ –ü–æ–±–µ–¥—ã (lifetime): {wins_lifetime}")
                print(f"   üìä –í–∏–Ω—Ä–µ–π—Ç (lifetime): {winrate_lifetime}%")
                print(f"   üîë –ö–ª—é—á–∏ –≤ lifetime: {list(lifetime.keys())}")
            else:
                print("   ‚ùå Lifetime –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SEGMENTS
            print("\nüìä SEGMENTS –î–ê–ù–ù–´–ï:")
            segments = stats.get('segments', [])
            print(f"   üìã –í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)}")
            
            for i, segment in enumerate(segments):
                segment_type = segment.get('type', 'Unknown')
                segment_label = segment.get('label', 'No label')
                print(f"\n   üìÇ –°–µ–≥–º–µ–Ω—Ç {i+1}: {segment_type} - {segment_label}")
                
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö –≤ –∫–∞–∂–¥–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ
                if 'stats' in segment:
                    seg_stats = segment['stats']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–∞—Ö
                    matches_keys = [k for k in seg_stats.keys() if 'match' in k.lower()]
                    game_keys = [k for k in seg_stats.keys() if any(word in k.lower() for word in ['game', 'round', 'total'])]
                    
                    print(f"      üéÆ –ö–ª—é—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞—Ç—á–∞–º–∏: {matches_keys}")
                    print(f"      üéØ –ö–ª—é—á–∏ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {game_keys[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    
                    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    important_keys = ['Matches', 'Games', 'Rounds', 'Wins', 'Win Rate %', 'Kills', 'Deaths', 'K/D Ratio']
                    for key in important_keys:
                        if key in seg_stats:
                            value = seg_stats[key]
                            print(f"      ‚úÖ {key}: {value}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Enhanced stats
            print("\n4Ô∏è‚É£ ENHANCED –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            enhanced = await client.get_enhanced_player_stats(player_id)
            if enhanced:
                print("   ‚úÖ Enhanced —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
                if 'segments' in enhanced:
                    print(f"   üìä Enhanced —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(enhanced['segments'])}")
                if 'lifetime' in enhanced:
                    enhanced_lifetime = enhanced['lifetime']
                    enhanced_matches = enhanced_lifetime.get('Matches', '–ù–ï–¢')
                    print(f"   üéØ Enhanced –ú–∞—Ç—á–∏: {enhanced_matches}")
            
            # 5. –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            print("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ß–ï–†–ï–ó –ò–°–¢–û–†–ò–Æ –ú–ê–¢–ß–ï–ô:")
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
            history = await client.get_player_history(player_id, limit=100)
            if history and 'items' in history:
                actual_matches_in_history = len(history['items'])
                print(f"   üìù –ú–∞—Ç—á–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–ª–∏–º–∏—Ç 100): {actual_matches_in_history}")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 100, –∑–Ω–∞—á–∏—Ç –∏—Ö –±–æ–ª—å—à–µ - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ
                if actual_matches_in_history == 100:
                    print("   ‚ö†Ô∏è  –í–µ—Ä–æ—è—Ç–Ω–æ –º–∞—Ç—á–µ–π –±–æ–ª—å—à–µ 100, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–ª—å—à–µ...")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–Ω—ã–µ offset'—ã —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    total_found = 100
                    offset = 100
                    
                    while offset < 3000:  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ 3000
                        batch = await client.get_player_history(player_id, limit=100, offset=offset)
                        if batch and 'items' in batch and len(batch['items']) > 0:
                            batch_size = len(batch['items'])
                            total_found += batch_size
                            print(f"   üìù Offset {offset}: –Ω–∞–π–¥–µ–Ω–æ –µ—â–µ {batch_size} –º–∞—Ç—á–µ–π")
                            if batch_size < 100:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è
                                break
                            offset += 100
                        else:
                            break
                    
                    print(f"   üéØ –†–ï–ê–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ú–ê–¢–ß–ï–ô: ~{total_found}")
            
            print(f"\n{'='*40} –í–´–í–û–î–´ {'='*40}")
            print(f"–ò–≥—Ä–æ–∫: {nickname}")
            print(f"Lifetime –ú–∞—Ç—á–∏: {lifetime.get('Matches', '–ù–ï–¢') if lifetime else '–ù–ï–¢ LIFETIME'}")
            print(f"–†–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {total_found if 'total_found' in locals() else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            print("="*80)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä–æ–∫–∞ {nickname}: {e}")
    
    await client.close()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
    if sys.platform == "win32":
        try:
            if hasattr(sys.stdout, 'reconfigure'):
                sys.stdout.reconfigure(encoding='utf-8')
                sys.stderr.reconfigure(encoding='utf-8')
        except:
            pass
    
    asyncio.run(investigate_faceit_api_structure())