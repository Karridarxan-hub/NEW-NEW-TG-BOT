import asyncio
from faceit_client import FaceitAPIClient
from datetime import datetime

async def test_sessions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–µ—Å—Å–∏–π"""
    print("=== –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –°–ï–°–°–ò–ô ===\n")
    
    client = FaceitAPIClient()
    player_id = '0cf595d2-b9a1-4316-9df9-a627c7a8c664'
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∞—Ç—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        history_data = await client.get_player_history(player_id, limit=20)
        
        if not history_data or 'items' not in history_data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö")
            return
        
        matches = history_data['items']
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –≤ —Å–µ—Å—Å–∏–∏ (–ª–æ–≥–∏–∫–∞ –∏–∑ main_handler.py)
        sessions = []
        current_session = []
        
        for match in matches:
            finished_at = match.get('finished_at', 0)
            if not finished_at:
                continue
                
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
            if finished_at > 10**12:
                match_time = datetime.fromtimestamp(finished_at / 1000)
            else:
                match_time = datetime.fromtimestamp(finished_at)
            
            match['parsed_time'] = match_time
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –ø—É—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            if not current_session:
                current_session = [match]
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
                last_match_time = current_session[-1]['parsed_time']
                time_diff = (last_match_time - match_time).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                
                if time_diff <= 10:  # –ú–∞—Ç—á–∏ –≤ —Ä–∞–º–∫–∞—Ö 10 —á–∞—Å–æ–≤ - –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è
                    current_session.append(match)
                else:  # –ë–æ–ª—å—à–µ 10 —á–∞—Å–æ–≤ - –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è
                    sessions.append(current_session)
                    current_session = [match]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
        if current_session:
            sessions.append(current_session)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
        for i, session in enumerate(sessions, 1):
            print(f"=== –°–ï–°–°–ò–Ø {i} ===")
            print(f"–ú–∞—Ç—á–µ–π –≤ —Å–µ—Å—Å–∏–∏: {len(session)}")
            
            # –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
            session_start = session[-1]['parsed_time']
            session_end = session[0]['parsed_time']
            duration_hours = (session_end - session_start).total_seconds() / 3600
            
            print(f"–ù–∞—á–∞–ª–æ: {session_start.strftime('%d.%m.%Y %H:%M')}")
            print(f"–ö–æ–Ω–µ—Ü: {session_end.strftime('%d.%m.%Y %H:%M')}")
            print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours:.1f} —á–∞—Å–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏ —Å–µ—Å—Å–∏–∏
            print("–ú–∞—Ç—á–∏:")
            for j, match in enumerate(session, 1):
                map_name = match.get('map', 'Unknown')
                match_time = match['parsed_time'].strftime('%H:%M')
                print(f"  {j}. {map_name} - {match_time}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
                if j > 1:
                    prev_match = session[j-2]
                    time_diff = (prev_match['parsed_time'] - match['parsed_time']).total_seconds() / 3600
                    print(f"     (—Ä–∞–∑—Ä—ã–≤: {time_diff:.1f}—á)")
            
            print()
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ –≤—ã–∑–æ–≤–∞ API)
        if sessions:
            latest_session = sessions[0]
            print("=== –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –ü–û–°–õ–ï–î–ù–ï–ô –°–ï–°–°–ò–ò ===")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤
            total_matches = len(latest_session)
            wins = 0
            match_results = []
            
            for match in latest_session:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞
                if 'results' in match and 'score' in match['results']:
                    score = match['results']['score']
                    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥—ã
                    if score.get('faction1', 0) > score.get('faction2', 0):
                        wins += 1
                        match_results.append("üèÜ")
                    else:
                        match_results.append("üíî")
                else:
                    match_results.append("‚ùì")
            
            winrate = (wins / total_matches * 100) if total_matches > 0 else 0
            
            print(f"–ú–∞—Ç—á–µ–π: {total_matches}")
            print(f"–ü–æ–±–µ–¥: {wins}")
            print(f"Winrate: {winrate:.1f}%")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {' '.join(match_results)}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_sessions())