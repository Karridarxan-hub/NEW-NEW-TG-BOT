#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from faceit_client import FaceitAPIClient

async def debug_elo_in_matches():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ ELO"""
    client = FaceitAPIClient()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–≥—Ä–æ–∫–æ–º test
    test_player = "test"
    
    print(f"üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ELO –≤ –º–∞—Ç—á–∞—Ö –¥–ª—è –∏–≥—Ä–æ–∫–∞: {test_player}")
    print("=" * 60)
    
    try:
        # 1. –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞
        player_data = await client.find_player_by_nickname(test_player)
        if not player_data:
            print(f"‚ùå –ò–≥—Ä–æ–∫ {test_player} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        player_id = player_data['player_id']
        print(f"‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω: {player_data.get('nickname')} (ID: {player_id})")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ELO
        profile = await client.get_player_details(player_id)
        if profile and 'games' in profile and 'cs2' in profile['games']:
            current_elo = profile['games']['cs2'].get('faceit_elo', 'N/A')
            print(f"üìä –¢–µ–∫—É—â–∏–π ELO –≤ –ø—Ä–æ—Ñ–∏–ª–µ: {current_elo}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
        print("\nüèÜ –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π...")
        history_data = await client.get_player_history(player_id, limit=5)
        
        if not history_data or 'items' not in history_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π")
            return
        
        matches = history_data['items']
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
        for i, match in enumerate(matches[:3], 1):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–∞—Ç—á–∞
            print(f"\nüéÆ –ú–ê–¢–ß {i}:")
            print(f"   Match ID: {match.get('match_id', 'N/A')}")
            print(f"   –î–∞—Ç–∞: {match.get('started_at', 'N/A')}")
            print(f"   –ö–∞—Ä—Ç–∞: {match.get('map', {}).get('name', 'N/A')}")
            
            # –ò—â–µ–º ELO –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            print("\n   üîç –ü–æ–∏—Å–∫ ELO –ø–æ–ª–µ–π:")
            
            # –ü—Ä—è–º–æ–µ –ø–æ–ª–µ elo
            if 'elo' in match:
                print(f"      ‚úÖ match['elo']: {match['elo']}")
            else:
                print("      ‚ùå match['elo']: –ù–ï–¢")
            
            # faceit_elo
            if 'faceit_elo' in match:
                print(f"      ‚úÖ match['faceit_elo']: {match['faceit_elo']}")
            else:
                print("      ‚ùå match['faceit_elo']: –ù–ï–¢")
            
            # –í teams –∏–ª–∏ players
            if 'teams' in match:
                print("      üèÉ –ò—â–µ–º –≤ teams...")
                teams = match['teams']
                for team_name, team_data in teams.items():
                    if isinstance(team_data, dict) and 'players' in team_data:
                        players = team_data['players']
                        for player in players:
                            if player.get('player_id') == player_id:
                                print(f"         –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ {team_name}")
                                if 'elo' in player:
                                    print(f"         ‚úÖ player['elo']: {player['elo']}")
                                if 'faceit_elo' in player:
                                    print(f"         ‚úÖ player['faceit_elo']: {player['faceit_elo']}")
                                if 'player_elo' in player:
                                    print(f"         ‚úÖ player['player_elo']: {player['player_elo']}")
                                print(f"         üìã –í—Å–µ –∫–ª—é—á–∏ –∏–≥—Ä–æ–∫–∞: {list(player.keys())}")
                                break
            
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ –º–∞—Ç—á–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
            print(f"      üìù –í—Å–µ –∫–ª—é—á–∏ –º–∞—Ç—á–∞: {list(match.keys())}")
        
        print("\n" + "=" * 60)
        print("üéØ –í–´–í–û–î–´:")
        print("–ï—Å–ª–∏ ELO –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ")
        print("–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ –¥–æ –∏ –ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await client.close()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
    if sys.platform == "win32":
        try:
            if hasattr(sys.stdout, 'reconfigure'):
                sys.stdout.reconfigure(encoding='utf-8')
                sys.stderr.reconfigure(encoding='utf-8')
        except:
            pass
    
    asyncio.run(debug_elo_in_matches())