from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import re

from keyboards import *
from faceit_client import faceit_client
from storage import storage


class BotStates(StatesGroup):
    waiting_for_nickname = State()
    waiting_for_custom_number = State()
    waiting_for_player_nickname = State()
    waiting_for_match_url = State()


router = Router()


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    faceit_id = storage.get_user_faceit_id(user_id)
    
    if faceit_id:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        user_data = storage.get_user(user_id)
        await message.answer(
            f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_data.get('nickname', '–ò–≥—Ä–æ–∫')}!\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer(
            "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FACEIT CS2 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –Ω–∞ FACEIT:",
            reply_markup=None
        )
        await state.set_state(BotStates.waiting_for_nickname)


@router.message(StateFilter(BotStates.waiting_for_nickname))
async def process_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    nickname = message.text.strip()
    user_id = message.from_user.id
    
    if len(nickname) < 2:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤ FACEIT API
    await message.answer("üîç –ò—â–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ FACEIT...")
    
    player_data = await faceit_client.find_player_by_nickname(nickname)
    
    if not player_data:
        await message.answer(
            f"‚ùå –ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ FACEIT.\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    faceit_id = player_data['player_id']
    storage.set_user_faceit_data(user_id, faceit_id, nickname)
    
    await message.answer(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
        f"üë§ –ò–≥—Ä–æ–∫: {player_data['nickname']}\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {player_data.get('games', {}).get('cs2', {}).get('skill_level', 'N/A')}\n"
        f"‚ö° ELO: {player_data.get('games', {}).get('cs2', {}).get('faceit_elo', 'N/A')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await state.clear()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "player_stats")
async def player_stats_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    await callback.message.edit_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_player_stats_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "stats_overall")
async def show_overall_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = callback.from_user.id
    faceit_id = storage.get_user_faceit_id(user_id)
    
    if not faceit_id:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_back_to_main_keyboard()
        )
        return
    
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    player_data = await faceit_client.get_player_details(faceit_id)
    stats_data = await faceit_client.get_player_stats(faceit_id)
    
    if not player_data or not stats_data:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard("player_stats")
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    formatted_stats = faceit_client.format_player_stats(player_data, stats_data)
    
    if not formatted_stats:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è CS2.",
            reply_markup=get_back_keyboard("player_stats")
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    current_elo = formatted_stats['elo']
    current_level = formatted_stats['level']
    next_level_elo = [800, 950, 1100, 1250, 1400, 1550, 1700, 1850, 2000, 2000][min(current_level, 9)]
    elo_to_next = max(0, next_level_elo - current_elo) if current_level < 10 else 0
    
    stats_text = f"""üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
    
üë§ **–ò–≥—Ä–æ–∫:** {formatted_stats['nickname']}
üèÜ **–£—Ä–æ–≤–µ–Ω—å:** {formatted_stats['level']}
‚ö° **ELO:** {formatted_stats['elo']:,}
üìà **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:** {elo_to_next:,}

üéÆ **–ú–∞—Ç—á–∏:** {formatted_stats['matches']:,}
üèÜ **–ü–æ–±–µ–¥—ã:** {formatted_stats['wins']:,}
üìä **–í–∏–Ω—Ä–µ–π—Ç:** {formatted_stats['winrate']}%

üíÄ **K/D/A:** {formatted_stats['kills']:,}/{formatted_stats['deaths']:,}/{formatted_stats['assists']:,}
‚öîÔ∏è **K/D:** {formatted_stats['kd_ratio']}
üí• **ADR:** {formatted_stats['adr']}
üéØ **–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞:** {formatted_stats['hltv_rating']}
üìç **KAST:** {formatted_stats['kast']}%

üéØ **–•–µ–¥—à–æ—Ç—ã:** {formatted_stats['headshots']}%
‚ö° **–ü–µ—Ä–≤—ã–µ —É–±–∏–π—Å—Ç–≤–∞:** {formatted_stats['first_kills']:,}
üíÄ **–ü–µ—Ä–≤—ã–µ —Å–º–µ—Ä—Ç–∏:** {formatted_stats['first_deaths']:,}
üí° **–§–ª–µ—à –∞—Å—Å–∏—Å—Ç—ã:** {formatted_stats['flash_assists']:,}
üí£ **–£—Ä–æ–Ω –≥—Ä–∞–Ω–∞—Ç–∞–º–∏:** {formatted_stats['utility_damage']:,}
üî• **HE —É—Ä–æ–Ω:** {formatted_stats['he_damage']:,}
üî• **–£—Ä–æ–Ω –º–æ–ª–æ—Ç–æ–≤:** {formatted_stats['molotov_damage']:,}
üòµ‚Äçüí´ **–û—Å–ª–µ–ø–ª–µ–Ω–∏–π:** {formatted_stats['enemies_flashed']:,}"""
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_back_keyboard("player_stats"),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "stats_maps")
async def show_maps_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞–º"""
    await callback.message.edit_text(
        "üó∫Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:",
        reply_markup=get_maps_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("map_"))
async def show_map_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ"""
    user_id = callback.from_user.id
    faceit_id = storage.get_user_faceit_id(user_id)
    
    map_name = callback.data.replace("map_", "").replace("_", " ").title()
    
    if not faceit_id:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.",
            reply_markup=get_back_keyboard("stats_maps")
        )
        return
    
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    player_data = await faceit_client.get_player_details(faceit_id)
    stats_data = await faceit_client.get_player_stats(faceit_id)
    
    if not player_data or not stats_data:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=get_back_keyboard("stats_maps")
        )
        return
    
    formatted_stats = faceit_client.format_player_stats(player_data, stats_data)
    
    if not formatted_stats or 'maps' not in formatted_stats:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º.",
            reply_markup=get_back_keyboard("stats_maps")
        )
        return
    
    # –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–µ
    map_stats = None
    for map_key, stats in formatted_stats['maps'].items():
        if map_name.lower() in map_key.lower():
            map_stats = stats
            break
    
    if not map_stats or map_stats['matches'] == 0:
        await callback.message.edit_text(
            f"‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–µ {map_name}.",
            reply_markup=get_back_keyboard("stats_maps")
        )
        return
    
    stats_text = f"""üó∫Ô∏è **{map_name}**

üéÆ **–ú–∞—Ç—á–∏:** {map_stats['matches']:,}
üèÜ **–ü–æ–±–µ–¥—ã:** {map_stats['wins']:,}
üìä **–í–∏–Ω—Ä–µ–π—Ç:** {map_stats['winrate']}%

üíÄ **K/D/A:** {map_stats['kills']:,}/{map_stats['deaths']:,}/{map_stats['assists']:,}
‚öîÔ∏è **K/D:** {map_stats['kd_ratio']}
üí• **ADR:** {map_stats['adr']}
üéØ **–†–µ–π—Ç–∏–Ω–≥:** {map_stats['hltv_rating']}"""
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_back_keyboard("stats_maps"),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "stats_session")
async def show_session_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ—Å—Å–∏—é"""
    user_id = callback.from_user.id
    session_data = storage.get_session(user_id)
    
    if not session_data['matches']:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –º–∞—Ç—á–µ–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤).",
            reply_markup=get_back_keyboard("player_stats")
        )
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
    matches = session_data['matches']
    total_matches = len(matches)
    wins = sum(1 for match in matches if match.get('won', False))
    
    total_kills = sum(match.get('kills', 0) for match in matches)
    total_deaths = sum(match.get('deaths', 0) for match in matches)
    total_assists = sum(match.get('assists', 0) for match in matches)
    
    kd_ratio = round(total_kills / max(total_deaths, 1), 2)
    avg_adr = round(sum(match.get('adr', 0) for match in matches) / total_matches, 1) if total_matches > 0 else 0
    avg_hltv = round(sum(match.get('hltv_rating', 0) for match in matches) / total_matches, 2) if total_matches > 0 else 0
    winrate = round((wins / total_matches) * 100, 1) if total_matches > 0 else 0
    
    session_start = session_data['start_time'].strftime("%d.%m.%Y %H:%M")
    
    stats_text = f"""‚è∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ—Å—Å–∏—é**
üìÖ **–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏:** {session_start}

üéÆ **–ú–∞—Ç—á–∏:** {total_matches}
üèÜ **–ü–æ–±–µ–¥—ã:** {wins}
üìä **–í–∏–Ω—Ä–µ–π—Ç:** {winrate}%

üíÄ **K/D/A:** {total_kills}/{total_deaths}/{total_assists}
‚öîÔ∏è **K/D:** {kd_ratio}
üí• **–°—Ä–µ–¥–Ω–∏–π ADR:** {avg_adr}
üéØ **–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:** {avg_hltv}"""
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_back_keyboard("player_stats"),
        parse_mode="Markdown"
    )
    await callback.answer()


# –û–¢–ö–õ–Æ–ß–ï–ù–û: –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å profile_handler.py
# @router.callback_query(F.data == "profile")
# async def show_profile(callback: CallbackQuery):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     user_id = callback.from_user.id
#     user_data = storage.get_user(user_id)
#     
#     if not user_data:
#         await callback.message.edit_text(
#             "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.",
#             reply_markup=get_back_to_main_keyboard()
#         )
#         return
#     
#     linked_date = user_data.get('linked_at', datetime.now()).strftime("%d.%m.%Y")
#     settings = storage.get_user_settings(user_id)
#     
#     profile_text = f"""üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**
# 
# üéÆ **–ù–∏–∫–Ω–µ–π–º:** {user_data.get('nickname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
# üÜî **FACEIT ID:** {user_data.get('faceit_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
# üìÖ **–ü—Ä–∏–≤—è–∑–∞–Ω:** {linked_date}
# 
# ‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
# üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('match_notifications', True) else '–í—ã–∫–ª—é—á–µ–Ω—ã'}
# ‚≠ê –ü–æ–¥–ø–∏—Å–∫–∞: {settings.get('subscription_type', 'standard').title()}"""
#     
#     await callback.message.edit_text(
#         profile_text,
#         reply_markup=get_profile_keyboard(),
#         parse_mode="Markdown"
#     )
#     await callback.answer()


# –û–¢–ö–õ–Æ–ß–ï–ù–û: –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å profile_handler.py
# @router.callback_query(F.data == "change_profile")
# async def change_profile(callback: CallbackQuery, state: FSMContext):
#     """–°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
#     await callback.message.edit_text(
#         "üîÑ –°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º FACEIT:",
#         reply_markup=get_back_to_main_keyboard()
#     )
#     await state.set_state(BotStates.waiting_for_nickname)
#     await callback.answer()


@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "settings_notifications")
async def settings_notifications(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    settings = storage.get_user_settings(user_id)
    enabled = settings.get('match_notifications', True)
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    
    await callback.message.edit_text(
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π —Å–µ–π—á–∞—Å **{status_text}**.\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_notifications_toggle_keyboard(enabled),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_notifications_"))
async def toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    action = callback.data.split("_")[-1]
    new_status = action == "enable"
    
    storage.update_user_settings(user_id, {'match_notifications': new_status})
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    
    await callback.message.edit_text(
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö **{status_text}**.",
        reply_markup=get_back_keyboard("settings"),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    await callback.message.edit_text(
        "‚ùì –ü–æ–º–æ—â—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_help_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "help_functions")
async def help_functions(callback: CallbackQuery):
    """–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    help_text = """üìñ **–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞** - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ FACEIT
‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - ELO, K/D, ADR, HLTV —Ä–µ–π—Ç–∏–Ω–≥
‚Ä¢ –ü–æ –∫–∞—Ä—Ç–∞–º - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ CS2  
‚Ä¢ –ó–∞ —Å–µ—Å—Å–∏—é - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤

üìù **–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π** - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

üìà **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã** - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã

üéÆ **–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á** - –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ + –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

‚öîÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤** - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏

üîç **–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞** - –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –º–∞—Ç—á

üë§ **–ü—Ä–æ—Ñ–∏–ª—å** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏** - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∞"""
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_back_keyboard("help"),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "help_rating")
async def help_rating(callback: CallbackQuery):
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–∞"""
    rating_text = """‚≠ê **–ö–∞–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞**

–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ - —ç—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—é—â–∞—è:

üìä **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–π—Ç–∏–Ω–≥–∞:**
‚Ä¢ KPR (Kills per Round) - —É–±–∏–π—Å—Ç–≤–∞ –∑–∞ —Ä–∞—É–Ω–¥
‚Ä¢ DPR (Deaths per Round) - —Å–º–µ—Ä—Ç–∏ –∑–∞ —Ä–∞—É–Ω–¥  
‚Ä¢ KAST - —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞—É–Ω–¥–∞—Ö (%)
‚Ä¢ ADR (Average Damage per Round) - —É—Ä–æ–Ω –∑–∞ —Ä–∞—É–Ω–¥
‚Ä¢ Impact Rating - –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É

üìà **–®–∫–∞–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:**
‚Ä¢ 1.30+ - –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
‚Ä¢ 1.15+ - –û—Ç–ª–∏—á–Ω–æ  
‚Ä¢ 1.00+ - –•–æ—Ä–æ—à–æ
‚Ä¢ 0.85+ - –°—Ä–µ–¥–Ω–µ
‚Ä¢ 0.85- - –ü–ª–æ—Ö–æ

Impact —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —É–±–∏–π—Å—Ç–≤ (–º–Ω–æ–≥–æ—Ñ—Ä–∞–≥–∏, –∫–ª–∞—Ç—á–∏, –ø–µ—Ä–≤—ã–µ —É–±–∏–π—Å—Ç–≤–∞)."""
    
    await callback.message.edit_text(
        hltv_text,
        reply_markup=get_back_keyboard("help"),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "help_contact")
async def help_contact(callback: CallbackQuery):
    """–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"""
    contact_text = (
        "üí¨ **–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º**\n\n"
        "üìß **Email:** faceit.cs2.bot@gmail.com\n"
        "üí¨ **Telegram:** @cs2_faceit_support\n"
        "üêõ **GitHub Issues:** github.com/cs2-faceit-bot/issues\n\n"
        "üìù **–û —á–µ–º –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å:**\n"
        "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º FACEIT\n\n"
        "‚ö° **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n"
        "üîî –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID: `{}`".format(callback.from_user.id)
    )
    
    await callback.message.edit_text(
        contact_text,
        reply_markup=get_back_keyboard("help"),
        parse_mode="Markdown"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö callback'–æ–≤
@router.callback_query()
async def unknown_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤"""
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message()
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_menu_keyboard()
    )