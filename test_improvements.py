"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞
"""

import asyncio
import logging
from faceit_client import FaceitAPIClient
from bot.services.cache_service import CacheService
from bot.handlers.enhanced_comparison import format_enhanced_comparison, get_indicator
from storage import init_storage, cleanup_storage

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_cache_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º storage
    await init_storage()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_nickname = "s1mple"
    test_profile = {
        "nickname": test_nickname,
        "level": 10,
        "elo": 3000,
        "stats": {
            "kd_ratio": 1.5,
            "winrate": 65
        }
    }
    
    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à
    print(f"1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {test_nickname} –≤ –∫–µ—à...")
    await CacheService.set_player_profile(test_nickname, test_profile)
    print("   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞
    print(f"2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {test_nickname} –∏–∑ –∫–µ—à–∞...")
    cached = await CacheService.get_player_profile(test_nickname)
    if cached and cached.get("nickname") == test_nickname:
        print(f"   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–µ—à–∞: ELO={cached.get('elo')}")
    else:
        print("   ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
    print("3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞...")
    stats = await CacheService.get_cache_stats()
    print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    return True


async def test_visual_indicators():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ===")
    
    # –¢–µ—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    test_cases = [
        (100, 50, True, "–ë–æ–ª—å—à–µ –ª—É—á—à–µ: 100 vs 50"),
        (50, 100, True, "–ë–æ–ª—å—à–µ –ª—É—á—à–µ: 50 vs 100"),
        (100, 100, True, "–†–∞–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 100 vs 100"),
        (2.0, 3.0, False, "–ú–µ–Ω—å—à–µ –ª—É—á—à–µ: 2.0 vs 3.0"),
    ]
    
    for val1, val2, higher_is_better, description in test_cases:
        ind1, ind2 = get_indicator(val1, val2, higher_is_better)
        print(f"{description}: {ind1} {val1} | {val2} {ind2}")
    
    return True


async def test_enhanced_comparison():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    player1 = {
        "nickname": "Player1",
        "stats": {
            "level": 10,
            "elo": 2500,
            "matches": 1000,
            "wins": 600,
            "winrate": 60.0,
            "kd_ratio": 1.3,
            "avg_headshot_percentage": 52.0,
            "adr": 85.5,
            "kast": 72.0,
            "hltv_rating": 1.15,
            "map_statistics": {
                "de_mirage": {
                    "matches": 250,
                    "winrate": 65.0,
                    "kd_ratio": 1.4,
                    "hltv_rating": 1.2
                },
                "de_dust2": {
                    "matches": 200,
                    "winrate": 58.0,
                    "kd_ratio": 1.25,
                    "hltv_rating": 1.1
                },
                "de_inferno": {
                    "matches": 180,
                    "winrate": 62.0,
                    "kd_ratio": 1.35,
                    "hltv_rating": 1.18
                }
            }
        },
        "performance": {
            "recent_form": ["W", "W", "L", "W", "W", "W", "L", "W", "W", "L"],
            "wins": 7,
            "losses": 3
        }
    }
    
    player2 = {
        "nickname": "Player2",
        "stats": {
            "level": 9,
            "elo": 2200,
            "matches": 800,
            "wins": 400,
            "winrate": 50.0,
            "kd_ratio": 1.1,
            "avg_headshot_percentage": 48.0,
            "adr": 78.2,
            "kast": 68.5,
            "hltv_rating": 1.05,
            "map_statistics": {
                "de_ancient": {
                    "matches": 150,
                    "winrate": 52.0,
                    "kd_ratio": 1.15,
                    "hltv_rating": 1.08
                },
                "de_nuke": {
                    "matches": 120,
                    "winrate": 48.0,
                    "kd_ratio": 1.05,
                    "hltv_rating": 1.02
                },
                "de_vertigo": {
                    "matches": 100,
                    "winrate": 45.0,
                    "kd_ratio": 1.0,
                    "hltv_rating": 0.98
                }
            }
        },
        "performance": {
            "recent_form": ["L", "W", "L", "L", "W", "W", "L", "L", "W", "L"],
            "wins": 4,
            "losses": 6
        }
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤...")
    comparison_text = format_enhanced_comparison(player1, player2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    checks = [
        ("üìà" in comparison_text, "–í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–æ—Å—Ç–∞"),
        ("üìâ" in comparison_text, "–í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–∞–¥–µ–Ω–∏—è"),
        ("üó∫Ô∏è" in comparison_text, "–°–µ–∫—Ü–∏—è –∫–∞—Ä—Ç"),
        ("HLTV" in comparison_text, "HLTV —Ä–µ–π—Ç–∏–Ω–≥"),
        ("Mirage" in comparison_text or "mirage" in comparison_text, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º"),
        ("W" in comparison_text and "L" in comparison_text, "–ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ–æ—Ä–º–∞"),
        ("üèÜ" in comparison_text, "–ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
    ]
    
    for check, description in checks:
        if check:
            print(f"   ‚úÖ {description}")
        else:
            print(f"   ‚ùå {description}")
    
    # –í—ã–≤–æ–¥–∏–º —á–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\n–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    print(comparison_text[:500].replace("<b>", "").replace("</b>", ""))
    
    return True


async def test_faceit_client_cache():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ FACEIT –∫–ª–∏–µ–Ω—Ç–µ"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FACEIT –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–µ—à–µ–º ===")
    
    client = FaceitAPIClient()
    test_nickname = "s1mple"
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫–µ—à–∞)
    print(f"1. –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è {test_nickname} (–±–µ–∑ –∫–µ—à–∞)...")
    import time
    start = time.time()
    profile1 = await client.get_player_full_profile(test_nickname)
    time1 = time.time() - start
    
    if profile1:
        print(f"   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω –∑–∞ {time1:.2f} —Å–µ–∫")
    else:
        print(f"   ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        return False
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫–µ—à–∞)
    print(f"2. –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è {test_nickname} (–∏–∑ –∫–µ—à–∞)...")
    start = time.time()
    profile2 = await client.get_player_full_profile(test_nickname)
    time2 = time.time() - start
    
    if profile2:
        print(f"   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω –∑–∞ {time2:.2f} —Å–µ–∫")
        if time2 < time1:
            print(f"   ‚úÖ –ö–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç! –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ {time1/time2:.1f} —Ä–∞–∑")
        else:
            print(f"   ‚ö†Ô∏è –ö–µ—à –Ω–µ –¥–∞–ª —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    else:
        print(f"   ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    
    await client.close()
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞\n")
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        result = await test_cache_service()
        results.append(("Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ", result))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        results.append(("Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ", False))
    
    # –¢–µ—Å—Ç 2: –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    try:
        result = await test_visual_indicators()
        results.append(("–í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", result))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        results.append(("–í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", False))
    
    # –¢–µ—Å—Ç 3: –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    try:
        result = await test_enhanced_comparison()
        results.append(("–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", result))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        results.append(("–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", False))
    
    # –¢–µ—Å—Ç 4: FACEIT –∫–ª–∏–µ–Ω—Ç —Å –∫–µ—à–µ–º
    try:
        result = await test_faceit_client_cache()
        results.append(("FACEIT –∫–ª–∏–µ–Ω—Ç —Å –∫–µ—à–µ–º", result))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ FACEIT –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        results.append(("FACEIT –∫–ª–∏–µ–Ω—Ç —Å –∫–µ—à–µ–º", False))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    for test_name, passed in results:
        status = "PASSED" if passed else "FAILED"
        print(f"{test_name}: {status}")
    
    passed_count = sum(1 for _, passed in results if passed)
    total_count = len(results)
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_count}/{total_count}")
    
    # –û—á–∏—Å—Ç–∫–∞
    await cleanup_storage()
    
    return passed_count == total_count


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)